{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Reporting Webhooks",
    "description": "Customer.io lets you subscribe to reporting webhooks. This page details the events that we report back to your webhook URL.\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->"
  },
  "servers": [
    {
      "url": "https://api.customer.io",
      "description": "The base URL for broadcasts, transactional messages, and data-retrieval APIs. These endpoints use bearer authorization, and require a [token that you generate in the UI](https://fly.customer.io/settings/api_credentials?keyType=app)."
    }
  ],
  "tags": [
    {
      "name": "Reporting webhooks",
      "description": "Set up webhooks to inform an external service about Customer.io events. Webhooks can notify you immediately when customer attributes change or when people open your messages.\n\n## Set up webhooks\n1. [Log in](https://fly.customer.io/login) and go to *Data & Integrations* >  *Integrations*.\n\n1. Find and select **Reporting Webhooks**.\n\n1. Click **Add Reporting Webhook**.\n\n1. Enter the **Webhook Endpoint**—the URL where you want to receive events. The URL can be either HTTP or HTTPs, but we recommended HTTPS to protect customer information.\n\n1. Select the events you want to receive.\n\n1. (Optional) Select the **Send Frequency** and **Body Content** options.\n    * **Send Frequency:** This determines whether you receive events the first time they happen or every time they happen.\n    *  **Body Content:** Enable this to include message body content in all of the \"Sent\" events we send to you.\n\n1. Click **Save and Enable Webhook**.\n\n## Timeouts and failures\n\nWe have a 4 second timeout for calls to your webhook endpoint. If we don't get a successful (2xx) response during those 4 seconds, we retry the webhook over a period of seven days with an exponential backoff. We backlog subsequent webhook calls and won't continue processing them until the timed-out webhook call returns a successful response or the seven day retry period expires.\n\nIf your webhook server responds with any of the following status codes, we'll wait for one hour before we retry the failed call. As with timeouts, we use the same exponential backoff for retries and we'll backlog subsequent webhook calls until the failed call returns a successful response.\n\n* Error codes: `400`, `401`, `402`, `403`, `404`, `405`, `410`, `429`, `500`, `502`, `521`.\n* Error responses: `EOF`, `server misbehaving`, `connect: connection refused`, `read: connection reset by peer`, `tls: failed to verify certificate: x509:`\n\nIf you have issues with your webhook server and you want to temporarily block our servers, you can look up the current set of IP addresses we use [via this API endpoint](/api/app/#operation/getCioAllowlist).\n\n## Securely verifying requests\n\nFor security purposes, every email webhook is delivered with an `X-CIO-Signature` header. This signature is generated by combining your webhook signing key with the body of webhook request using a standard HMAC-SHA256 hash. You can find the signing key on the Email Activity Webhook integration page in your account settings. (This is the same page where you enter your webhook endpoint.)\n\nTo validate a signed request, first you'll need to retrieve the `X-CIO-Timestamp` header sent with the webhook request, and the body of the request. Combine the version number, timestamp and body delimited by colons to form a string in the form `v0:<timestamp>:<body>` (the version number is always `v0`). Using HMAC-SHA256, hash the string using your webhook signing secret as the hash key. Compare this value to the value of the `X-CIO-Signature` header sent with the request to confirm that the request originated with Customer.io.\n"
    },
    {
      "name": "Customer Events",
      "description": "Customer events occur when a a person changes their subscription settings—their `unsubscribed` or `cio_subscription_preferences` attributes change. These changes happen without a reference to a message—like when a customer changes a subscription preference in their account information. \n\n## Customer subscribed\nA person subscribed to messages from you—their `unsubscribed` attribute was set to `false`. \n<SchemaDefinition schemaRef=\"#/components/schemas/person_subscribed\" />\n\n## Customer Unsubscribed\nA person unsubscribed to messages from you—their `unsubscribed` attribute was set to `true`. \n<SchemaDefinition schemaRef=\"#/components/schemas/person_unsubscribed\" />\n\n## Customer subscription preferences changed\nA person changed their subscription preferences—either through our subscription center, or you changed their `cio_subscription_preferences` attribute values. [Learn more about the subscription center](/subscription-center/).\n<SchemaDefinition schemaRef=\"#/components/schemas/person_cio_subscription_preferences_changed\" />\n"
    },
    {
      "name": "Email Events",
      "description": "Events that occur during the lifecycle of an email delivery. Some events are reported by the delivery provider.\n\n## Email Drafted\nAn email draft was created.\n<SchemaDefinition schemaRef=\"#/components/schemas/email_drafted\" />\n\n## Email Attempted\n\nAn email could not be sent to the email provider. This metric indicates that we will retry to send the email.\n<SchemaDefinition schemaRef=\"#/components/schemas/email_attempted\" />\n\n## Email Sent\nA message was successfully sent.\n<SchemaDefinition schemaRef=\"#/components/schemas/email_sent\" />\n\n## Email Delivered\nA message was successfully delivered to a recipient.\n<SchemaDefinition schemaRef=\"#/components/schemas/email_delivered\" />\n\n## Email Opened\nAn email was opened.\n<SchemaDefinition schemaRef=\"#/components/schemas/email_opened\" />\n\n## Email Clicked\nA tracked link in an email was clicked.\n<SchemaDefinition schemaRef=\"#/components/schemas/email_clicked\" />\n\n## Email Converted\nA person matched a conversion goal attributed to an email.\n<SchemaDefinition schemaRef=\"#/components/schemas/email_converted\" />\n\n## Email Unsubscribed\nThe recipient unsubscribed based on a particular message.\n<SchemaDefinition schemaRef=\"#/components/schemas/email_unsubscribed\" />\n\n## Email Bounced\nThe delivery provider could not deliver an email.\n<SchemaDefinition schemaRef=\"#/components/schemas/email_bounced\" />\n\n## Email Suppressed\nCustomer.io did not send an email because it was addressed to a person who was suppressed. The metric `dropped` indicates a suppressed email event.\n<SchemaDefinition schemaRef=\"#/components/schemas/email_dropped\" />\n\n## Email Spammed\nA recipient marked an email as spam.\n<SchemaDefinition schemaRef=\"#/components/schemas/email_spammed\" />\n\n## Email Failed\nAn email couldn't be sent to the delivery provider.\n<SchemaDefinition schemaRef=\"#/components/schemas/email_failed\" />\n\n## Email Undeliverable\n\nA message was undeliverable. Undeliverable messages are messages that have:\n* Hit a message limit\n* Come from a newsletter that was cancelled or deleted\n* Are sent from an environment that has delivery disabled (which is something you might do if you’re testing an integration). \n\nIf you’re not using message limits, you probably won’t see this event.\n<SchemaDefinition schemaRef=\"#/components/schemas/email_undeliverable\" />\n"
    },
    {
      "name": "SMS Events",
      "description": "Events that occur during the lifecycle of an SMS delivery. Some events are reported by the delivery provider.\n## SMS Drafted\nAn SMS notification was drafted.\n<SchemaDefinition schemaRef=\"#/components/schemas/sms_drafted\" />\n\n## SMS Attempted\nAn SMS could not be sent to the delivery provider, but will retry.\n<SchemaDefinition schemaRef=\"#/components/schemas/sms_attempted\" />\n\n## SMS Sent\nAn SMS notification was sent.\n<SchemaDefinition schemaRef=\"#/components/schemas/sms_sent\" />\n\n## SMS Delivered\nAn SMS notification was delivered to a recipient.\n<SchemaDefinition schemaRef=\"#/components/schemas/sms_delivered\" />\n\n## SMS Clicked\nA recipient tapped a link in an SMS message they received.\n<SchemaDefinition schemaRef=\"#/components/schemas/sms_clicked\" />\n\n## SMS Converted\nA person matched a conversion goal attributed to an SMS.\n<SchemaDefinition schemaRef=\"#/components/schemas/sms_converted\" />\n\n## SMS Bounced\nThe delivery provider was unable to deliver an SMS message.\n<SchemaDefinition schemaRef=\"#/components/schemas/sms_bounced\" />\n\n## SMS Failed\nAn SMS couldn't be sent to the delivery provider.\n<SchemaDefinition schemaRef=\"#/components/schemas/sms_failed\" />\n\n## SMS Undeliverable\n\nA message was undeliverable. Undeliverable messages are messages that have:\n* Hit a message limit\n* Come from a newsletter that was cancelled or deleted\n* Are sent from an environment that has delivery disabled (which is something you might do if you’re testing an integration). \n\nIf you’re not using message limits, you probably won’t see this event.\n<SchemaDefinition schemaRef=\"#/components/schemas/sms_undeliverable\" />\n"
    },
    {
      "name": "Push Notification Events",
      "description": "Events that occur during the lifecycle of an push notification delivery.\n## Push Drafted\nA push notification was drafted.\n<SchemaDefinition schemaRef=\"#/components/schemas/push_drafted\" />\n\n## Push Attempted\nA push notification was attempted but unsuccessful. This generally means that we'll try again.\n<SchemaDefinition schemaRef=\"#/components/schemas/push_attempted\" />\n\n## Push Sent\nA push notification was sent to a recipient.\n<SchemaDefinition schemaRef=\"#/components/schemas/push_sent\" />\n\n## Push Delivered\nA push notification was delivered to a recipient.\n<SchemaDefinition schemaRef=\"#/components/schemas/push_delivered\" />\n\n## Push Opened\nA device opened a push notification.\n<SchemaDefinition schemaRef=\"#/components/schemas/push_opened\" />\n\n## Push Clicked\nA recipient tapped a link in a push notification.\n<SchemaDefinition schemaRef=\"#/components/schemas/push_clicked\" />\n\n## Push Converted\nA person matched a conversion goal attributed to a push notification.\n<SchemaDefinition schemaRef=\"#/components/schemas/push_converted\" />\n\n## Push Bounced\nThe delivery provider reported at least one invalid device token.\n<SchemaDefinition schemaRef=\"#/components/schemas/push_bounced\" />\n\n## Push Dropped\nA push notification wasn't sent because at least one device token previously bounced.\n<SchemaDefinition schemaRef=\"#/components/schemas/push_dropped\" />\n\n## Push Failed\nA push notification couldn't be sent to the delivery provider.\n<SchemaDefinition schemaRef=\"#/components/schemas/push_failed\" />\n\n## Push Undeliverable\n\nA message was undeliverable. Undeliverable messages are messages that have:\n* Hit a message limit\n* Come from a newsletter that was cancelled or deleted\n* Are sent from an environment that has delivery disabled (which is something you might do if you’re testing an integration). \n\nIf you’re not using message limits, you probably won’t see this event.\n<SchemaDefinition schemaRef=\"#/components/schemas/push_undeliverable\" />\n"
    },
    {
      "name": "In-App Message Events",
      "description": "Events that occur during the lifecycle of an in-app message.\n## In-App Drafted\nA in-app notification was drafted.\n<SchemaDefinition schemaRef=\"#/components/schemas/in_app_drafted\" />\n\n## In-App Attempted\nA in-app notification was attempted but unsuccessful. This generally means that we'll try again.\n<SchemaDefinition schemaRef=\"#/components/schemas/in_app_attempted\" />\n\n## In-App Sent\nA in-app notification was sent to a recipient.\n<SchemaDefinition schemaRef=\"#/components/schemas/in_app_sent\" />\n\n## In-App Opened\nA device opened a in-app notification.\n<SchemaDefinition schemaRef=\"#/components/schemas/in_app_opened\" />\n\n## In-App Clicked\nA recipient tapped a link in a in-app notification.\n<SchemaDefinition schemaRef=\"#/components/schemas/in_app_clicked\" />\n\n## In-App Converted\nA person matched a conversion goal attributed to a in-app notification.\n<SchemaDefinition schemaRef=\"#/components/schemas/in_app_converted\" />\n\n## In-App Failed\nA in-app notification couldn't be sent to the delivery provider.\n<SchemaDefinition schemaRef=\"#/components/schemas/in_app_failed\" />\n\n## In-App Undeliverable\n\nA message was undeliverable. Undeliverable messages are messages that have:\n* Hit a message limit\n* Come from a newsletter that was cancelled or deleted\n* Are sent from an environment that has delivery disabled (which is something you might do if you’re testing an integration). \n\nIf you’re not using message limits, you probably won’t see this event.\n<SchemaDefinition schemaRef=\"#/components/schemas/in_app_undeliverable\" />\n"
    },
    {
      "name": "Slack Events",
      "description": "Events generated from a slack message delivery.\n## Slack Drafted\nA slack message was drafted.\n<SchemaDefinition schemaRef=\"#/components/schemas/slack_drafted\" />\n\n## Slack Attempted\nA slack message could not be sent and will be retried.\n<SchemaDefinition schemaRef=\"#/components/schemas/slack_attempted\" />\n\n## Slack Sent\nA slack message was sent.\n<SchemaDefinition schemaRef=\"#/components/schemas/slack_sent\" />\n\n## Slack Clicked\nA person clicked a tracked link in a Slack message.\n<SchemaDefinition schemaRef=\"#/components/schemas/slack_clicked\" />\n\n## Slack Failed\nA slack message failed.\n<SchemaDefinition schemaRef=\"#/components/schemas/slack_failed\" />\n\n## Slack Undeliverable\n\nA message was undeliverable. Undeliverable messages are messages that have:\n* Hit a message limit\n* Come from a newsletter that was cancelled or deleted\n* Are sent from an environment that has delivery disabled (which is something you might do if you’re testing an integration). \n\nIf you’re not using message limits, you probably won’t see this event.\n<SchemaDefinition schemaRef=\"#/components/schemas/slack_undeliverable\" />\n"
    },
    {
      "name": "Webhook Events",
      "description": "Events that occur as a part of a webhook delivery.\n## Webhook Drafted\nA webhook draft was created.\n<SchemaDefinition schemaRef=\"#/components/schemas/webhook_drafted\" />\n\n## Webhook Attempted\nA webhook failed to send, but will be retried.\n<SchemaDefinition schemaRef=\"#/components/schemas/webhook_attempted\" />\n\n## Webhook Sent\nA webhook was sent from Customer.io.\n<SchemaDefinition schemaRef=\"#/components/schemas/webhook_sent\" />\n\n## Webhook Clicked\nThe webhook recipient opened a tracked link in the webhook payload.\n<SchemaDefinition schemaRef=\"#/components/schemas/webhook_clicked\" />\n\n## Webhook Failed\nA webhook failed to send.\n<SchemaDefinition schemaRef=\"#/components/schemas/webhook_failed\" />\n\n## Webhook Undeliverable\n\nA webhook was undeliverable. Undeliverable webhooks are webhooks that have:\n* Hit a message limit\n* Come from a newsletter that was cancelled or deleted\n* Are sent from an environment that has delivery disabled (which is something you might do if you’re testing an integration). \n\nIf you’re not using message limits, you probably won’t see this event.\n<SchemaDefinition schemaRef=\"#/components/schemas/webhook_undeliverable\" />\n"
    }
  ],
  "paths": {
    "/v1/reporting_webhooks": {
      "servers": [
        {
          "url": "https://api.customer.io",
          "description": "This API uses bearer authorization, requiring a [token that you generate in the UI](https://fly.customer.io/settings/api_credentials?keyType=app)."
        }
      ],
      "post": {
        "summary": "Create a reporting webhook",
        "operationId": "createWebhook",
        "security": [
          {
            "Bearer-Auth": []
          }
        ],
        "description": "Create a new webhook configuration.",
        "tags": [
          "Reporting Webhooks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reportingWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns your webhook configuration and the ID of the webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportingWebhook"
                }
              }
            }
          },
          "400": {
            "description": "The request was malformed."
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      },
      "get": {
        "summary": "List reporting webhooks",
        "operationId": "listWebhooks",
        "security": [
          {
            "Bearer-Auth": []
          }
        ],
        "description": "Return a list of all of your reporting webhooks",
        "tags": [
          "Reporting Webhooks"
        ],
        "responses": {
          "200": {
            "description": "Returns an array of your `reporting_webhooks`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reporting_webhooks": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/reportingWebhook"
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      }
    },
    "/v1/reporting_webhooks/{webhook_id}": {
      "servers": [
        {
          "url": "https://api.customer.io",
          "description": "This API uses bearer authorization, requiring a [token that you generate in the UI](https://fly.customer.io/settings/api_credentials?keyType=app)."
        }
      ],
      "parameters": [
        {
          "$ref": "#/components/parameters/webhook_id"
        }
      ],
      "get": {
        "summary": "Get a reporting webhook",
        "operationId": "getWebhook",
        "security": [
          {
            "Bearer-Auth": []
          }
        ],
        "description": "Returns information about a specific reporting webhook.",
        "tags": [
          "Reporting Webhooks"
        ],
        "responses": {
          "200": {
            "description": "Returns an individual webhook configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportingWebhook"
                }
              }
            }
          },
          "404": {
            "description": "The webhook ID does not exist."
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      },
      "put": {
        "summary": "Update a webhook configuration",
        "operationId": "updateWebhook",
        "security": [
          {
            "Bearer-Auth": []
          }
        ],
        "description": "Update the configuration of a reporting webhook. Turn events on or off, change the webhook URL, etc.",
        "tags": [
          "Reporting Webhooks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reportingWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns your webhook configuration and the ID of the webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportingWebhook"
                }
              }
            }
          },
          "400": {
            "description": "The request was malformed."
          },
          "404": {
            "description": "The webhook ID does not exist."
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      },
      "delete": {
        "summary": "Delete a reporting webhook",
        "operationId": "deleteWebhook",
        "security": [
          {
            "Bearer-Auth": []
          }
        ],
        "description": "Delete a reporting webhook's configuration.",
        "tags": [
          "Reporting Webhooks"
        ],
        "responses": {
          "200": {
            "description": "A successful request has no response."
          },
          "404": {
            "description": "The webhook ID does not exist."
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      }
    }
  },
  "x-webhooks": {
    "reportingWebhook": {
      "post": {
        "summary": "Reporting webhook format",
        "description": "Customer.io sends events to your webhook URL in the following format. Events are generally organized by `object_type`—representing the message or Customer.io action (i.e. `email`, `sms`, etc)—and the specific `metric` pertaining to the type (i.e. `sent`, `bounced`, etc).",
        "operationId": "reportingWebhook",
        "tags": [
          "Reporting Webhooks",
          "Reporting webhooks"
        ],
        "security": [],
        "parameters": [
          {
            "name": "x-cio-timestamp",
            "schema": {
              "type": "integer",
              "format": "unix timestamp"
            },
            "description": "The timestamp when the request was sent.",
            "in": "header",
            "required": true
          },
          {
            "name": "x-cio-signature",
            "in": "header",
            "description": "A string combining your webhook signing key with the body of webhook request using an HMAC-SHA256 hash, used to help you [securely verify requests](/webhooks#securely-verifying-requests). \n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {},
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/customer_event"
                  },
                  {
                    "$ref": "#/components/schemas/email_event"
                  },
                  {
                    "$ref": "#/components/schemas/push_event"
                  },
                  {
                    "$ref": "#/components/schemas/in_app_event"
                  },
                  {
                    "$ref": "#/components/schemas/sms_event"
                  },
                  {
                    "$ref": "#/components/schemas/slack_event"
                  },
                  {
                    "$ref": "#/components/schemas/webhook_event"
                  }
                ]
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "reporting_webhook": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/customer_event"
          },
          {
            "$ref": "#/components/schemas/email_event"
          },
          {
            "$ref": "#/components/schemas/push_event"
          },
          {
            "$ref": "#/components/schemas/in_app_event"
          },
          {
            "$ref": "#/components/schemas/sms_event"
          },
          {
            "$ref": "#/components/schemas/slack_event"
          },
          {
            "$ref": "#/components/schemas/webhook_event"
          }
        ],
        "discriminator": {
          "propertyName": "object_type"
        }
      },
      "customer_event": {
        "title": "Customer",
        "description": "Events that occur when a customer subscribes or unsubscribes from your messages.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/person_subscribed"
          },
          {
            "$ref": "#/components/schemas/person_unsubscribed"
          },
          {
            "$ref": "#/components/schemas/person_cio_subscription_preferences_changed"
          }
        ]
      },
      "customer_event_common": {
        "type": "object",
        "required": [
          "event_id",
          "object_type",
          "timestamp",
          "data"
        ],
        "properties": {
          "event_id": {
            "$ref": "#/components/schemas/event_id"
          },
          "object_type": {
            "type": "string",
            "enum": [
              "customer"
            ],
            "description": "The event represents a customer subscribing, unsubscribing, or changing their subscription preferences.",
            "example": "customer"
          },
          "timestamp": {
            "$ref": "#/components/schemas/webhook_timestamp"
          },
          "data": {
            "description": "Contains information about the event, specific to the `object_type` and `metric`.",
            "type": "object",
            "required": [
              "identifiers",
              "customer_id",
              "email_address"
            ],
            "properties": {
              "customer_id": {
                "$ref": "#/components/schemas/webhook_customer_id"
              },
              "email_address": {
                "$ref": "#/components/schemas/email_address"
              },
              "identifiers": {
                "$ref": "#/components/schemas/webhook_identifiers"
              }
            }
          }
        }
      },
      "person_subscribed": {
        "title": "subscribed",
        "description": "A person subscribed to messages from you—their `unsubscribed` attribute was set to `false`.",
        "allOf": [
          {
            "type": "object",
            "required": [
              "metric"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "subscribed"
                ],
                "description": "The metric recorded by the event. For `customer` events, this is whether the customer explicitly subscribed or unsubscribed."
              }
            }
          },
          {
            "$ref": "#/components/schemas/customer_event_common"
          }
        ]
      },
      "person_unsubscribed": {
        "title": "unsubscribed",
        "description": "A person unsubscribed to messages from you—their `unsubscribed` attribute was set to `true`.",
        "allOf": [
          {
            "type": "object",
            "required": [
              "metric"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "unsubscribed"
                ],
                "description": "The metric recorded by the event. For `customer` events, this is whether the customer explicitly subscribed or unsubscribed."
              }
            }
          },
          {
            "$ref": "#/components/schemas/customer_event_common"
          }
        ]
      },
      "person_cio_subscription_preferences_common": {
        "oneOf": [
          {
            "title": "API triggered broadcast",
            "required": [
              "trigger_id",
              "broadcast_id",
              "delivery_id",
              "action_id"
            ],
            "type": "object",
            "properties": {
              "trigger_id": {
                "$ref": "#/components/schemas/trigger_id"
              },
              "customer_id": {
                "$ref": "#/components/schemas/webhook_customer_id"
              },
              "delivery_id": {
                "$ref": "#/components/schemas/delivery_id"
              },
              "action_id": {
                "$ref": "#/components/schemas/action_id_webhook"
              },
              "broadcast_id": {
                "$ref": "#/components/schemas/broadcast_id",
                "nullable": true
              },
              "journey_id": {
                "$ref": "#/components/schemas/journey_id"
              },
              "parent_action_id": {
                "$ref": "#/components/schemas/parent_action_id"
              }
            }
          },
          {
            "title": "Campaign",
            "type": "object",
            "required": [
              "campaign_id",
              "delivery_id",
              "action_id"
            ],
            "properties": {
              "campaign_id": {
                "$ref": "#/components/schemas/campaign_id",
                "nullable": true
              },
              "customer_id": {
                "$ref": "#/components/schemas/webhook_customer_id"
              },
              "delivery_id": {
                "$ref": "#/components/schemas/delivery_id"
              },
              "action_id": {
                "$ref": "#/components/schemas/action_id_webhook"
              },
              "journey_id": {
                "$ref": "#/components/schemas/journey_id"
              },
              "parent_action_id": {
                "$ref": "#/components/schemas/parent_action_id"
              },
              "trigger_event_id": {
                "$ref": "#/components/schemas/trigger_event_id"
              }
            }
          },
          {
            "title": "Newsletter",
            "type": "object",
            "required": [
              "newsletter_id",
              "delivery_id"
            ],
            "properties": {
              "customer_id": {
                "$ref": "#/components/schemas/webhook_customer_id"
              },
              "delivery_id": {
                "$ref": "#/components/schemas/delivery_id"
              },
              "newsletter_id": {
                "$ref": "#/components/schemas/newsletter_id",
                "nullable": true
              },
              "content_id": {
                "$ref": "#/components/schemas/content_id_event"
              }
            }
          }
        ]
      },
      "person_cio_subscription_preferences_changed": {
        "title": "changed subscription preferences",
        "description": "A person changed their subscription preferences through our subscription center or you changed their `cio_subscription_preferences` attribute values.\n\nSome fields in the `data` object change based on whether the message that resulted in the change originated from a broadcast, campaign, or newsletter.\n",
        "type": "object",
        "required": [
          "metric",
          "event_id",
          "data",
          "timestamp"
        ],
        "properties": {
          "metric": {
            "type": "string",
            "enum": [
              "cio_subscription_preferences_changed"
            ],
            "description": "The event we're reporting to your webhook endpoint. In this case, a person changed their subscription preferences."
          },
          "event_id": {
            "$ref": "#/components/schemas/event_id"
          },
          "delivery_type": {
            "type": "string",
            "enum": [
              "email",
              "sms",
              "push",
              "in_app",
              "slack",
              "webhook"
            ],
            "description": "The type of delivery that resulted in a change to preferences.",
            "example": "email"
          },
          "timestamp": {
            "$ref": "#/components/schemas/webhook_timestamp"
          },
          "data": {
            "allOf": [
              {
                "type": "object",
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "required": [
                  "identifiers",
                  "customer_id",
                  "email_address",
                  "content"
                ],
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "Contains the subscription preferences that a person changed in a stringified object format. The `topic_1` key refers to a topic with an ID of `1`; you can get more information about each topic from our [App API](/api/app/#operation/getTopics).",
                    "example": "{\"topics\":{\"topic_1\":true}}"
                  },
                  "customer_id": {
                    "$ref": "#/components/schemas/webhook_customer_id"
                  },
                  "email_address": {
                    "$ref": "#/components/schemas/email_address"
                  },
                  "identifiers": {
                    "$ref": "#/components/schemas/webhook_identifiers"
                  }
                }
              },
              {
                "$ref": "#/components/schemas/person_cio_subscription_preferences_common"
              }
            ]
          }
        }
      },
      "email_event": {
        "title": "Email",
        "description": "Events representing an email.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/email_drafted"
          },
          {
            "$ref": "#/components/schemas/email_attempted"
          },
          {
            "$ref": "#/components/schemas/email_sent"
          },
          {
            "$ref": "#/components/schemas/email_delivered"
          },
          {
            "$ref": "#/components/schemas/email_opened"
          },
          {
            "$ref": "#/components/schemas/email_clicked"
          },
          {
            "$ref": "#/components/schemas/email_converted"
          },
          {
            "$ref": "#/components/schemas/email_unsubscribed"
          },
          {
            "$ref": "#/components/schemas/email_bounced"
          },
          {
            "$ref": "#/components/schemas/email_dropped"
          },
          {
            "$ref": "#/components/schemas/email_spammed"
          },
          {
            "$ref": "#/components/schemas/email_failed"
          },
          {
            "$ref": "#/components/schemas/email_undeliverable"
          }
        ],
        "discriminator": {
          "propertyName": "metric",
          "mapping": {
            "drafted": "#/components/schemas/email_drafted",
            "attempted": "#/components/schemas/email_attempted",
            "sent": "#/components/schemas/email_sent",
            "delivered": "#/components/schemas/email_delivered",
            "opened": "#/components/schemas/email_opened",
            "clicked": "#/components/schemas/email_clicked",
            "converted": "#/components/schemas/email_converted",
            "unsubscribed": "#/components/schemas/email_unsubscribed",
            "bounced": "#/components/schemas/email_bounced",
            "dropped": "#/components/schemas/email_dropped",
            "spammed": "#/components/schemas/email_spammed",
            "failed": "#/components/schemas/email_failed",
            "undeliverable": "#/components/schemas/email_undeliverable"
          }
        }
      },
      "email_event_common": {
        "type": "object",
        "required": [
          "event_id",
          "object_type",
          "timestamp"
        ],
        "properties": {
          "event_id": {
            "$ref": "#/components/schemas/event_id"
          },
          "object_type": {
            "type": "string",
            "enum": [
              "email"
            ],
            "description": "The event relates to an email action."
          },
          "timestamp": {
            "$ref": "#/components/schemas/webhook_timestamp"
          }
        }
      },
      "email_drafted": {
        "title": "drafted",
        "allOf": [
          {
            "$ref": "#/components/schemas/email_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "drafted"
                ],
                "description": "The metric recorded by the event. For `customer` events, this is whether the customer explicitly subscribed or unsubscribed."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient",
                      "subject"
                    ],
                    "properties": {
                      "subject": {
                        "type": "string",
                        "description": "The subject of the email."
                      },
                      "recipient": {
                        "$ref": "#/components/schemas/recipient_not_templated"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "email_attempted": {
        "title": "attempted",
        "allOf": [
          {
            "$ref": "#/components/schemas/email_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "attempted"
                ],
                "description": "An email could not be sent to the delivery provider and will be retried. The `failure_message` provides the reason for the failure."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "failure_message"
                    ],
                    "properties": {
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "email_sent": {
        "title": "sent",
        "allOf": [
          {
            "$ref": "#/components/schemas/email_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "sent"
                ],
                "description": "A message was successfully sent. If you enabled the *Body Content* option with your webhook, the payload includes the `content` of your message."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient",
                      "subject"
                    ],
                    "properties": {
                      "content": {
                        "type": "string",
                        "description": "The body content of your email. This key only appears if you enabled the *Body Content* option when setting up your webhook."
                      },
                      "subject": {
                        "type": "string",
                        "description": "The subject of the email."
                      },
                      "recipient": {
                        "$ref": "#/components/schemas/recipient_not_templated"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "email_delivered": {
        "title": "delivered",
        "allOf": [
          {
            "$ref": "#/components/schemas/email_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "delivered"
                ],
                "description": "A message was successfully delivered to a recipient."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient",
                      "subject"
                    ],
                    "properties": {
                      "subject": {
                        "type": "string",
                        "description": "The subject of the email."
                      },
                      "recipient": {
                        "$ref": "#/components/schemas/recipient_not_templated"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "email_opened": {
        "title": "opened",
        "allOf": [
          {
            "$ref": "#/components/schemas/email_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "opened"
                ],
                "description": "An email was opened. If either property `proxied` or `prefetched` is `true`, the email was opened by a machine. Otherwise, it was opened by a human."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient",
                      "subject"
                    ],
                    "properties": {
                      "subject": {
                        "type": "string",
                        "description": "The subject of the email."
                      },
                      "recipient": {
                        "$ref": "#/components/schemas/recipient_not_templated"
                      },
                      "proxied": {
                        "type": "boolean",
                        "description": "If true, the email was fetched by a proxy to hide the user identity, IP address, etc."
                      },
                      "prefetched": {
                        "type": "boolean",
                        "description": "If true, the email was opened by Gmail, Apple Privacy Protection, or a user agent identified as a bot."
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "email_clicked": {
        "title": "clicked",
        "allOf": [
          {
            "$ref": "#/components/schemas/email_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "clicked"
                ],
                "description": "A tracked link in an email was clicked. If the property `machine` is `true`, the click was generated by a machine. Otherwise, it was clicked by a human."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient",
                      "subject",
                      "href",
                      "link_id"
                    ],
                    "properties": {
                      "subject": {
                        "type": "string",
                        "description": "The subject of the email."
                      },
                      "recipient": {
                        "$ref": "#/components/schemas/recipient_not_templated"
                      },
                      "href": {
                        "$ref": "#/components/schemas/href"
                      },
                      "link_id": {
                        "$ref": "#/components/schemas/link_id"
                      },
                      "machine": {
                        "type": "boolean",
                        "description": "If true, the click was generated by a machine."
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "email_converted": {
        "title": "converted",
        "allOf": [
          {
            "$ref": "#/components/schemas/email_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "converted"
                ],
                "description": "A person matched a conversion goal attributed to an email."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient",
                      "subject"
                    ],
                    "properties": {
                      "subject": {
                        "type": "string",
                        "description": "The subject of the email."
                      },
                      "recipient": {
                        "$ref": "#/components/schemas/recipient_not_templated"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "email_unsubscribed": {
        "title": "unsubscribed",
        "allOf": [
          {
            "$ref": "#/components/schemas/email_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "unsubscribed"
                ],
                "description": "The recipient unsubscribed based on a particular message."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient",
                      "subject"
                    ],
                    "properties": {
                      "subject": {
                        "type": "string",
                        "description": "The subject of the email."
                      },
                      "recipient": {
                        "$ref": "#/components/schemas/recipient_not_templated"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "email_bounced": {
        "title": "bounced",
        "allOf": [
          {
            "$ref": "#/components/schemas/email_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "bounced"
                ],
                "description": "The delivery provider could not deliver an email."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient",
                      "subject",
                      "failure_message"
                    ],
                    "properties": {
                      "subject": {
                        "type": "string",
                        "description": "The subject of the email."
                      },
                      "recipient": {
                        "$ref": "#/components/schemas/recipient_not_templated"
                      },
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "email_dropped": {
        "title": "dropped",
        "allOf": [
          {
            "$ref": "#/components/schemas/email_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "dropped"
                ],
                "description": "Customer.io did not send an email because it was addressed to a person who was suppressed."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient",
                      "subject",
                      "failure_message"
                    ],
                    "properties": {
                      "subject": {
                        "type": "string",
                        "description": "The subject of the email."
                      },
                      "recipient": {
                        "$ref": "#/components/schemas/recipient_not_templated"
                      },
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "email_spammed": {
        "title": "spammed",
        "allOf": [
          {
            "$ref": "#/components/schemas/email_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "spammed"
                ],
                "description": "A recipient marked an email as spam."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient",
                      "subject"
                    ],
                    "properties": {
                      "subject": {
                        "type": "string",
                        "description": "The subject of the email."
                      },
                      "recipient": {
                        "$ref": "#/components/schemas/recipient_not_templated"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "email_failed": {
        "title": "failed",
        "allOf": [
          {
            "$ref": "#/components/schemas/email_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "failed"
                ],
                "description": "An email couldn't be sent to the delivery provider."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient",
                      "subject",
                      "failure_message"
                    ],
                    "properties": {
                      "subject": {
                        "type": "string",
                        "description": "The subject of the email."
                      },
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "email_undeliverable": {
        "title": "failed",
        "allOf": [
          {
            "$ref": "#/components/schemas/email_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "undeliverable"
                ],
                "description": "A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient",
                      "subject",
                      "failure_message"
                    ],
                    "properties": {
                      "subject": {
                        "type": "string",
                        "description": "The subject of the email."
                      },
                      "recipient": {
                        "$ref": "#/components/schemas/recipient_not_templated"
                      },
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "push_event": {
        "title": "Push",
        "description": "Events representing a push notification.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/push_drafted"
          },
          {
            "$ref": "#/components/schemas/push_attempted"
          },
          {
            "$ref": "#/components/schemas/push_delivered"
          },
          {
            "$ref": "#/components/schemas/push_sent"
          },
          {
            "$ref": "#/components/schemas/push_opened"
          },
          {
            "$ref": "#/components/schemas/push_clicked"
          },
          {
            "$ref": "#/components/schemas/push_converted"
          },
          {
            "$ref": "#/components/schemas/push_bounced"
          },
          {
            "$ref": "#/components/schemas/push_dropped"
          },
          {
            "$ref": "#/components/schemas/push_failed"
          },
          {
            "$ref": "#/components/schemas/push_undeliverable"
          }
        ],
        "discriminator": {
          "propertyName": "metric",
          "mapping": {
            "drafted": "#/components/schemas/push_drafted",
            "attempted": "#/components/schemas/push_attempted",
            "delivered": "#/components/schemas/push_delivered",
            "sent": "#/components/schemas/push_sent",
            "opened": "#/components/schemas/push_opened",
            "clicked": "#/components/schemas/push_clicked",
            "converted": "#/components/schemas/push_converted",
            "bounced": "#/components/schemas/push_bounced",
            "dropped": "#/components/schemas/push_dropped",
            "failed": "#/components/schemas/push_failed",
            "undeliverable": "#/components/schemas/push_undeliverable"
          }
        }
      },
      "push_event_common": {
        "type": "object",
        "required": [
          "event_id",
          "object_type",
          "timestamp"
        ],
        "properties": {
          "event_id": {
            "$ref": "#/components/schemas/event_id"
          },
          "object_type": {
            "type": "string",
            "enum": [
              "push"
            ],
            "description": "The event relates to an push notification."
          },
          "timestamp": {
            "$ref": "#/components/schemas/webhook_timestamp"
          }
        }
      },
      "push_drafted": {
        "title": "drafted",
        "allOf": [
          {
            "$ref": "#/components/schemas/push_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "attempted"
                ],
                "description": "A push notification was drafted."
              },
              "data": {
                "$ref": "#/components/schemas/event_common_data"
              }
            }
          }
        ]
      },
      "push_attempted": {
        "title": "attempted",
        "allOf": [
          {
            "$ref": "#/components/schemas/push_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "attempted"
                ],
                "description": "A push notification was attempted but unsuccessful. This generally means that we'll try again."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "failure_message"
                    ],
                    "properties": {
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "push_sent": {
        "title": "sent",
        "allOf": [
          {
            "$ref": "#/components/schemas/push_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "sent"
                ],
                "description": "A push notification was sent to a recipient. If you enabled the *Body Content* option with your webhook, the payload includes the `content` of your message."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipients"
                    ],
                    "properties": {
                      "content": {
                        "type": "string",
                        "description": "The stringified payload for your push notification. This key only appears if you enabled the *Body Content* option when setting up your webhook."
                      },
                      "recipients": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "device_id"
                          ],
                          "description": "The person's devices that the push was sent to. Each object in the array represents a device.",
                          "properties": {
                            "device_id": {
                              "type": "string",
                              "description": "The device identifier/token."
                            },
                            "device_platform": {
                              "type": "string",
                              "description": "The device platform—ios or android.",
                              "enum": [
                                "ios",
                                "android"
                              ]
                            },
                            "failure_message": {
                              "type": "string",
                              "description": "If push failed for the device, we'll the list reason it failed."
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "push_delivered": {
        "title": "delivered",
        "allOf": [
          {
            "$ref": "#/components/schemas/push_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "delivered"
                ],
                "description": "A push notification was delivered to a recipient device."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipients"
                    ],
                    "properties": {
                      "recipients": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "device_id"
                          ],
                          "description": "Describes the device the push was sent to.",
                          "properties": {
                            "device_id": {
                              "type": "string",
                              "description": "The device identifier/token."
                            },
                            "device_platform": {
                              "type": "string",
                              "description": "The device platform—ios or android.",
                              "enum": [
                                "ios",
                                "android"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "push_opened": {
        "title": "opened",
        "allOf": [
          {
            "$ref": "#/components/schemas/push_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "opened"
                ],
                "description": "A device opened a push notification."
              },
              "data": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipients"
                    ],
                    "properties": {
                      "recipients": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "device_id"
                          ],
                          "description": "Describes the device of the recipient who clicked/tapped the link.",
                          "properties": {
                            "device_id": {
                              "type": "string",
                              "description": "The device identifier/token."
                            },
                            "device_platform": {
                              "$ref": "#/components/schemas/device_platform"
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "push_clicked": {
        "title": "clicked",
        "allOf": [
          {
            "$ref": "#/components/schemas/push_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "clicked"
                ],
                "description": "A recipient tapped a link in a push notification."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipients",
                      "href",
                      "link_id"
                    ],
                    "properties": {
                      "href": {
                        "$ref": "#/components/schemas/href"
                      },
                      "link_id": {
                        "$ref": "#/components/schemas/link_id"
                      },
                      "recipients": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "device_id"
                          ],
                          "description": "Describes the device of the recipient who tapped the link.",
                          "properties": {
                            "device_id": {
                              "type": "string",
                              "description": "The device identifier/token."
                            },
                            "device_platform": {
                              "type": "string",
                              "description": "The device platform—ios or android.",
                              "enum": [
                                "ios",
                                "android"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "push_converted": {
        "title": "converted",
        "allOf": [
          {
            "$ref": "#/components/schemas/push_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "converted"
                ],
                "description": "A person matched a conversion goal attributed to a push notification."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipients"
                    ],
                    "properties": {
                      "recipients": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "device_id"
                          ],
                          "description": "Describes the device of the recipient who tapped the link.",
                          "properties": {
                            "device_id": {
                              "type": "string",
                              "description": "The device identifier/token."
                            },
                            "device_platform": {
                              "type": "string",
                              "description": "The device platform—ios or android.",
                              "enum": [
                                "ios",
                                "android"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "push_bounced": {
        "title": "bounced",
        "allOf": [
          {
            "$ref": "#/components/schemas/push_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "bounced"
                ],
                "description": "The delivery provider reported at least one invalid device token."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipients"
                    ],
                    "properties": {
                      "recipients": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "device_id",
                            "device_platform",
                            "failure_message"
                          ],
                          "description": "Describes the device of the recipient who tapped the link.",
                          "properties": {
                            "device_id": {
                              "type": "string",
                              "description": "The device identifier/token."
                            },
                            "device_platform": {
                              "$ref": "#/components/schemas/device_platform"
                            },
                            "failure_message": {
                              "type": "string",
                              "description": "The reason the push failed for this particular recipient."
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "push_dropped": {
        "title": "dropped",
        "allOf": [
          {
            "$ref": "#/components/schemas/push_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "dropped"
                ],
                "description": "A push notification wasn't sent because at least one device token previously bounced."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipients"
                    ],
                    "properties": {
                      "recipients": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "device_id",
                            "device_platform",
                            "failure_message"
                          ],
                          "description": "Describes the device of the recipient who tapped the link.",
                          "properties": {
                            "device_id": {
                              "type": "string",
                              "description": "The device identifier/token."
                            },
                            "device_platform": {
                              "$ref": "#/components/schemas/device_platform"
                            },
                            "failure_message": {
                              "type": "string",
                              "description": "The reason the push failed for this particular recipient."
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "push_failed": {
        "title": "failed",
        "allOf": [
          {
            "$ref": "#/components/schemas/push_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "failed"
                ],
                "description": "A push notification couldn't be sent to the delivery provider."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "failure_message"
                    ],
                    "properties": {
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "push_undeliverable": {
        "title": "failed",
        "allOf": [
          {
            "$ref": "#/components/schemas/push_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "undeliverable"
                ],
                "description": "A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "failure_message"
                    ],
                    "properties": {
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "sms_event": {
        "title": "SMS",
        "description": "Events pertaining to SMS notifications.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/sms_drafted"
          },
          {
            "$ref": "#/components/schemas/sms_attempted"
          },
          {
            "$ref": "#/components/schemas/sms_sent"
          },
          {
            "$ref": "#/components/schemas/sms_delivered"
          },
          {
            "$ref": "#/components/schemas/sms_clicked"
          },
          {
            "$ref": "#/components/schemas/sms_converted"
          },
          {
            "$ref": "#/components/schemas/sms_bounced"
          },
          {
            "$ref": "#/components/schemas/sms_failed"
          }
        ],
        "discriminator": {
          "propertyName": "metric",
          "mapping": {
            "drafted": "#/components/schemas/sms_drafted",
            "attempted": "#/components/schemas/sms_attempted",
            "sent": "#/components/schemas/sms_sent",
            "delivered": "#/components/schemas/sms_delivered",
            "clicked": "#/components/schemas/sms_clicked",
            "converted": "#/components/schemas/sms_converted",
            "bounced": "#/components/schemas/sms_bounced",
            "failed": "#/components/schemas/sms_failed"
          }
        }
      },
      "sms_event_common": {
        "type": "object",
        "required": [
          "event_id",
          "object_type",
          "timestamp"
        ],
        "properties": {
          "event_id": {
            "$ref": "#/components/schemas/event_id"
          },
          "object_type": {
            "type": "string",
            "enum": [
              "sms"
            ],
            "description": "The event relates to an SMS message."
          },
          "timestamp": {
            "$ref": "#/components/schemas/webhook_timestamp"
          }
        }
      },
      "sms_drafted": {
        "title": "drafted",
        "allOf": [
          {
            "$ref": "#/components/schemas/sms_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "drafted"
                ],
                "description": "An SMS notification was drafted."
              },
              "data": {
                "$ref": "#/components/schemas/other_event_common_data"
              }
            }
          }
        ]
      },
      "sms_attempted": {
        "title": "attempted",
        "allOf": [
          {
            "$ref": "#/components/schemas/sms_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "attempted"
                ],
                "description": "An SMS could not be sent to the delivery provider, but will retry."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "failure_message"
                    ],
                    "properties": {
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "sms_sent": {
        "title": "sent",
        "allOf": [
          {
            "$ref": "#/components/schemas/sms_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "sent"
                ],
                "description": "An SMS notification was sent. If you enabled the *Body Content* option with your webhook, the payload includes the `content` of your message."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient"
                    ],
                    "properties": {
                      "content": {
                        "type": "string",
                        "description": "The body of your message. This key only appears if you enabled the *Body Content* option when setting up your webhook."
                      },
                      "recipient": {
                        "type": "string",
                        "description": "The MSISDN (phone number) of the SMS recipient."
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "sms_delivered": {
        "title": "delivered",
        "allOf": [
          {
            "$ref": "#/components/schemas/sms_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "delivered"
                ],
                "description": "An SMS notification was delivered to a recipient."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient"
                    ],
                    "properties": {
                      "recipient": {
                        "type": "string",
                        "description": "The MSISDN (phone number) of the SMS recipient."
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "sms_clicked": {
        "title": "clicked",
        "allOf": [
          {
            "$ref": "#/components/schemas/sms_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "clicked"
                ],
                "description": "A recipient tapped a link in an SMS message they received."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient",
                      "link_id",
                      "href"
                    ],
                    "properties": {
                      "recipient": {
                        "type": "string",
                        "description": "The MSISDN (phone number) of the SMS recipient."
                      },
                      "link_id": {
                        "$ref": "#/components/schemas/link_id"
                      },
                      "href": {
                        "$ref": "#/components/schemas/href"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "sms_converted": {
        "title": "converted",
        "allOf": [
          {
            "$ref": "#/components/schemas/sms_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "converted"
                ],
                "description": "A person matched a conversion goal attributed to an SMS."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient"
                    ],
                    "properties": {
                      "recipient": {
                        "type": "string",
                        "description": "The MSISDN (phone number) of the SMS recipient."
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "sms_bounced": {
        "title": "bounced",
        "allOf": [
          {
            "$ref": "#/components/schemas/sms_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "bounced"
                ],
                "description": "The delivery provider was unable to deliver an SMS message."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient",
                      "failure_message"
                    ],
                    "properties": {
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      },
                      "recipient": {
                        "type": "string",
                        "description": "The MSISDN (phone number) of the SMS recipient."
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "sms_failed": {
        "title": "failed",
        "allOf": [
          {
            "$ref": "#/components/schemas/sms_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "failed"
                ],
                "description": "An SMS couldn't be sent to the delivery provider."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "failure_message"
                    ],
                    "properties": {
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "sms_undeliverable": {
        "title": "failed",
        "allOf": [
          {
            "$ref": "#/components/schemas/sms_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "undeliverable"
                ],
                "description": "A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "failure_message"
                    ],
                    "properties": {
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "slack_event": {
        "title": "Slack",
        "description": "Events pertaining to Slack messages.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/slack_drafted"
          },
          {
            "$ref": "#/components/schemas/slack_attempted"
          },
          {
            "$ref": "#/components/schemas/slack_sent"
          },
          {
            "$ref": "#/components/schemas/slack_clicked"
          },
          {
            "$ref": "#/components/schemas/slack_failed"
          },
          {
            "$ref": "#/components/schemas/slack_undeliverable"
          }
        ],
        "discriminator": {
          "propertyName": "metric",
          "mapping": {
            "drafted": "#/components/schemas/slack_drafted",
            "attempted": "#/components/schemas/slack_attempted",
            "sent": "#/components/schemas/slack_sent",
            "clicked": "#/components/schemas/slack_clicked",
            "failed": "#/components/schemas/slack_failed",
            "undeliverable": "#/components/schemas/slack_undeliverable"
          }
        }
      },
      "slack_event_common": {
        "type": "object",
        "required": [
          "event_id",
          "object_type",
          "timestamp"
        ],
        "properties": {
          "event_id": {
            "$ref": "#/components/schemas/event_id"
          },
          "object_type": {
            "type": "string",
            "enum": [
              "slack"
            ],
            "description": "The event relates to a Slack message."
          },
          "timestamp": {
            "$ref": "#/components/schemas/webhook_timestamp"
          }
        }
      },
      "slack_drafted": {
        "title": "drafted",
        "allOf": [
          {
            "$ref": "#/components/schemas/slack_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "drafted"
                ],
                "description": "A slack message was drafted."
              },
              "data": {
                "$ref": "#/components/schemas/other_event_common_data"
              }
            }
          }
        ]
      },
      "slack_attempted": {
        "title": "attempted",
        "allOf": [
          {
            "$ref": "#/components/schemas/slack_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "attempted"
                ],
                "description": "A slack message failed and will be retried."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "failure_message"
                    ],
                    "properties": {
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "slack_sent": {
        "title": "sent",
        "allOf": [
          {
            "$ref": "#/components/schemas/slack_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "sent"
                ],
                "description": "A slack message was sent. If you enabled the *Body Content* option with your webhook, the payload includes the `content` of your message."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient"
                    ],
                    "properties": {
                      "content": {
                        "type": "string",
                        "description": "The of your slack message. This key only appears if you enabled the *Body Content* option when setting up your webhook."
                      },
                      "recipient": {
                        "type": "string",
                        "description": "The channel or person that received the message, i.e. `#general`."
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "slack_clicked": {
        "title": "clicked",
        "allOf": [
          {
            "$ref": "#/components/schemas/slack_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "clicked"
                ],
                "description": "A person clicked a tracked link in a Slack message."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient",
                      "href",
                      "link_id"
                    ],
                    "properties": {
                      "recipient": {
                        "type": "string",
                        "description": "The channel or person that received the message, i.e. `#general`."
                      },
                      "href": {
                        "$ref": "#/components/schemas/href"
                      },
                      "link_id": {
                        "$ref": "#/components/schemas/link_id"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "slack_failed": {
        "title": "failed",
        "allOf": [
          {
            "$ref": "#/components/schemas/slack_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "failed"
                ],
                "description": "A slack message failed."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "failure_message"
                    ],
                    "properties": {
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "slack_undeliverable": {
        "title": "failed",
        "allOf": [
          {
            "$ref": "#/components/schemas/slack_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "undeliverable"
                ],
                "description": "A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "failure_message"
                    ],
                    "properties": {
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "webhook_event": {
        "title": "Webhook",
        "description": "Events pertaining to webhooks.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/webhook_drafted"
          },
          {
            "$ref": "#/components/schemas/webhook_attempted"
          },
          {
            "$ref": "#/components/schemas/webhook_sent"
          },
          {
            "$ref": "#/components/schemas/webhook_clicked"
          },
          {
            "$ref": "#/components/schemas/webhook_failed"
          },
          {
            "$ref": "#/components/schemas/webhook_undeliverable"
          }
        ],
        "discriminator": {
          "propertyName": "metric",
          "mapping": {
            "drafted": "#/components/schemas/webhook_drafted",
            "attempted": "#/components/schemas/webhook_attempted",
            "sent": "#/components/schemas/webhook_sent",
            "clicked": "#/components/schemas/webhook_clicked",
            "failed": "#/components/schemas/webhook_failed",
            "undeliverable": "#/components/schemas/webhook_undeliverable"
          }
        }
      },
      "webhook_event_common": {
        "type": "object",
        "required": [
          "event_id",
          "object_type",
          "timestamp"
        ],
        "properties": {
          "event_id": {
            "$ref": "#/components/schemas/event_id"
          },
          "object_type": {
            "type": "string",
            "enum": [
              "webhook"
            ],
            "description": "The event relates to a webhook."
          },
          "timestamp": {
            "$ref": "#/components/schemas/webhook_timestamp"
          }
        }
      },
      "webhook_drafted": {
        "title": "drafted",
        "allOf": [
          {
            "$ref": "#/components/schemas/webhook_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "drafted"
                ],
                "description": "A webhook draft was created."
              },
              "data": {
                "$ref": "#/components/schemas/other_event_common_data"
              }
            }
          }
        ]
      },
      "webhook_attempted": {
        "title": "attempted",
        "allOf": [
          {
            "$ref": "#/components/schemas/webhook_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "attempted"
                ],
                "description": "A webhook failed to send, but will be retried."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "failure_message"
                    ],
                    "properties": {
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "webhook_sent": {
        "title": "sent",
        "allOf": [
          {
            "$ref": "#/components/schemas/webhook_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "sent"
                ],
                "description": "A webhook was sent from Customer.io. If you enabled the *Body Content* option with your webhook, the payload includes the `content` of your webhook."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient"
                    ],
                    "properties": {
                      "content": {
                        "type": "string",
                        "description": "The stringified payload sent to your webhook address. This key only appears if you enabled the *Body Content* option when setting up your webhook."
                      },
                      "recipient": {
                        "type": "string",
                        "description": "The URL the webhook was sent to."
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "webhook_clicked": {
        "title": "clicked",
        "allOf": [
          {
            "$ref": "#/components/schemas/webhook_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "clicked"
                ],
                "description": "The webhook recipient opened a tracked link in the webhook payload."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient",
                      "link_id",
                      "href"
                    ],
                    "properties": {
                      "recipient": {
                        "type": "string",
                        "description": "The URL the webhook was sent to."
                      },
                      "href": {
                        "$ref": "#/components/schemas/href"
                      },
                      "link_id": {
                        "$ref": "#/components/schemas/link_id"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "webhook_failed": {
        "title": "failed",
        "allOf": [
          {
            "$ref": "#/components/schemas/webhook_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "failed"
                ],
                "description": "A webhook failed to send."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "failure_message"
                    ],
                    "properties": {
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "webhook_undeliverable": {
        "title": "failed",
        "allOf": [
          {
            "$ref": "#/components/schemas/webhook_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "undeliverable"
                ],
                "description": "A webhook/message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "failure_message"
                    ],
                    "properties": {
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "in_app_event": {
        "title": "In-App Messages",
        "description": "Events pertaining to in-app messages.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/in_app_drafted"
          },
          {
            "$ref": "#/components/schemas/in_app_attempted"
          },
          {
            "$ref": "#/components/schemas/in_app_sent"
          },
          {
            "$ref": "#/components/schemas/in_app_opened"
          },
          {
            "$ref": "#/components/schemas/in_app_clicked"
          },
          {
            "$ref": "#/components/schemas/in_app_converted"
          },
          {
            "$ref": "#/components/schemas/in_app_failed"
          },
          {
            "$ref": "#/components/schemas/in_app_undeliverable"
          }
        ],
        "discriminator": {
          "propertyName": "metric",
          "mapping": {
            "drafted": "#/components/schemas/in_app_drafted",
            "attempted": "#/components/schemas/in_app_attempted",
            "sent": "#/components/schemas/in_app_sent",
            "opened": "#/components/schemas/in_app_opened",
            "clicked": "#/components/schemas/in_app_clicked",
            "converted": "#/components/schemas/in_app_converted",
            "failed": "#/components/schemas/in_app_failed",
            "undeliverable": "#/components/schemas/in_app_undeliverable"
          }
        }
      },
      "in_app_event_common": {
        "type": "object",
        "required": [
          "event_id",
          "object_type",
          "timestamp"
        ],
        "properties": {
          "event_id": {
            "$ref": "#/components/schemas/event_id"
          },
          "object_type": {
            "type": "string",
            "enum": [
              "in_app"
            ],
            "description": "The event relates to an in-app message."
          },
          "timestamp": {
            "$ref": "#/components/schemas/webhook_timestamp"
          }
        }
      },
      "in_app_drafted": {
        "title": "drafted",
        "allOf": [
          {
            "$ref": "#/components/schemas/in_app_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "drafted"
                ],
                "description": "An in-app message draft was created."
              },
              "data": {
                "$ref": "#/components/schemas/other_event_common_data"
              }
            }
          }
        ]
      },
      "in_app_attempted": {
        "title": "attempted",
        "allOf": [
          {
            "$ref": "#/components/schemas/in_app_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "attempted"
                ],
                "description": "An in-app message failed to send, but will be retried."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "failure_message"
                    ],
                    "properties": {
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "in_app_sent": {
        "title": "sent",
        "allOf": [
          {
            "$ref": "#/components/schemas/in_app_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "sent"
                ],
                "description": "An in-app message was sent from Customer.io. Because in-app messages are only delivered when a person's app is open, there may be a significant delay between when a message is sent and when it's \"opened\". If you enabled the *Body Content* option with your webhook, the payload includes the `content` of your message."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient"
                    ],
                    "properties": {
                      "content": {
                        "type": "string",
                        "description": "The body of your message. This key only appears if you enabled the *Body Content* option when setting up your webhook."
                      },
                      "recipient": {
                        "type": "string",
                        "description": "The ID or email address of the person the message was sent to. This identifier is determined by the settings in your message and the value you use to identify your app's users."
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "in_app_opened": {
        "title": "opened",
        "allOf": [
          {
            "$ref": "#/components/schemas/in_app_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "opened"
                ],
                "description": "A device opened an in-app message. Because messages appear automatically when a person opens your app (to the right page if using page rules), \"opened\" is essentially an \"impression\"—a person saw your message."
              },
              "data": {
                "$ref": "#/components/schemas/other_event_common_data"
              }
            }
          }
        ]
      },
      "in_app_clicked": {
        "title": "clicked",
        "allOf": [
          {
            "$ref": "#/components/schemas/in_app_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "clicked"
                ],
                "description": "The in-app message recipient clicked/tapped a component in a message with **Track Clicks** enabled. The *Track Clicks* setting is enabled by default for in-app messages. The payload includes a `tracked_response` key containing the *Action Name* of the component the person clicked/tapped. [Learn more about tracked responses and action names](/journeys/tracked-responses)."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient",
                      "link_id",
                      "href"
                    ],
                    "properties": {
                      "tracked_response": {
                        "type": "string",
                        "description": "The *Action Name* of the action a person clicked/tapped in the message. [Learn more about tracked responses and action names](/journeys/tracked-responses)."
                      },
                      "recipient": {
                        "type": "string",
                        "description": "The ID or email address of the person the message was sent to. This identifier is determined by the settings in your message and the value you use to identify your app's users."
                      },
                      "href": {
                        "$ref": "#/components/schemas/href"
                      },
                      "link_id": {
                        "$ref": "#/components/schemas/link_id"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "in_app_converted": {
        "title": "converted",
        "allOf": [
          {
            "$ref": "#/components/schemas/in_app_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "converted"
                ],
                "description": "A person matched a conversion goal attributed to an in-app notification."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "recipient"
                    ],
                    "properties": {
                      "recipient": {
                        "type": "string",
                        "description": "The ID or email address of the person the message was sent to. This identifier is determined by the settings in your message and the value you use to identify your app's users."
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "in_app_failed": {
        "title": "failed",
        "allOf": [
          {
            "$ref": "#/components/schemas/in_app_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "failed"
                ],
                "description": "An in-app message failed to send."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "failure_message"
                    ],
                    "properties": {
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "in_app_undeliverable": {
        "title": "undeliverable",
        "allOf": [
          {
            "$ref": "#/components/schemas/in_app_event_common"
          },
          {
            "type": "object",
            "required": [
              "metric",
              "data"
            ],
            "properties": {
              "metric": {
                "type": "string",
                "enum": [
                  "undeliverable"
                ],
                "description": "A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event."
              },
              "data": {
                "description": "Contains information about the event, specific to the `object_type` and `metric`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/other_event_common_data"
                  },
                  {
                    "type": "object",
                    "required": [
                      "failure_message"
                    ],
                    "properties": {
                      "failure_message": {
                        "$ref": "#/components/schemas/failure_message"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "event_common_data": {
        "oneOf": [
          {
            "title": "API triggered broadcast",
            "required": [
              "trigger_id",
              "broadcast_id",
              "delivery_id",
              "action_id",
              "identifiers"
            ],
            "type": "object",
            "properties": {
              "trigger_id": {
                "$ref": "#/components/schemas/trigger_id"
              },
              "customer_id": {
                "$ref": "#/components/schemas/webhook_customer_id"
              },
              "delivery_id": {
                "$ref": "#/components/schemas/delivery_id"
              },
              "action_id": {
                "$ref": "#/components/schemas/action_id_webhook"
              },
              "broadcast_id": {
                "$ref": "#/components/schemas/broadcast_id",
                "nullable": true
              },
              "journey_id": {
                "$ref": "#/components/schemas/journey_id"
              },
              "parent_action_id": {
                "$ref": "#/components/schemas/parent_action_id"
              },
              "identifiers": {
                "$ref": "#/components/schemas/webhook_identifiers"
              }
            }
          },
          {
            "title": "Campaign",
            "type": "object",
            "required": [
              "campaign_id",
              "delivery_id",
              "action_id",
              "identifiers"
            ],
            "properties": {
              "campaign_id": {
                "$ref": "#/components/schemas/campaign_id",
                "nullable": true
              },
              "customer_id": {
                "$ref": "#/components/schemas/webhook_customer_id"
              },
              "delivery_id": {
                "$ref": "#/components/schemas/delivery_id"
              },
              "action_id": {
                "$ref": "#/components/schemas/action_id_webhook"
              },
              "journey_id": {
                "$ref": "#/components/schemas/journey_id"
              },
              "identifiers": {
                "$ref": "#/components/schemas/webhook_identifiers"
              },
              "parent_action_id": {
                "$ref": "#/components/schemas/parent_action_id"
              },
              "trigger_event_id": {
                "$ref": "#/components/schemas/trigger_event_id"
              }
            }
          },
          {
            "title": "Newsletter",
            "type": "object",
            "required": [
              "newsletter_id",
              "delivery_id",
              "identifiers"
            ],
            "properties": {
              "customer_id": {
                "$ref": "#/components/schemas/webhook_customer_id"
              },
              "delivery_id": {
                "$ref": "#/components/schemas/delivery_id"
              },
              "newsletter_id": {
                "$ref": "#/components/schemas/newsletter_id",
                "nullable": true
              },
              "content_id": {
                "$ref": "#/components/schemas/content_id_event"
              },
              "identifiers": {
                "$ref": "#/components/schemas/webhook_identifiers"
              }
            }
          },
          {
            "title": "Transactional message",
            "type": "object",
            "required": [
              "transactional_message_id",
              "delivery_id",
              "identifiers"
            ],
            "properties": {
              "customer_id": {
                "$ref": "#/components/schemas/webhook_customer_id"
              },
              "delivery_id": {
                "$ref": "#/components/schemas/delivery_id"
              },
              "identifiers": {
                "$ref": "#/components/schemas/webhook_identifiers"
              },
              "transactional_message_id": {
                "description": "The transactional message template you used for your message."
              }
            }
          }
        ]
      },
      "other_event_common_data": {
        "oneOf": [
          {
            "title": "API triggered broadcast",
            "required": [
              "trigger_id",
              "broadcast_id",
              "delivery_id",
              "action_id",
              "identifiers"
            ],
            "type": "object",
            "properties": {
              "trigger_id": {
                "$ref": "#/components/schemas/trigger_id"
              },
              "customer_id": {
                "$ref": "#/components/schemas/webhook_customer_id"
              },
              "delivery_id": {
                "$ref": "#/components/schemas/delivery_id"
              },
              "action_id": {
                "$ref": "#/components/schemas/action_id_webhook"
              },
              "broadcast_id": {
                "$ref": "#/components/schemas/broadcast_id",
                "nullable": true
              },
              "journey_id": {
                "$ref": "#/components/schemas/journey_id"
              },
              "parent_action_id": {
                "$ref": "#/components/schemas/parent_action_id"
              },
              "identifiers": {
                "$ref": "#/components/schemas/webhook_identifiers"
              }
            }
          },
          {
            "title": "Campaign",
            "type": "object",
            "required": [
              "campaign_id",
              "delivery_id",
              "action_id",
              "identifiers"
            ],
            "properties": {
              "campaign_id": {
                "$ref": "#/components/schemas/campaign_id",
                "nullable": true
              },
              "customer_id": {
                "$ref": "#/components/schemas/webhook_customer_id"
              },
              "delivery_id": {
                "$ref": "#/components/schemas/delivery_id"
              },
              "action_id": {
                "$ref": "#/components/schemas/action_id_webhook"
              },
              "journey_id": {
                "$ref": "#/components/schemas/journey_id"
              },
              "identifiers": {
                "$ref": "#/components/schemas/webhook_identifiers"
              },
              "parent_action_id": {
                "$ref": "#/components/schemas/parent_action_id"
              },
              "trigger_event_id": {
                "$ref": "#/components/schemas/trigger_event_id"
              }
            }
          },
          {
            "title": "Newsletter",
            "type": "object",
            "required": [
              "newsletter_id",
              "delivery_id",
              "identifiers"
            ],
            "properties": {
              "customer_id": {
                "$ref": "#/components/schemas/webhook_customer_id"
              },
              "delivery_id": {
                "$ref": "#/components/schemas/delivery_id"
              },
              "newsletter_id": {
                "$ref": "#/components/schemas/newsletter_id",
                "nullable": true
              },
              "content_id": {
                "$ref": "#/components/schemas/content_id_event"
              },
              "identifiers": {
                "$ref": "#/components/schemas/webhook_identifiers"
              }
            }
          }
        ]
      },
      "action_id_webhook": {
        "description": "The identifier for an action.",
        "type": "integer",
        "readOnly": true,
        "example": 96
      },
      "sms_recipient": {
        "type": "string",
        "description": "The MSISDN (phone number) of the recipient.",
        "example": "+15558675309"
      },
      "event_id": {
        "type": "string",
        "description": "The unique ID of the reporting webhook event being sent.",
        "example": "01E4C4CT6YDC7Y5M7FE1GWWPQJ"
      },
      "webhook_timestamp": {
        "type": "integer",
        "format": "unix timestamp",
        "description": "The unix timestamp when the event occurred.",
        "example": 1613063089
      },
      "failure_message": {
        "type": "string",
        "description": "Indicates the reason that an attempted message failed.",
        "example": "Something went wrong!"
      },
      "link_id": {
        "type": "integer",
        "description": "The identifier for the tracked link that a person clicked or tapped.",
        "example": 1
      },
      "href": {
        "type": "string",
        "description": "The URL of the link that a person clicked.",
        "example": "https://docs.customer.io"
      },
      "device_platform": {
        "type": "string",
        "enum": [
          "android",
          "ios"
        ],
        "description": "The device's operating system.",
        "example": "ios"
      },
      "content_id_event": {
        "description": "The identifier for a newsletter variant.",
        "type": "integer",
        "example": 3
      },
      "journey_id": {
        "type": "string",
        "description": "The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.",
        "example": "01GW20GXAAXBKZD8J96M8FNV3R"
      },
      "trigger_id": {
        "type": "integer",
        "description": "The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).",
        "example": 1
      },
      "trigger_event_id": {
        "type": "string",
        "description": "The ID of an event that triggered a campaign or action.",
        "example": "21E4C3CT6YDC7Y4N7FE1GWWABC",
        "nullable": true
      },
      "webhook_customer_id": {
        "type": "string",
        "deprecated": true,
        "description": "The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.\n\nWhile webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible.\n",
        "example": "42"
      },
      "webhook_identifiers_id": {
        "type": "string",
        "description": "The ID of the person the webhook event represents. If your workspace uses `email` as a unique key, this value was automatically generated by Customer.io.",
        "example": "0200102"
      },
      "webhook_identifiers": {
        "type": "object",
        "description": "The person the event represents. This object contains all of the identifiers available to people in your workspace, even if they aren't set. If your workspace supports multiple identifiers (email and ID), this object contains `id`, `email` (either of which can be null), and `cio_id`. \n\nOtherwise, if your workspace only supports ID, this object just contains the `id` of the person the event represents.\n",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/customer_id"
          },
          "email": {
            "$ref": "#/components/schemas/email_address"
          },
          "cio_id": {
            "type": "string",
            "description": "The canonical identifier for a person, present only if your workspace supports multiple identifiers (email and ID). This value exists to keep a record of a person in your workspace across changes to their other identifiers.",
            "example": "d9c106000001"
          }
        }
      },
      "anyType": {
        "description": "Can be any type of value."
      },
      "anonymous_id": {
        "type": "string",
        "description": "An identifier for an anonymous event, like a cookie. If set as an attribute on a person, any events bearing the same anonymous value are associated with this person. This value must be unique and is not reusable."
      },
      "cio_id": {
        "type": "string",
        "description": "A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.",
        "example": "a3000001"
      },
      "collectionResponse": {
        "type": "object",
        "properties": {
          "bytes": {
            "type": "integer",
            "description": "The size of the collection in bytes.",
            "example": 296
          },
          "created_at": {
            "$ref": "#/components/schemas/created"
          },
          "updated_at": {
            "$ref": "#/components/schemas/updated"
          },
          "id": {
            "type": "integer",
            "description": "The identifier for the collection. This is how you'll reference the collection from the API.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the collection. This is how you'll reference the collection in liquid, e.g. `{{collection_name.data_property}}`.",
            "example": "upcoming events"
          },
          "rows": {
            "type": "integer",
            "description": "Represents the number of objects in the `data` array or CSV rows in your collection schema.",
            "example": 2
          },
          "schema": {
            "type": "array",
            "description": "Lists the top-level keys that you can reference within this collection. Customer.io does not enforce any of these keys as required from your `data`.",
            "items": {
              "type": "string"
            },
            "example": [
              "eventDate",
              "eventName",
              "presents"
            ]
          }
        }
      },
      "exportSharedProps": {
        "description": "Contains properties shared by export filters.",
        "type": "object",
        "properties": {
          "start": {
            "$ref": "#/components/schemas/start"
          },
          "end": {
            "$ref": "#/components/schemas/end"
          },
          "attributes": {
            "description": "The names of attributes you want to include in your export; each attribute name is an additional column in the export. If your message included liquid, you may add the attribute names used in your message so you can see the values populated for each delivery.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metric": {
            "$ref": "#/components/schemas/metric"
          },
          "drafts": {
            "$ref": "#/components/schemas/drafts"
          }
        }
      },
      "next": {
        "type": "string",
        "description": "Indicates the next page of results. Add `?start=<next_value>` to the request to get the next page of results."
      },
      "anonymousEventsRequest": {
        "description": "An event attributed to an unknown person. If you provide an `anonymous_id` with the event, you can associate the event with a person later (using the anonymous ID).",
        "oneOf": [
          {
            "title": "Standard anonymous event",
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "anonymous_id": {
                "$ref": "#/components/schemas/anonymous_id"
              },
              "name": {
                "type": "string",
                "description": "The name of the event. This is how you'll reference the event in campaigns or segments."
              },
              "id": {
                "$ref": "#/components/schemas/dedupe_id"
              },
              "type": {
                "type": "string",
                "description": "Sets the event type. If your event isn't a `page` or `screen` type event, we automatically set this property to `event`.",
                "enum": [
                  "event",
                  "page",
                  "screen"
                ]
              },
              "timestamp": {
                "type": "integer",
                "format": "unix timestamp",
                "description": "The unix timestamp when the event took place. If you don't provide this value, we use the date-time when we receive the event.\n"
              },
              "data": {
                "type": "object",
                "description": "Additional information that you might want to reference in a message using liquid or use to set attributes on your customer (referenced by `customer_id`). You can include `from_address` and `reply_to`, but the event can only trigger a campaign if it is associated with a person within 72 hours of its timestamp.",
                "additionalProperties": {
                  "x-additionalPropertiesName": "liquid merge data",
                  "description": "Insert key-values that you want to reference in messages or convert to attributes if/when you associate this event with a person."
                },
                "properties": {
                  "from_address": {
                    "$ref": "#/components/schemas/from_address"
                  },
                  "reply_to": {
                    "$ref": "#/components/schemas/reply_to_settable"
                  }
                }
              }
            },
            "example": {
              "name": "watched_video",
              "anonymous_id": "abc123",
              "data": {
                "video": "intro-to-platform"
              }
            }
          },
          {
            "title": "Page view",
            "type": "object",
            "required": [
              "name",
              "type"
            ],
            "properties": {
              "anonymous_id": {
                "$ref": "#/components/schemas/anonymous_id"
              },
              "name": {
                "type": "string",
                "description": "The name of the event. In general, this should be the URL of the page a person visited, making it easy to segment your audience or trigger campaigns using this event. Make sure you trim leading and trailing spaces from this field."
              },
              "id": {
                "$ref": "#/components/schemas/dedupe_id"
              },
              "type": {
                "type": "string",
                "description": "Indicates that the event represents a page view. See [\"page view\" events](/sdk/web/events/#page-view-events), for more information.",
                "enum": [
                  "page"
                ]
              },
              "timestamp": {
                "type": "integer",
                "format": "unix timestamp",
                "description": "The unix timestamp when the event took place. If you don't provide this value, we use the date-time when we receive the event.\n"
              },
              "data": {
                "type": "object",
                "description": "Additional information that you might want to reference in a message using liquid or use to set attributes on your customer (referenced by `customer_id`).",
                "additionalProperties": {
                  "x-additionalPropertiesName": "liquid merge data",
                  "description": "Insert key-values that you want to reference in messages or convert to attributes if/when you associate this event with a person."
                }
              }
            },
            "example": {
              "name": "https://mysite.com/page",
              "type": "page",
              "anonymous_id": "abc123",
              "data": {
                "first_name": "Person"
              }
            }
          },
          {
            "title": "Mobile screen view",
            "type": "object",
            "required": [
              "name",
              "type"
            ],
            "properties": {
              "anonymous_id": {
                "$ref": "#/components/schemas/anonymous_id"
              },
              "name": {
                "type": "string",
                "description": "The name of the event. In general, this should be the name of the screen or deep link path that a person viewed, making it easy to segment your audience or trigger campaigns using this event. Make sure you trim leading and trailing spaces from this field."
              },
              "id": {
                "$ref": "#/components/schemas/dedupe_id"
              },
              "type": {
                "type": "string",
                "description": "Indicates that the event represents a mobile screen view. You can also capture screen events directly with [our iOS SDK](/sdk/ios/track-events/#screen-view-events).",
                "enum": [
                  "screen"
                ]
              },
              "timestamp": {
                "type": "integer",
                "format": "unix timestamp",
                "description": "The unix timestamp when the event took place. If you don't provide this value, we use the date-time when we receive the event.\n"
              },
              "data": {
                "type": "object",
                "description": "Additional information that you might want to reference in a message using liquid or use to set attributes on your customer (referenced by `customer_id`).",
                "additionalProperties": {
                  "x-additionalPropertiesName": "liquid merge data",
                  "description": "Insert key-values that you want to reference in messages or convert to attributes if/when you associate this event with a person."
                }
              }
            },
            "example": {
              "name": "homepage",
              "type": "screen",
              "anonymous_id": "abc123"
            }
          }
        ]
      },
      "dedupe_id": {
        "type": "string",
        "format": "ulid",
        "description": "An identifier used to deduplicate events. This value must be a [ULID](https://github.com/ulid/spec). If an event has the same value as an event we previously received, we won't show or process the duplicate. Note - our Python and Ruby libraries do not pass this id."
      },
      "eventsRequest": {
        "oneOf": [
          {
            "title": "Standard event",
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the event. This is how you'll reference the event in campaigns or segments."
              },
              "id": {
                "$ref": "#/components/schemas/dedupe_id"
              },
              "type": {
                "type": "string",
                "description": "Sets the event type. If your event isn't a `page` or `screen` type event, we automatically set this property to `event`.",
                "enum": [
                  "event"
                ]
              },
              "timestamp": {
                "type": "integer",
                "format": "unix timestamp",
                "description": "The unix timestamp when the event took place. If you don't provide this value, we use the date-time when we receive the event.\n\n**NOTE**: Events with a timestamp in the past 72 hours can trigger campaigns.\n"
              },
              "data": {
                "type": "object",
                "description": "Additional information that you might want to reference in a message using liquid or use to set attributes on your customer (referenced by `customer_id`).",
                "additionalProperties": {
                  "x-additionalPropertiesName": "liquid merge data",
                  "description": "Insert key-values that you want to reference in your message here."
                },
                "properties": {
                  "recipient": {
                    "$ref": "#/components/schemas/recipient"
                  },
                  "from_address": {
                    "$ref": "#/components/schemas/from_address"
                  },
                  "reply_to": {
                    "$ref": "#/components/schemas/reply_to_settable"
                  }
                }
              }
            },
            "example": {
              "name": "purchase",
              "data": {
                "price": 23.45,
                "product": "socks"
              }
            }
          },
          {
            "title": "Page view",
            "type": "object",
            "required": [
              "name",
              "type"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the event. This is how you'll reference the event in campaigns or segments."
              },
              "id": {
                "$ref": "#/components/schemas/dedupe_id"
              },
              "type": {
                "type": "string",
                "description": "Indicates that the event represents a page view. See [\"page view\" events](/sdk/web/events/#page-view-events), for more information.",
                "enum": [
                  "page"
                ]
              },
              "timestamp": {
                "type": "integer",
                "format": "unix timestamp",
                "description": "The unix timestamp when the event took place. If you don't provide this value, we use the date-time when we receive the event.\n"
              },
              "data": {
                "type": "object",
                "description": "Additional information that you might want to reference in a message using liquid or use to set attributes on your customer (referenced by `customer_id`).",
                "additionalProperties": {
                  "x-additionalPropertiesName": "liquid merge data",
                  "description": "Insert key-values that you want to reference in messages or convert to attributes if/when you associate this event with a person."
                }
              }
            },
            "example": {
              "name": "https://mysite.com/page",
              "type": "page",
              "data": {
                "first_name": "Cool",
                "last_name": "Person"
              }
            }
          },
          {
            "title": "Mobile screen view",
            "type": "object",
            "required": [
              "anonymous_id",
              "name",
              "type"
            ],
            "properties": {
              "anonymous_id": {
                "$ref": "#/components/schemas/anonymous_id"
              },
              "name": {
                "type": "string",
                "description": "The name of the event. In general, this should be the name of the screen or deep link path that a person viewed, making it easy to segment your audience or trigger campaigns from these events. Make sure you trim leading and trailing spaces from this field."
              },
              "id": {
                "$ref": "#/components/schemas/dedupe_id"
              },
              "type": {
                "type": "string",
                "description": "Indicates that the event represents a mobile screen view. You can also capture screen events directly with [our iOS SDK](/sdk/ios/track-events/#screen-view-events).",
                "enum": [
                  "screen"
                ]
              },
              "timestamp": {
                "type": "integer",
                "format": "unix timestamp",
                "description": "The unix timestamp when the event took place. If you don't provide this value, we use the date-time when we receive the event.\n"
              },
              "data": {
                "type": "object",
                "description": "Additional information that you might want to reference in a message using liquid or use to set attributes on your customer (referenced by `customer_id`).",
                "additionalProperties": {
                  "x-additionalPropertiesName": "liquid merge data",
                  "description": "Insert key-values that you want to reference in messages or convert to attributes if/when you associate this event with a person."
                }
              }
            },
            "example": {
              "name": "homepage",
              "type": "screen",
              "data": {
                "from": "push-notification"
              }
            }
          }
        ]
      },
      "activityObject": {
        "type": "object",
        "properties": {
          "customer_id": {
            "$ref": "#/components/schemas/customer_id"
          },
          "customer_identifiers": {
            "$ref": "#/components/schemas/customer_identifiers"
          },
          "data": {
            "oneOf": [
              {
                "title": "Message delivery",
                "type": "object",
                "properties": {
                  "delivered": {
                    "type": "integer",
                    "format": "unix timestamp",
                    "description": "The date-time when the message was delivered, if applicable.",
                    "nullable": true
                  },
                  "delivery_id": {
                    "type": "string",
                    "description": "The message ID."
                  },
                  "opened": {
                    "type": "boolean",
                    "nullable": true,
                    "description": "Indicates whether or not a customer opened a message, if the message was delivered."
                  }
                },
                "example": {
                  "delivery_id": "ZAIAAVTJVG0QcCok0-0ZKj6yiQ==",
                  "opened": null,
                  "delivered": null
                }
              },
              {
                "title": "Attribute change",
                "description": "The name of the object is the attribute that changed.",
                "type": "object",
                "additionalProperties": {
                  "x-additionalPropertyName": "Attribute Name",
                  "$ref": "#/components/schemas/attributeChangeAction"
                },
                "example": {
                  "email": {
                    "from": "newPerson@example.com",
                    "to": "newPerson@customer.io"
                  }
                }
              }
            ]
          },
          "delivery_id": {
            "type": "string",
            "description": "The message ID.",
            "example": "ZAIAAVTJVG0QcCok0-0ZKj6yiQ=="
          },
          "delivery_type": {
            "type": "string",
            "description": "The recipient device, if applicable.",
            "enum": [
              "ios",
              "android",
              "email",
              "phone"
            ],
            "example": "email"
          },
          "id": {
            "description": "The identifier for the action.",
            "type": "string",
            "example": "01AK4N8V8G8KVA4HN8Y50CCZ59"
          },
          "timestamp": {
            "type": "integer",
            "format": "unix timestamp",
            "description": "The date and time when the action occurred.",
            "example": 1397566226
          },
          "type": {
            "$ref": "#/components/schemas/activityTypes"
          }
        }
      },
      "delivery_id": {
        "type": "string",
        "description": "The instance of a message sent to a person.",
        "example": "ZAIAAVTJVG0QcCok0-0ZKj6yiQ=="
      },
      "activityTypes": {
        "description": "The type of activity. Types with `_o:<object_type_id>` are for objects and types with `_r:<object_type_id>` are for relationships.",
        "type": "string",
        "enum": [
          "add_relationship",
          "anon_merge",
          "attempted_action",
          "attempted_email",
          "attempted_in_app",
          "attempted_push",
          "attempted_slack",
          "attempted_twilio",
          "attempted_webhook",
          "attribute_change",
          "bounced_action",
          "bounced_email",
          "bounced_push",
          "bounced_twilio",
          "clicked_action",
          "clicked_content",
          "clicked_email",
          "clicked_in_app",
          "clicked_push",
          "clicked_twilio",
          "clicked_webhook",
          "converted_action",
          "converted_content",
          "converted_email",
          "converted_in_app",
          "converted_slack",
          "converted_twilio",
          "converted_webhook",
          "deferred_action",
          "deferred_email",
          "deferred_in_app",
          "deferred_push",
          "deferred_slack",
          "deferred_twilio",
          "deferred_webhook",
          "delete_relationship",
          "delivered_action",
          "delivered_email",
          "delivered_push",
          "delivered_twilio",
          "device_change",
          "drafted_action",
          "drafted_email",
          "drafted_in_app",
          "drafted_push",
          "drafted_slack",
          "drafted_twilio",
          "drafted_webhook",
          "dropped_action",
          "dropped_email",
          "dropped_push",
          "dropped_twilio",
          "dropped_webhook",
          "event",
          "failed_action",
          "failed_attribute_change",
          "failed_batch_update",
          "failed_email",
          "failed_event",
          "failed_in_app",
          "failed_object_journeys",
          "failed_push",
          "failed_query_collection",
          "failed_slack",
          "failed_twilio",
          "failed_webhook",
          "opened_action",
          "opened_email",
          "opened_in_app",
          "opened_push",
          "page",
          "profile_create",
          "profile_delete",
          "profile_merge",
          "relationship_attribute_change",
          "relationship_failed_attribute_change",
          "screen",
          "sent_action",
          "sent_email",
          "sent_in_app",
          "sent_push",
          "sent_slack",
          "sent_twilio",
          "sent_webhook",
          "skipped_update",
          "spammed_email",
          "suppressed_twilio",
          "topic_unsubscribed_email",
          "undeliverable_action",
          "undeliverable_email",
          "undeliverable_in_app",
          "undeliverable_push",
          "undeliverable_slack",
          "undeliverable_twilio",
          "undeliverable_webhook",
          "unsubscribed_action",
          "unsubscribed_email",
          "viewed_content",
          "webhook_event",
          "_o:<object_type_id>:add_relationship",
          "_o:<object_type_id>:attribute_change",
          "_o:<object_type_id>:create",
          "_o:<object_type_id>:delete",
          "_o:<object_type_id>:delete_relationship",
          "_o:<object_type_id>:failed_attribute_change",
          "_r:<object_type_id>:attribute_change",
          "_r:<object_type_id>:failed_attribute_change"
        ],
        "example": "sent_email"
      },
      "attributeChangeAction": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The old attribute value. If empty, the customer probably didn't bear the attribute before this action."
          },
          "to": {
            "type": "string",
            "description": "The new attribute value."
          }
        }
      },
      "segmentAudienceFilter": {
        "title": "segment",
        "type": "object",
        "description": "Provide the `id` of a segment containing people you want to search for.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the segment you want to return people from.",
            "example": 4
          }
        }
      },
      "attributeAudienceFilter": {
        "title": "attribute",
        "description": "Filter your audience by attribute.",
        "type": "object",
        "required": [
          "field",
          "operator"
        ],
        "properties": {
          "field": {
            "type": "string",
            "description": "The name of the attribute you want to filter against.",
            "example": "first_name"
          },
          "operator": {
            "type": "string",
            "description": "Determine how to evaluate criteria against the field—`exists` returns results if a person in the audience has the attribute; `eq` returns results if the audience has the attribute and the attribute has the `value` you specify.",
            "enum": [
              "eq",
              "exists"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value you want to match for this attribute. You must include a value if you use the `eq` operator."
          }
        },
        "example": {
          "field": "unsubscribed",
          "operator": "eq",
          "value": true
        }
      },
      "simpleAudienceFilter": {
        "anyOf": [
          {
            "title": "segment",
            "description": "Filter for people who belong to a segment.",
            "type": "object",
            "properties": {
              "segment": {
                "$ref": "#/components/schemas/segmentAudienceFilter"
              }
            }
          },
          {
            "title": "audience",
            "type": "object",
            "description": "filter for people who have an attribute or an attribute value.",
            "properties": {
              "attribute": {
                "$ref": "#/components/schemas/attributeAudienceFilter"
              }
            }
          }
        ]
      },
      "complexAudienceFilter": {
        "title": "People Filter",
        "type": "object",
        "description": "When filtering for people, you can use `and` and `or` arrays to determine the logic for a group of filter conditions. `not` reverses the filter condition and matches when the condition is false. `segment` and `attribute` represent the individual conditions you can filter a group of people for.",
        "properties": {
          "and": {
            "type": "array",
            "description": "Returns results matching *all* conditions.",
            "items": {
              "$ref": "#/components/schemas/simpleAudienceFilter"
            }
          },
          "or": {
            "type": "array",
            "description": "Returns results matching *any* conditions.",
            "items": {
              "$ref": "#/components/schemas/simpleAudienceFilter"
            }
          },
          "not": {
            "description": "Returns results if a condition is false. While and/or support an array of items, `not` supports a single filter object.",
            "oneOf": [
              {
                "title": "and",
                "type": "object",
                "properties": {
                  "and": {
                    "type": "array",
                    "description": "Match *all* conditions to return results.",
                    "items": {
                      "$ref": "#/components/schemas/simpleAudienceFilter"
                    }
                  }
                }
              },
              {
                "title": "or",
                "type": "object",
                "properties": {
                  "or": {
                    "type": "array",
                    "description": "Match *any* condition to return results.",
                    "items": {
                      "$ref": "#/components/schemas/simpleAudienceFilter"
                    }
                  }
                }
              },
              {
                "title": "segment",
                "type": "object",
                "properties": {
                  "segment": {
                    "$ref": "#/components/schemas/segmentAudienceFilter"
                  }
                }
              },
              {
                "title": "attribute",
                "type": "object",
                "properties": {
                  "attribute": {
                    "$ref": "#/components/schemas/attributeAudienceFilter"
                  }
                }
              }
            ]
          },
          "segment": {
            "$ref": "#/components/schemas/segmentAudienceFilter"
          },
          "attribute": {
            "$ref": "#/components/schemas/attributeAudienceFilter"
          }
        }
      },
      "andAudienceFilter": {
        "title": "and",
        "type": "object",
        "properties": {
          "and": {
            "type": "array",
            "description": "Match *all* conditions to return results.",
            "items": {
              "type": "object",
              "properties": {
                "or": {
                  "type": "array",
                  "description": "Returns results matching *any* conditions.",
                  "items": {
                    "$ref": "#/components/schemas/simpleAudienceFilter"
                  }
                },
                "not": {
                  "description": "Returns results if a condition is false. While and/or support an array of items, `not` supports a single filter object.",
                  "oneOf": [
                    {
                      "title": "and",
                      "type": "object",
                      "properties": {
                        "and": {
                          "type": "array",
                          "description": "Match *all* conditions to return results.",
                          "items": {
                            "$ref": "#/components/schemas/simpleAudienceFilter"
                          }
                        }
                      }
                    },
                    {
                      "title": "or",
                      "type": "object",
                      "properties": {
                        "or": {
                          "type": "array",
                          "description": "Match *any* condition to return results.",
                          "items": {
                            "$ref": "#/components/schemas/simpleAudienceFilter"
                          }
                        }
                      }
                    },
                    {
                      "title": "segment",
                      "type": "object",
                      "properties": {
                        "segment": {
                          "$ref": "#/components/schemas/segmentAudienceFilter"
                        }
                      }
                    },
                    {
                      "title": "attribute",
                      "type": "object",
                      "properties": {
                        "attribute": {
                          "$ref": "#/components/schemas/attributeAudienceFilter"
                        }
                      }
                    }
                  ]
                },
                "segment": {
                  "$ref": "#/components/schemas/segmentAudienceFilter"
                },
                "attribute": {
                  "$ref": "#/components/schemas/attributeAudienceFilter"
                }
              }
            }
          }
        }
      },
      "orAudienceFilter": {
        "title": "or",
        "type": "object",
        "properties": {
          "or": {
            "type": "array",
            "description": "Match *any* condition to return results.",
            "items": {
              "type": "object",
              "properties": {
                "and": {
                  "type": "array",
                  "description": "Returns results matching *all* conditions.",
                  "items": {
                    "$ref": "#/components/schemas/simpleAudienceFilter"
                  }
                },
                "not": {
                  "description": "Returns results if a condition is false. While and/or support an array of items, `not` supports a single filter object.",
                  "oneOf": [
                    {
                      "title": "and",
                      "type": "object",
                      "properties": {
                        "and": {
                          "type": "array",
                          "description": "Match *all* conditions to return results.",
                          "items": {
                            "$ref": "#/components/schemas/simpleAudienceFilter"
                          }
                        }
                      }
                    },
                    {
                      "title": "or",
                      "type": "object",
                      "properties": {
                        "or": {
                          "type": "array",
                          "description": "Match *any* condition to return results.",
                          "items": {
                            "$ref": "#/components/schemas/simpleAudienceFilter"
                          }
                        }
                      }
                    },
                    {
                      "title": "segment",
                      "type": "object",
                      "properties": {
                        "segment": {
                          "$ref": "#/components/schemas/segmentAudienceFilter"
                        }
                      }
                    },
                    {
                      "title": "attribute",
                      "type": "object",
                      "properties": {
                        "attribute": {
                          "$ref": "#/components/schemas/attributeAudienceFilter"
                        }
                      }
                    }
                  ]
                },
                "segment": {
                  "$ref": "#/components/schemas/segmentAudienceFilter"
                },
                "attribute": {
                  "$ref": "#/components/schemas/attributeAudienceFilter"
                }
              }
            }
          }
        }
      },
      "notAudienceFilter": {
        "title": "not",
        "description": "Returns results if a condition is false. While and/or support an array of items, `not` supports a single filter object.",
        "oneOf": [
          {
            "title": "and",
            "type": "object",
            "properties": {
              "and": {
                "type": "array",
                "description": "Match *all* conditions to return results.",
                "items": {
                  "$ref": "#/components/schemas/complexAudienceFilter"
                }
              }
            }
          },
          {
            "title": "or",
            "type": "object",
            "properties": {
              "or": {
                "type": "array",
                "description": "Match *any* condition to return results.",
                "items": {
                  "$ref": "#/components/schemas/complexAudienceFilter"
                }
              }
            }
          },
          {
            "title": "segment",
            "type": "object",
            "properties": {
              "segment": {
                "$ref": "#/components/schemas/segmentAudienceFilter"
              }
            }
          },
          {
            "title": "attribute",
            "type": "object",
            "properties": {
              "attribute": {
                "$ref": "#/components/schemas/attributeAudienceFilter"
              }
            }
          }
        ]
      },
      "audienceFilter": {
        "title": "Audience Filter",
        "description": "When filtering for people, you can use `and` and `or` arrays to determine the logic for a group of filter conditions. `not` reverses the filter condition and matches when the condition is false. `segment` and `attribute` represent the individual conditions you can filter a group of people for.\n\nThe top level of this object can only contain a single property, but you can nest `and` and `or` properties to produce complex filters.\n",
        "oneOf": [
          {
            "$ref": "#/components/schemas/andAudienceFilter"
          },
          {
            "$ref": "#/components/schemas/orAudienceFilter"
          },
          {
            "$ref": "#/components/schemas/notAudienceFilter"
          },
          {
            "title": "segment",
            "description": "Filter for people who belong to a segment.",
            "type": "object",
            "properties": {
              "segment": {
                "$ref": "#/components/schemas/segmentAudienceFilter"
              }
            }
          },
          {
            "title": "audience",
            "type": "object",
            "description": "filter for people who have an attribute or an attribute value.",
            "properties": {
              "attribute": {
                "$ref": "#/components/schemas/attributeAudienceFilter"
              }
            }
          }
        ]
      },
      "objectattributeFilter": {
        "title": "object attribute",
        "description": "Filter your objects by their attributes.",
        "type": "object",
        "required": [
          "field",
          "operator",
          "type_id"
        ],
        "properties": {
          "field": {
            "type": "string",
            "description": "The name of the attribute you want to filter against.",
            "example": "location"
          },
          "operator": {
            "type": "string",
            "description": "Determine how to evaluate criteria against the field—`exists` returns results if an object has the attribute; `eq` returns results an object's attribute exists and the attribute has the `value` you specify.",
            "enum": [
              "eq",
              "exists"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value you want to match for this attribute. You must include a value if you use the `eq` operator."
          },
          "type_id": {
            "$ref": "#/components/schemas/object_type_id"
          }
        },
        "example": {
          "field": "cancelled",
          "operator": "eq",
          "value": true,
          "type_id": 1
        }
      },
      "objectFilterAnd": {
        "title": "and",
        "type": "object",
        "properties": {
          "and": {
            "type": "array",
            "description": "Match *all* conditions to return results.",
            "items": {
              "type": "object",
              "properties": {
                "object_attribute": {
                  "$ref": "#/components/schemas/objectattributeFilter"
                }
              }
            }
          }
        }
      },
      "objectFilterOr": {
        "title": "or",
        "type": "object",
        "properties": {
          "or": {
            "type": "array",
            "description": "Match *any* condition to return results.",
            "items": {
              "type": "object",
              "properties": {
                "object_attribute": {
                  "$ref": "#/components/schemas/objectattributeFilter"
                }
              }
            }
          }
        }
      },
      "objectFilterNot": {
        "title": "not",
        "type": "object",
        "properties": {
          "not": {
            "type": "object",
            "description": "Returns results if a condition is false. While and/or support an array of items, `not` supports a single condition.",
            "properties": {
              "object_attribute": {
                "$ref": "#/components/schemas/objectattributeFilter"
              }
            }
          }
        }
      },
      "objectFilter": {
        "title": "Object Filter",
        "description": "When filtering for objects, you can use `and` and `or` arrays to determine the logic for a group of filter conditions. `not` reverses the filter condition and matches when the condition is false. `object_attribute` represents the individual conditions you can filter objects by.\n\nThe top level of this object can only contain a single property, but you can nest `and` and `or` properties to produce complex filters.\n",
        "oneOf": [
          {
            "$ref": "#/components/schemas/objectFilterAnd"
          },
          {
            "$ref": "#/components/schemas/objectFilterOr"
          },
          {
            "$ref": "#/components/schemas/objectFilterNot"
          },
          {
            "title": "object attribute",
            "type": "object",
            "description": "A simple filter to find objects matching an attribute condition.",
            "properties": {
              "object_attribute": {
                "$ref": "#/components/schemas/objectattributeFilter"
              }
            }
          }
        ]
      },
      "device_object_common": {
        "type": "object",
        "description": "Device information common to the v1 and v2 APIs.",
        "required": [
          "platform"
        ],
        "properties": {
          "last_used": {
            "type": "integer",
            "format": "unix timestamp",
            "description": "The `timestamp` when you last identified this device. If you don't pass a timestamp when you add or update a device, we use the time of the request itself. Our SDKs identify a device when a person launches their app."
          },
          "platform": {
            "type": "string",
            "enum": [
              "ios",
              "android"
            ],
            "description": "The device/messaging platform."
          },
          "attributes": {
            "type": "object",
            "description": "Attributes that you can reference to segment your audience—like a person's attributes, but specific to a device. These can be either the attributes defined below or custom key-value attributes.",
            "properties": {
              "device_os": {
                "type": "string",
                "description": "The operating system, including the version, on the device."
              },
              "device_model": {
                "type": "string",
                "description": "The model of the device a person uses."
              },
              "app_version": {
                "type": "string",
                "description": "The version of your app that a customer uses. You might target app versions to let people know when they need to update, or expose them to new features when they do."
              },
              "cio_sdk_version": {
                "type": "string",
                "description": "The version of the Customer.io SDK in the app."
              },
              "_last_status": {
                "type": "string",
                "readOnly": true,
                "description": "The delivery status of the last message sent to the device—sent, bounced, or suppressed. An empty string indicates that that the device hasn't received a push yet.",
                "enum": [
                  "",
                  "bounced",
                  "sent",
                  "suppressed"
                ]
              },
              "device_locale": {
                "type": "string",
                "description": "The four-letter [IETF language code](/localization/#supported-languages) for the device. For example, `en-MX` (indicating an app in Spanish formatted for a user in Mexico) or `es-ES` (indicating an app in Spanish formatted for a user in Spain)."
              },
              "push_enabled": {
                "type": "string",
                "description": "If `\"true\"`, the device is opted-in and can receive push notifications.",
                "enum": [
                  "true",
                  "false"
                ]
              }
            },
            "additionalProperties": {
              "x-additionalPropertiesName": "Custom Device Attributes",
              "description": "Custom properties that you want to associate with the device.",
              "type": "string"
            }
          }
        }
      },
      "device_object_cdp_common": {
        "type": "object",
        "description": "Device information common to the v1 and v2 APIs.",
        "required": [
          "platform"
        ],
        "properties": {
          "last_used": {
            "type": "integer",
            "format": "unix timestamp",
            "description": "The `timestamp` when you last identified this device. If you don't pass a timestamp when you add or update a device, we use the time of the request itself. Our SDKs identify a device when a person launches their app."
          },
          "platform": {
            "type": "string",
            "enum": [
              "ios",
              "android"
            ],
            "description": "The device/messaging platform."
          },
          "attributes": {
            "type": "object",
            "description": "Attributes that you can reference to segment your audience—like a person's attributes, but specific to a device. These can be either the attributes defined below or custom key-value attributes.",
            "properties": {
              "device_os": {
                "type": "string",
                "description": "The operating system, including the version, on the device."
              },
              "device_model": {
                "type": "string",
                "description": "The model of the device a person uses."
              },
              "app_version": {
                "type": "string",
                "description": "The version of your app that a customer uses. You might target app versions to let people know when they need to update, or expose them to new features when they do."
              },
              "cio_sdk_version": {
                "type": "string",
                "description": "The version of the Customer.io SDK in the app."
              },
              "_last_status": {
                "type": "string",
                "readOnly": true,
                "description": "The delivery status of the last message sent to the device—sent, bounced, or suppressed. An empty string indicates that that the device hasn't received a push yet.",
                "enum": [
                  "",
                  "bounced",
                  "sent",
                  "suppressed"
                ]
              },
              "device_locale": {
                "type": "string",
                "description": "The four-letter [IETF language code](/localization/#supported-languages) for the device. For example, `en-MX` (indicating an app in Spanish formatted for a user in Mexico) or `es-ES` (indicating an app in Spanish formatted for a user in Spain)."
              },
              "push_enabled": {
                "type": "string",
                "description": "If `\"true\"`, the device is opted-in and can receive push notifications.",
                "enum": [
                  "true",
                  "false"
                ]
              },
              "network_bluetooth": {
                "type": "boolean",
                "description": "If `true`, the device's bluetooth connection is on."
              },
              "network_cellular": {
                "type": "boolean",
                "description": "If `true`, the device's cellular connection is on."
              },
              "network_wifi": {
                "type": "boolean",
                "description": "If `true`, the device's WiFi connection is on."
              },
              "screen_height": {
                "type": "integer",
                "description": "The height of the device's screen in pixels."
              },
              "screen_width": {
                "type": "integer",
                "description": "The width of the device's screen in pixels."
              },
              "timezone": {
                "type": "string",
                "description": "The timezone of the device."
              }
            },
            "additionalProperties": {
              "x-additionalPropertiesName": "Custom Device Attributes",
              "description": "Custom properties that you want to associate with the device.",
              "type": "string"
            }
          }
        }
      },
      "device_object": {
        "description": "The properties representing an individual device. [Our SDK's](/sdk/) gather all the properties defined below automatically, unless you disable the `autoTrackDeviceAttributes` setting. You can reference the properties outside the `attributes` object in segments or in Liquid.",
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "The device token.",
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/device_object_common"
          }
        ]
      },
      "device_object_cdp": {
        "description": "The properties representing an individual device in Journeys when sent from a Customer.io SDK that natively supports Data Pipelines (iOS 3.0, Android 4.0, or later versions). [Our Data Pipelines-enabled SDK's](/sdk/) gather all the properties defined below automatically unless you disable the `autoTrackDeviceAttributes` setting.",
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "The device token.",
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/device_object_cdp_common"
          }
        ]
      },
      "import_request": {
        "oneOf": [
          {
            "title": "people",
            "type": "object",
            "description": "Contains your import parameters.",
            "required": [
              "data_file_url",
              "name",
              "type",
              "identifier"
            ],
            "properties": {
              "name": {
                "$ref": "#/components/schemas/import_name"
              },
              "data_file_url": {
                "type": "string",
                "description": "The URL or path to the CSV file you want to import."
              },
              "type": {
                "type": "string",
                "description": "The type of import.",
                "enum": [
                  "people"
                ]
              },
              "identifier": {
                "$ref": "#/components/schemas/import_identifier"
              },
              "data_to_process": {
                "$ref": "#/components/schemas/data_to_process"
              },
              "description": {
                "$ref": "#/components/schemas/import_description"
              }
            }
          },
          {
            "title": "event",
            "type": "object",
            "description": "Contains your import parameters.",
            "required": [
              "data_file_url",
              "name",
              "type",
              "identifier"
            ],
            "properties": {
              "name": {
                "$ref": "#/components/schemas/import_name"
              },
              "data_file_url": {
                "type": "string",
                "description": "The URL or path to the CSV file you want to import."
              },
              "type": {
                "type": "string",
                "description": "The type of import.",
                "enum": [
                  "event"
                ]
              },
              "identifier": {
                "$ref": "#/components/schemas/import_identifier"
              },
              "data_to_process": {
                "$ref": "#/components/schemas/data_to_process"
              },
              "description": {
                "$ref": "#/components/schemas/import_description"
              }
            }
          },
          {
            "title": "relationship",
            "type": "object",
            "description": "Contains your import parameters.",
            "required": [
              "data_file_url",
              "name",
              "type",
              "identifier",
              "object_type_id"
            ],
            "properties": {
              "name": {
                "$ref": "#/components/schemas/import_name"
              },
              "data_file_url": {
                "type": "string",
                "description": "The URL or path to the CSV file you want to import."
              },
              "type": {
                "type": "string",
                "description": "The type of import.",
                "enum": [
                  "relationship"
                ]
              },
              "identifier": {
                "$ref": "#/components/schemas/import_identifier"
              },
              "data_to_process": {
                "$ref": "#/components/schemas/data_to_process"
              },
              "description": {
                "$ref": "#/components/schemas/import_description"
              }
            }
          },
          {
            "title": "object",
            "type": "object",
            "description": "Contains your import parameters.",
            "required": [
              "data_file_url",
              "name",
              "type",
              "object_type_id"
            ],
            "properties": {
              "name": {
                "$ref": "#/components/schemas/import_name"
              },
              "data_file_url": {
                "type": "string",
                "description": "The URL or path to the CSV file you want to import."
              },
              "object_type_id": {
                "$ref": "#/components/schemas/object_type_id"
              },
              "type": {
                "type": "string",
                "description": "The type of import.",
                "enum": [
                  "object"
                ]
              },
              "data_to_process": {
                "$ref": "#/components/schemas/data_to_process"
              },
              "description": {
                "$ref": "#/components/schemas/import_description"
              }
            }
          }
        ]
      },
      "import_name": {
        "type": "string",
        "description": "A friendly name for your import. This helps you identify your import."
      },
      "import_type": {
        "type": "string",
        "description": "The type of import.",
        "enum": [
          "people",
          "event",
          "object",
          "relationship"
        ]
      },
      "import_description": {
        "type": "string",
        "description": "A helpful description that can help you find and recognize your import operation."
      },
      "import_state": {
        "type": "string",
        "description": "The state of the import—whether your import is being processed, fully completed (`imported`), or if it failed.",
        "enum": [
          "preprocessing",
          "preprocessed",
          "validating",
          "validated",
          "importing",
          "imported",
          "failed",
          "canceled"
        ]
      },
      "rows_to_import": {
        "type": "integer",
        "description": "The total number of importable rows we found in the CSV."
      },
      "rows_imported": {
        "type": "integer",
        "description": "The number of rows we imported from the CSV."
      },
      "data_to_process": {
        "type": "string",
        "description": "Determines whether your import operation performs `all` add/update operations, only adds items (`only_new`), or only updates existing items (`only_existing`). Defaults to `all`. If `import_type` is `event`, you can only use `all` or `only_existing`. \n\nThis field was previously called `people_to_process` - we still support it but will deprecate it soon.\n",
        "enum": [
          "all",
          "only_new",
          "only_existing"
        ]
      },
      "import_identifier": {
        "type": "string",
        "description": "The type of identifier you want to use to identify people in your sheet—`id` or `email`. At least one column in the CSV must contain an identifier.",
        "enum": [
          "id",
          "email"
        ]
      },
      "import_object": {
        "description": "Represents an import operation.",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "This is the `import_id` you'll use if you want to [lookup your import operation](#getImport)."
          },
          "created_at": {
            "$ref": "#/components/schemas/created"
          },
          "updated_at": {
            "$ref": "#/components/schemas/updated"
          },
          "name": {
            "$ref": "#/components/schemas/import_name"
          },
          "description": {
            "$ref": "#/components/schemas/import_description"
          },
          "rows_to_import": {
            "$ref": "#/components/schemas/rows_to_import"
          },
          "rows_imported": {
            "$ref": "#/components/schemas/rows_imported"
          },
          "state": {
            "$ref": "#/components/schemas/import_state"
          },
          "type": {
            "$ref": "#/components/schemas/import_type"
          },
          "identifier": {
            "type": "string",
            "description": "The type of identifier you used to identify people in your CSV. Not applicable for object imports.",
            "enum": [
              "id",
              "email"
            ]
          },
          "data_to_process": {
            "$ref": "#/components/schemas/data_to_process"
          },
          "people_to_process": {
            "type": "string",
            "description": "Returned for people and event imports, even if you imported using the field `data_to_process`. This field will be deprecated soon.\n",
            "enum": [
              "all",
              "only_new",
              "only_existing"
            ]
          },
          "object_type_id": {
            "type": "string",
            "description": "The object type an object belongs to—like \"Companies\" or \"Accounts\". Only applies to object imports.",
            "nullable": false,
            "example": "1"
          },
          "error": {
            "description": "If your import fails, this helps you understand why.",
            "type": "string"
          }
        },
        "example": {
          "id": 30,
          "name": "account-object-import",
          "description": "importing accounts",
          "created_at": 1706081641,
          "updated_at": 1706081645,
          "rows_to_import": 3,
          "rows_imported": 3,
          "state": "imported",
          "type": "object",
          "data_to_process": "all",
          "people_to_process": "all",
          "object_type_id": 1,
          "error": "possible error - The specified Object Type does not exist."
        }
      },
      "customerAttributesObject": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "object",
            "description": "The profile you referenced by ID in the request.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The customer ID referenced in the request."
              },
              "identifiers": {
                "$ref": "#/components/schemas/customer_identifiers"
              },
              "attributes": {
                "type": "object",
                "description": "Contains attributes assigned to this profile, including your workspace's people-identifiers (by default, these are `id`, `email`, and `cio_id`). Attributes are all stored as strings.",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/customer_id"
                  },
                  "email": {
                    "$ref": "#/components/schemas/email_address"
                  },
                  "cio_id": {
                    "$ref": "#/components/schemas/cio_id"
                  },
                  "cio_subscription_preferences": {
                    "type": "string",
                    "description": "A person's stringified subscription preferences. These are preferences that a person set through the subscription center or attributes that you set on a person. A person who hasn't set their subscription preferences has computed preferences based on the nature of your topics (opt-in or opt-out). See the `_cio_subscription_preferences_computed` attribute for computed preferences.\n"
                  },
                  "_cio_subscription_preferences_computed": {
                    "type": "string",
                    "description": "Returns the computed subscription preferences for a person—any subscription preferences set on a person and the defaults for any subscription preferences _not_ set on a person—as stringified JSON. For example, if you have an \"opt-in\" topic that a person hasn't set a preference for, that topic would show `false`—even though a person doesn't have that attribute on their profile. [Learn more about topics](/subscription-preferences/#backfill-preferences).  \n"
                  }
                },
                "additionalProperties": {
                  "x-additionalPropertiesName": "additional attributes",
                  "description": "Non-identifier attributes assigned to this person.",
                  "type": "string"
                }
              },
              "timestamps": {
                "deprecated": true,
                "type": "object",
                "description": "The epoch timestamps when corresponding attributes were set on the customer profile.",
                "properties": {
                  "cio_id": {
                    "type": "integer",
                    "description": "The date-time when `cio_id` was assigned.",
                    "format": "unix timestamp"
                  },
                  "_last_emailed": {
                    "type": "integer",
                    "description": "The date-time when you last emailed a person.",
                    "format": "unix timestamp"
                  },
                  "email": {
                    "type": "integer",
                    "description": "The date-time when the person's email address was added.",
                    "format": "unix timestamp"
                  },
                  "id": {
                    "type": "integer",
                    "description": "The date-time when the person's ID was generated.",
                    "format": "unix timestamp"
                  },
                  "unsubscribed": {
                    "type": "integer",
                    "description": "The date-time when the person unsubscribed.",
                    "format": "unix timestamp"
                  },
                  "_cio_subscription_preferences_computed": {
                    "type": "integer",
                    "description": "Because this value is computed and not actually set on a person, this value is always 0"
                  },
                  "cio_subscription_preferences": {
                    "type": "integer",
                    "description": "The datetime when a person's subscription preferences were last updated.",
                    "format": "unix timestamp"
                  },
                  "additionalProperties": {
                    "x-additionalPropertiesName": "additional attribute timestamps",
                    "description": "Timestamps when attributes assigned to the person were set.",
                    "format": "unix timestamp"
                  }
                }
              },
              "unsubscribed": {
                "type": "boolean",
                "description": "If true, the person is unsubscribed from messages."
              },
              "devices": {
                "type": "array",
                "description": "Lists the devices associated with the customer profile.",
                "items": {
                  "$ref": "#/components/schemas/device_object"
                }
              }
            }
          }
        },
        "example": {
          "customer": {
            "id": "1",
            "attributes": {
              "_last_emailed": "1528932553",
              "created_at": "1489014595",
              "email": "test@example.com",
              "title": "tester",
              "department": "qa",
              "id": "1",
              "cio_id": "03000001",
              "cio_subscription_preferences": "{\"topics\":{\"topic_7\":false,\"topic_8\":false}}",
              "_cio_subscription_preferences_computed": "{\"topics\":{\"topic_6\":false,\"topic_7\":false,\"topic_8\":false}}"
            },
            "timestamps": {
              "cio_id": 1489014595,
              "_last_emailed": 1528932553,
              "created_at": 1489014595,
              "email": 1508932553,
              "id": 1489014595,
              "department": 1508932553,
              "title": 1508932553,
              "_cio_subscription_preferences_computed": 0,
              "cio_subscription_preferences": 1673987303
            },
            "unsubscribed": false,
            "devices": [
              {
                "id": "my_android_device_id",
                "last_used": 1514764800,
                "platform": "android"
              },
              {
                "id": "my_ios_device_id",
                "last_used": 1514764800,
                "platform": "ios"
              }
            ]
          }
        }
      },
      "preheader": {
        "type": "string",
        "description": "Also known as \"preview text\", this is the block block of text that users see next to, or underneath, the subject line in their inbox."
      },
      "body_plain": {
        "type": "string",
        "description": "By default, we generate a plaintext version of your message body for each delivery. Use this key to override the default plain text body."
      },
      "attachments": {
        "type": "object",
        "description": "A dictionary of attachments where the filename is the key and the value is the base64-encoded contents. The filename must include the extension (i.e. `name.csv`). The total size of all attachments must be less than 2 MB.",
        "properties": {
          "<file-name>": {
            "type": "string",
            "format": "base64"
          }
        }
      },
      "headers": {
        "description": "An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.",
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "example": {
          "X-Mailgun-Tag": "my-cool-tag"
        }
      },
      "disable_message_retention": {
        "type": "boolean",
        "default": false,
        "description": "If true, the message body is not retained in delivery history. Setting this value overrides the value set in the settings of your `transactional_message_id`."
      },
      "send_to_unsubscribed": {
        "type": "boolean",
        "default": true,
        "description": "If false, your message is not sent to unsubscribed recipients. Setting this value overrides the value set in the settings of your `transactional_message_id`."
      },
      "tracked": {
        "type": "boolean",
        "description": "If true, Customer.io tracks opens and link clicks in your message.",
        "default": true
      },
      "queue_draft": {
        "type": "boolean",
        "description": "If true, your transactional message is held as a draft in Customer.io and not sent directly to your audience. You must go to the Deliveries and Drafts page to send your message.",
        "default": false
      },
      "customer_identifiers": {
        "type": "object",
        "description": "Contains identifiers for the person represented in a response—`id`, `cio_id`, and `email` (if your workspace uses the *Email or ID* setting). If the person's `id` or `email` is not set, the value will be null.\n\nWe recommend that you use this object rather than the less descriptive `customer_id`.\n",
        "required": [
          "email",
          "id",
          "cio_id"
        ],
        "properties": {
          "email": {
            "type": "string",
            "nullable": true,
            "format": "email",
            "description": "A person's email address, if set.",
            "example": "test@example.com"
          },
          "id": {
            "type": "string",
            "nullable": true,
            "description": "A person's unique ID, if set. This is the same as the `customer_id` if present.",
            "example": 2
          },
          "cio_id": {
            "$ref": "#/components/schemas/cio_id"
          }
        }
      },
      "transactionalSharedEmailObject": {
        "type": "object",
        "properties": {
          "to": {
            "type": "string",
            "description": "The message recipient(s). Supports multiple addresses separated by commas. Your request can contain up to 15 total recipients between the `to` and `bcc` keys.\n\nYou can include a display or \"friendly\" name in \"to\" address, but we recommend that you use quotation marks around the friendly name to avoid potential issues with special characters, e.g. `\\\"Person\\\" <person@example.com>`.            \n",
            "example": "cool.person@example.com"
          },
          "bcc": {
            "type": "string",
            "description": "Blind copy message recipients. Supports multiple addresses separated by commas. Your request can contain up to 15 total recipients between the `to` and `bcc` keys.",
            "example": "bcc@example.com"
          },
          "fake_bcc": {
            "type": "boolean",
            "description": "If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es).\n"
          },
          "reply_to": {
            "type": "string",
            "description": "The address that recipients can reply to, if different from the `from` address.",
            "example": "replyto@example.com"
          },
          "preheader": {
            "$ref": "#/components/schemas/preheader"
          },
          "body_plain": {
            "$ref": "#/components/schemas/body_plain"
          },
          "attachments": {
            "$ref": "#/components/schemas/attachments"
          },
          "headers": {
            "$ref": "#/components/schemas/headers"
          },
          "disable_css_preprocessing": {
            "type": "boolean",
            "description": "Set to `true` to disable CSS preprocessing. This setting overrides the CSS preprocessing setting on the `transactional_message_id` as set in the user interface. Transactional emails have CSS preprocessing enabled by default.",
            "example": false,
            "default": false
          },
          "tracked": {
            "$ref": "#/components/schemas/tracked"
          }
        }
      },
      "transactionalSharedPushObject": {
        "type": "object",
        "properties": {
          "to": {
            "type": "string",
            "description": "The person's device(s) you want to send this push to. One of `all`, `last_used`, or a custom device token which belongs to the profile from the Identifiers block. Defaults to 'all'. This overrides To from the transactional template (referenced by `transactional_message_id`).",
            "enum": [
              "all",
              "last_used",
              "$device_token"
            ],
            "default": "all"
          },
          "title": {
            "type": "string",
            "description": "The title for your notification. This overrides the title of the transactional template (referenced by `transactional_message_id`)."
          },
          "message": {
            "type": "string",
            "description": "The message body for your notification. This overrides the notification body of the transactional template (referenced by `transactional_message_id`)."
          },
          "image_url": {
            "type": "string",
            "description": "An image URL to show in the push. This overrides Image from the transactional template (referenced by `transactional_message_id`)."
          },
          "link": {
            "type": "string",
            "description": "A deep link to open when the push is tapped. This overrides Link from the transactional template (referenced by `transactional_message_id`)."
          },
          "sound": {
            "type": "string",
            "description": "**For iOS Only**: your notification can alert users with the device's default notification sound or play no sound at all. \n",
            "enum": [
              "default",
              "none"
            ],
            "default": "default"
          },
          "custom_data": {
            "type": "object",
            "description": "An optional list of key/value pairs to attach to the push payload. Due to a Firebase limitation we only support sending string key value pairs. This overrides Custom Data from the transactional template (referenced by `transactional_message_id`)."
          },
          "custom_device": {
            "description": "A device to perform an upsert operation at the time of send. The device will be added/updated on the profile from the Identifiers block.",
            "allOf": [
              {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "description": "The device token.",
                    "type": "string"
                  }
                }
              },
              {
                "$ref": "#/components/schemas/device_object_common"
              }
            ]
          },
          "custom_payload": {
            "type": "object",
            "description": "An optional list of key/value pairs to attach to the push payload. Due to a Firebase limitation we only support sending string key value pairs. This overrides every other parameter, including any Custom Payload from the transactional template (referenced by `transactional_message_id`).",
            "properties": {
              "ios": {
                "$ref": "#/components/schemas/iosFcmAndApns"
              },
              "android": {
                "$ref": "#/components/schemas/fcmAndroidWithoutSdk"
              }
            }
          },
          "language": {
            "type": "string",
            "description": "Overrides language preferences for the person you want to send your transactional message to. Use one of our [supported two- or four-letter language codes](/localization-getting-started/#supported-languages)."
          }
        }
      },
      "transactionalSharedObject": {
        "type": "object",
        "required": [
          "to",
          "identifiers"
        ],
        "properties": {
          "identifiers": {
            "description": "Identifies the person represented by your transactional message by one of, and only one of, `id`, `email`, or `cio_id`.",
            "oneOf": [
              {
                "title": "id",
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The identifier for the person represented by the transactional message. **NOTE**: If your workspace identifies people by email, use the `email` identifier instead.\n",
                    "example": 12345
                  }
                }
              },
              {
                "title": "email",
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The identifier for the person represented by the transactional message. Use this option if your workspace identifies people by email rather than by `id`.",
                    "example": "cool.person@example.com"
                  }
                }
              },
              {
                "title": "cio_id",
                "type": "object",
                "required": [
                  "cio_id"
                ],
                "properties": {
                  "cio_id": {
                    "type": "string",
                    "description": "A unique, immutable identifier for a person, set by Customer.io when you add a person.",
                    "example": 3000001
                  }
                }
              }
            ]
          },
          "message_data": {
            "type": "object",
            "description": "An object containing the key-value pairs referenced using liquid in your message.",
            "additionalProperties": {
              "x-additionalPropertiesName": "Liquid Data",
              "description": "Insert key-values that you want to reference in your message here."
            },
            "example": {
              "password_reset_token": "abcde-12345-fghij-d888",
              "account_id": "123dj"
            }
          },
          "send_at": {
            "type": "integer",
            "description": "A unix timestamp (seconds since epoch) determining when the message will be sent. The timestamp can be up to 90 days in the future. If this value is in the past, your message is sent immediately."
          },
          "disable_message_retention": {
            "$ref": "#/components/schemas/disable_message_retention"
          },
          "send_to_unsubscribed": {
            "$ref": "#/components/schemas/send_to_unsubscribed"
          },
          "queue_draft": {
            "$ref": "#/components/schemas/queue_draft"
          }
        }
      },
      "snippet": {
        "type": "object",
        "description": "describes a piece of reusable content. You must provide a name for the snippet and the `value`—the content that appears in messages that use the snippet.",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the snippet, must be unique."
          },
          "value": {
            "type": "string",
            "description": "The contents of the snippet."
          },
          "updated_at": {
            "type": "integer",
            "format": "unix timestamp",
            "description": "The last date-time the snippet was updated.",
            "readOnly": true
          }
        },
        "example": {
          "name": "address",
          "value": "<strong>My Company</strong></br>1234 Fake St<br/>Fake,NY<br/>10111",
          "updated_at": 1582500000
        }
      },
      "senderIdentityObject": {
        "type": "object",
        "description": "Information about a sender.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The identifier of a sender."
          },
          "deduplicate_id": {
            "$ref": "#/components/schemas/deduplicate_id"
          },
          "name": {
            "type": "string",
            "description": "The name of the sender."
          },
          "email": {
            "type": "string",
            "description": "The email address of the sender."
          },
          "address": {
            "type": "string",
            "description": "The sender name and email address in the format `name <name@example.com>`."
          },
          "template_type": {
            "type": "string",
            "enum": [
              "email",
              "phone"
            ],
            "description": "The type of sender."
          },
          "auto_generated": {
            "type": "boolean",
            "description": "If true, the sender is automatically generated by Customer.io."
          }
        },
        "example": {
          "id": 4534,
          "deduplicate_id": "4534:1478035647",
          "name": "Cher Ami",
          "email": "test@example.com",
          "address": "Cher Ami <test@example.com>",
          "template_type": "email",
          "auto_generated": false
        }
      },
      "export_id": {
        "type": "integer",
        "description": "The identifier for the export.",
        "example": 110
      },
      "export_type": {
        "type": "string",
        "description": "The type of information contained in the export.",
        "enum": [
          "customers",
          "deliveries"
        ],
        "example": "customers"
      },
      "export_failed": {
        "type": "boolean",
        "description": "If true, the export was unsuccessful.",
        "example": false
      },
      "export_description": {
        "type": "string",
        "description": "A description of the export.",
        "example": "Customers with segment filters—in Purchased Flowers"
      },
      "export_downloads": {
        "type": "integer",
        "description": "Counts the total number of times the export has been downloaded.",
        "example": 2
      },
      "metric": {
        "description": "Determines the metric(s) you want to return.",
        "type": "string",
        "enum": [
          "created",
          "attempted",
          "sent",
          "delivered",
          "opened",
          "clicked",
          "converted",
          "bounced",
          "spammed",
          "unsubscribed",
          "dropped",
          "failed",
          "undeliverable"
        ]
      },
      "start": {
        "description": "The unix timestamp representing the beginning of the export.",
        "type": "integer",
        "format": "unix timestamp",
        "example": 1517529600
      },
      "end": {
        "description": "The unix timestamp representing the end of the export.",
        "type": "integer",
        "format": "unix timestamp",
        "example": 1517702400
      },
      "drafts": {
        "description": "If true, your request returns both drafts and active/sent messages.",
        "type": "boolean"
      },
      "exportObject": {
        "type": "object",
        "description": "Metadata about an export.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/export_id"
          },
          "user_id": {
            "type": "integer",
            "description": "The user who created the export."
          },
          "user_email": {
            "type": "string",
            "description": "The email of the user who created the export."
          },
          "total": {
            "type": "integer",
            "description": "The number of entries in the export. Exports report 0 until done."
          },
          "deduplicate_id": {
            "$ref": "#/components/schemas/deduplicate_id"
          },
          "type": {
            "$ref": "#/components/schemas/export_type"
          },
          "failed": {
            "$ref": "#/components/schemas/export_failed"
          },
          "description": {
            "$ref": "#/components/schemas/export_description"
          },
          "downloads": {
            "$ref": "#/components/schemas/export_downloads"
          },
          "created_at": {
            "$ref": "#/components/schemas/created"
          },
          "updated_at": {
            "$ref": "#/components/schemas/updated"
          },
          "status": {
            "type": "string",
            "enum": [
              "done",
              "pending",
              "failed"
            ],
            "description": "The state of your export where `done` indicates an export that you can download, `pending`, indicates that your export is not ready to download, and `failed` indicates an export that has failed and will not be downloadable."
          }
        },
        "example": {
          "id": 110,
          "user_id": 0,
          "user_email": "person@email.com",
          "total": 1234,
          "deduplicate_id": "110:1530296738",
          "type": "customers",
          "failed": false,
          "status": "done",
          "description": "Customers with segment filters—in \\Purchased Flowers\\",
          "downloads": 2,
          "created_at": 1530296738,
          "updated_at": 1530296738
        }
      },
      "variant_id": {
        "type": "integer",
        "description": "The identifier of a newsletter variant—a language in a multi-language newsletter or a test in an A/B test.",
        "readOnly": true
      },
      "subscription_topic_id": {
        "type": "integer",
        "description": "The identifier of a subscription topic. Remember, subscription topics are assigned an incrementing number, starting at 1.",
        "example": 1
      },
      "newsletterObject": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/newsletter_id"
          },
          "deduplicate_id": {
            "$ref": "#/components/schemas/deduplicate_id"
          },
          "content_ids": {
            "type": "array",
            "description": "A list of messages contained by a newsletter. If your newsletter includes a list of languages and/or A/B test variants, the array contains a content ID for each language/variant. [Look up a newsletter variant](#operation/getNewsletterVariant) to get more information about an individual content ID.",
            "items": {
              "type": "integer"
            }
          },
          "name": {
            "type": "string",
            "description": "The name of the newsletter.",
            "readOnly": true
          },
          "sent_at": {
            "type": "integer",
            "format": "unix timestamp",
            "description": "The last time the newsletter was sent."
          },
          "created": {
            "$ref": "#/components/schemas/created"
          },
          "updated": {
            "$ref": "#/components/schemas/updated"
          },
          "type": {
            "type": "string",
            "description": "The type of newsletter—`email`, `twilio`, etc.",
            "enum": [
              "email",
              "webhook",
              "twilio",
              "slack",
              "push",
              "in_app"
            ]
          },
          "tags": {
            "type": "array",
            "description": "An array of tags you set on this newsletter.",
            "items": {
              "type": "string"
            }
          },
          "recipient_segment_ids": {
            "description": "A list of segments used in a newsletter's recipient filter, returned if newsletter recipients were filtered by one or more segments.",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "subscription_topic_id": {
            "$ref": "#/components/schemas/subscription_topic_id"
          }
        },
        "example": {
          "id": 128275,
          "deduplicate_id": "128275:1484870424",
          "type": "email",
          "content_ids": [
            45,
            90
          ],
          "name": "Example Newsletter",
          "sent_at": null,
          "created": 1481653929,
          "updated": 1484870424,
          "tags": [
            "Example Tag"
          ],
          "recipient_segment_ids": [
            10
          ],
          "subscription_topic_id": 1
        }
      },
      "customer_events": {
        "description": "Describes the customer events reported from Customer.io to a webhook.",
        "type": "object",
        "properties": {
          "customer_subscribed": {
            "type": "boolean",
            "description": "A person's `unsubscribed` attribute was explicitly set to `false`. Set to true to report `subscribed` events."
          },
          "customer_unsubscribed": {
            "type": "boolean",
            "description": "A person's `unsubscribed` attribute was explicitly set to `true`. Set to true to report `unsubscribed` events."
          },
          "customer_subscription_preferences_changed": {
            "type": "boolean",
            "description": "A person's subscription preferences changed. [Learn more about the subscription center](/subscription-center/)."
          }
        }
      },
      "email_events": {
        "type": "object",
        "description": "Describes the email events reported from Customer.io to a webhook.",
        "properties": {
          "email_attempted": {
            "type": "boolean",
            "description": "Reports when a message cannot be sent to the delivery provider and will retry. Set to true to report this event type."
          },
          "email_bounced": {
            "type": "boolean",
            "description": "Reports when the delivery provider is unable to deliver a message. Set to true to report this event type."
          },
          "email_clicked": {
            "type": "boolean",
            "description": "Reports when a person clicks a tracked link in a message. Set to true to report this event type."
          },
          "email_converted": {
            "type": "boolean",
            "description": "Reports a conversion. Set to true to report this event type."
          },
          "email_deferred": {
            "type": "boolean",
            "description": "Reports when the delivery provider couldn't send a message and will retry. Set to true to report this event type."
          },
          "email_delivered": {
            "type": "boolean",
            "description": "Reports when the delivery provider reports that a message is delivered to an inbox. Set to true to report this event type."
          },
          "email_drafted": {
            "type": "boolean",
            "description": "Reports when a message draft is created. Set to true to report this event type."
          },
          "email_dropped": {
            "type": "boolean",
            "description": "Reports when a message isn't sent because the recipient is suppressed. Set to true to report this event type."
          },
          "email_failed": {
            "type": "boolean",
            "description": "Reports when an email couldn't be sent to the delivery provider. Set to true to report this event type."
          },
          "email_opened": {
            "type": "boolean",
            "description": "Reports when a recipient opens a message. Set to true to report this event type."
          },
          "email_sent": {
            "type": "boolean",
            "description": "Reports when a message is sent from Customer.io to the delivery provider. Set to true to report this event type."
          },
          "email_spammed": {
            "type": "boolean",
            "description": "Reports a recipient marks a message as spam. Set to true to report this even type."
          },
          "email_unsubscribed": {
            "type": "boolean",
            "description": "Reports when a person unsubscribes through a particular email. Set to true to report this event type."
          }
        }
      },
      "push_events": {
        "type": "object",
        "description": "Describes the push events reported from Customer.io to a webhook.",
        "properties": {
          "push_attempted": {
            "type": "boolean",
            "description": "Reports when a push notification could not be sent to the delivery provider will retry. Set to true to report this event type."
          },
          "push_bounced": {
            "type": "boolean",
            "description": "Reports when the delivery provider is unable to deliver a message. Set to true to report this event type."
          },
          "push_clicked": {
            "type": "boolean",
            "description": "Reports when a person clicks a tracked link in a message. Set to true to report this event type."
          },
          "push_converted": {
            "type": "boolean",
            "description": "Reports a conversion. Set to true to report this event type."
          },
          "push_delivered": {
            "type": "boolean",
            "description": "An app reports that the recipient's device received a message. Set to true to report this event type."
          },
          "push_drafted": {
            "type": "boolean",
            "description": "Reports when a message draft is created. Set to true to report this event type."
          },
          "push_dropped": {
            "type": "boolean",
            "description": "Reports when a message isn't sent because the recipient is suppressed. Set to true to report this event type."
          },
          "push_failed": {
            "type": "boolean",
            "description": "Reports when a message couldn't be sent to the delivery provider. Set to true to report this event type."
          },
          "push_opened": {
            "type": "boolean",
            "description": "The app on a recipient's device reports that the recipient opened the message. Set to true to report this event type."
          },
          "push_sent": {
            "type": "boolean",
            "description": "Reports when a message is sent from Customer.io to the delivery provider. Set to true to report this event type."
          }
        }
      },
      "sms_events": {
        "type": "object",
        "description": "Describes the SMS events reported from Customer.io to a webhook.",
        "properties": {
          "sms_attempted": {
            "type": "boolean",
            "description": "Reports when a push notification could not be sent to the delivery provider will retry. Set to true to report this event type."
          },
          "sms_bounced": {
            "type": "boolean",
            "description": "Reports when the delivery provider is unable to deliver a message to the recipient. Set to true to report this event type."
          },
          "sms_clicked": {
            "type": "boolean",
            "description": "Reports when a person clicks a tracked link in a message. Set to true to report this event type."
          },
          "sms_converted": {
            "type": "boolean",
            "description": "Reports when a person matches a conversion goal attributed to a a message. Set to true to report this event type."
          },
          "sms_delivered": {
            "type": "boolean",
            "description": "The delivery provider reports that the message is delivered. Set to true to report this event type."
          },
          "sms_drafted": {
            "type": "boolean",
            "description": "Reports when a message draft is created. Set to true to report this event type."
          },
          "sms_failed": {
            "type": "boolean",
            "description": "Reports when a message couldn't be sent to the delivery provider. Set to true to report this event type."
          },
          "sms_sent": {
            "type": "boolean",
            "description": "Reports when a message is sent from Customer.io to the delivery provider. Set to true to report this event type."
          }
        }
      },
      "slack_events": {
        "type": "object",
        "description": "Describes the slack events reported from Customer.io to a webhook.",
        "properties": {
          "slack_attempted": {
            "type": "boolean",
            "description": "Reports when a message could not be sent to the delivery provider will retry. Set to true to report this event type."
          },
          "slack_clicked": {
            "type": "boolean",
            "description": "Reports when a person clicks a tracked link in a message. Set to true to report this event type."
          },
          "slack_converted": {
            "type": "boolean",
            "description": "Reports when a person matches a conversion goal attributed to a a message. Set to true to report this event type."
          },
          "slack_drafted": {
            "type": "boolean",
            "description": "Reports when a message draft is created. Set to true to report this event type."
          },
          "slack_failed": {
            "type": "boolean",
            "description": "Reports when a message couldn't be sent to the delivery provider. Set to true to report this event type."
          },
          "slack_sent": {
            "type": "boolean",
            "description": "Reports when a message is sent from Customer.io to the delivery provider. Set to true to report this event type."
          }
        }
      },
      "webhook_events": {
        "type": "object",
        "description": "Describes the webhook events reported from Customer.io to a webhook.",
        "properties": {
          "webhook_attempted": {
            "type": "boolean",
            "description": "Reports when a webhook could not be sent and will retry. Set to true to report this event type."
          },
          "webhook_clicked": {
            "type": "boolean",
            "description": "Reports when a tracked link in a webhook payload is opened. Set to true to report this event type."
          },
          "webhook_drafted": {
            "type": "boolean",
            "description": "A webhook draft is created. Set to true to report this event type."
          },
          "webhook_failed": {
            "type": "boolean",
            "description": "Reports when a webhook couldn't be sent to the webhook URL. Set to true to report this event type."
          },
          "webhook_sent": {
            "type": "boolean",
            "description": "Reports when a webhook is sent from Customer.io to the webhook URL. Set to true to report this event type."
          }
        }
      },
      "body_content": {
        "type": "string",
        "description": "If your reporting webhook includes content (the *Body Content* box is checked) and the `metric` is `sent, this contains the body of the messages. If the message is an email, this also contains email headers. For push and in-app messages, this is the stringified payload for your message."
      },
      "reportingWebhook": {
        "type": "object",
        "required": [
          "name",
          "endpoint",
          "events"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of your webhook.",
            "example": "my cool webhook"
          },
          "id": {
            "type": "integer",
            "description": "The identifier for the webhook.",
            "readOnly": true,
            "example": 4
          },
          "endpoint": {
            "type": "string",
            "format": "url",
            "description": "The webhook URL.",
            "example": "https://example.com/webhook"
          },
          "disabled": {
            "type": "boolean",
            "description": "Set to `true` to quit sending events to the webhook URL. Set to `false` to enable the webhook.",
            "example": false
          },
          "full_resolution": {
            "type": "boolean",
            "description": "Set to `false` to send unique open and click events to the webhook. Set to `true` to send all events.",
            "default": false,
            "example": true
          },
          "with_content": {
            "type": "boolean",
            "description": "Set to `true` to include the message `body` in `_sent` events.",
            "example": false
          },
          "events": {
            "description": "Specifies the types of events you want to report to your webhook. See our [reporting webhooks reference](/api/webhooks/#operation/reportingWebhook) for more information about event types and the information they return.",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "customer_subscribed",
                "customer_unsubscribed",
                "customer_subscription_preferences_changed",
                "email_drafted",
                "email_attempted",
                "email_sent",
                "email_delivered",
                "email_opened",
                "email_clicked",
                "email_converted",
                "email_bounced",
                "email_dropped",
                "email_deferred",
                "email_spammed",
                "email_failed",
                "email_unsubscribed",
                "email_undeliverable",
                "push_drafted",
                "push_attempted",
                "push_sent",
                "push_delivered",
                "push_opened",
                "push_clicked",
                "push_converted",
                "push_bounced",
                "push_dropped",
                "push_failed",
                "push_undeliverable",
                "slack_drafted",
                "slack_attempted",
                "slack_sent",
                "slack_clicked",
                "slack_converted",
                "slack_failed",
                "sms_drafted",
                "sms_attempted",
                "sms_sent",
                "sms_delivered",
                "sms_clicked",
                "sms_converted",
                "sms_bounced",
                "sms_failed",
                "sms_undeliverable",
                "webhook_drafted",
                "webhook_attempted",
                "webhook_sent",
                "webhook_clicked",
                "webhook_converted",
                "webhook_failed",
                "webhook_undeliverable"
              ]
            },
            "example": [
              "email_failed",
              "webhook_failed"
            ]
          }
        }
      },
      "url": {
        "type": "string",
        "description": "The URL of a webhook or action.",
        "example": "https://example.com/webhook"
      },
      "request_method": {
        "type": "string",
        "description": "The method used in conjunction with a webhook `url`.",
        "enum": [
          "GET",
          "POST",
          "PUT",
          "DELETE",
          "PATCH"
        ],
        "example": "POST"
      },
      "forgotten": {
        "type": "boolean",
        "description": "If true, Customer.io does not retain the message content.",
        "example": false
      },
      "archivedMessageObject": {
        "description": "An archived message, including a complete message body.\n",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/message_id"
          },
          "body": {
            "type": "string",
            "description": "The body of the variant. You cannot modify the body if you created it with our drag-and-drop editor.",
            "example": "<!DOCTYPE html><html><head>\\n<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\"/><h1>Hello World</h1>\\n\\n</body></html>"
          },
          "from": {
            "$ref": "#/components/schemas/from"
          },
          "reply_to": {
            "$ref": "#/components/schemas/reply_to"
          },
          "recipient": {
            "description": "The recipient address for an action.",
            "type": "string",
            "example": "person@example.com"
          },
          "subject": {
            "$ref": "#/components/schemas/subject"
          },
          "bcc": {
            "$ref": "#/components/schemas/bcc"
          },
          "fake_bcc": {
            "$ref": "#/components/schemas/fake_bcc"
          },
          "preheader_text": {
            "$ref": "#/components/schemas/preheader_text"
          },
          "url": {
            "$ref": "#/components/schemas/url"
          },
          "request_method": {
            "$ref": "#/components/schemas/request_method"
          },
          "headers": {
            "$ref": "#/components/schemas/headers"
          },
          "forgotten": {
            "$ref": "#/components/schemas/forgotten"
          }
        }
      },
      "commonTriggerProps": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Contains information you want to use to populate your broadcast.",
            "additionalProperties": {
              "x-additionalPropertiesName": "Broadcast liquid data",
              "description": "Insert key-values that you want to reference in your message here."
            },
            "example": {
              "headline": "Roadrunner spotted in Albuquerque!",
              "date": 1511315635,
              "text": "We received reports of a roadrunner in your immediate area! Head to your dashboard to view more information!"
            }
          },
          "email_add_duplicates": {
            "type": "boolean",
            "default": false,
            "description": "an email address associated with more than one profile id is an error."
          },
          "email_ignore_missing": {
            "type": "boolean",
            "default": false,
            "description": "If false a missing email address is an error."
          },
          "id_ignore_missing": {
            "type": "boolean",
            "default": false,
            "description": "If false, a missing customer ID is an error."
          }
        }
      },
      "campaignRequest": {
        "oneOf": [
          {
            "title": "Default audience",
            "description": "Send your broadcast to the default set of recipients defined in the UI.",
            "$ref": "#/components/schemas/commonTriggerProps"
          },
          {
            "title": "Custom recipients",
            "description": "Send your broadcast to a group of people defined by a set of filters.",
            "allOf": [
              {
                "type": "object",
                "required": [
                  "recipients"
                ],
                "properties": {
                  "recipients": {
                    "description": "A filter defining the group of people that you want send the broadcast to.",
                    "$ref": "#/components/schemas/audienceFilter"
                  }
                }
              },
              {
                "$ref": "#/components/schemas/commonTriggerProps"
              }
            ],
            "example": {
              "recipients": {
                "and": [
                  {
                    "segment": {
                      "id": 3
                    }
                  },
                  {
                    "or": [
                      {
                        "attribute": {
                          "field": "interest",
                          "operator": "eq",
                          "value": "roadrunners"
                        }
                      },
                      {
                        "attribute": {
                          "field": "state",
                          "operator": "eq",
                          "value": "NM"
                        }
                      },
                      {
                        "not": {
                          "attribute": {
                            "field": "species",
                            "operator": "eq",
                            "value": "roadrunners"
                          }
                        }
                      }
                    ]
                  }
                ]
              },
              "data": {
                "headline": "Roadrunner spotted in Albuquerque!",
                "date": 1511315635,
                "text": "We received reports of a roadrunner in your immediate area! Head to your dashboard to view more information!"
              }
            }
          },
          {
            "title": "Emails",
            "description": "An array of emails you want to send the broadcast to. These addresses must already exist; your request cannot create a new person.",
            "allOf": [
              {
                "type": "object",
                "required": [
                  "emails"
                ],
                "properties": {
                  "emails": {
                    "description": "An array of email addresses you want to send the broadcast to. These addresses must already exist; your request cannot create a new person.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "email"
                    },
                    "example": [
                      "recipient1@example.com",
                      "anotherRecipient@example.com"
                    ]
                  }
                }
              },
              {
                "$ref": "#/components/schemas/commonTriggerProps"
              }
            ]
          },
          {
            "title": "IDs",
            "description": "An array of customer ids that you want to send the broadcast to. These IDs must already exist; your request cannot create a new person.",
            "allOf": [
              {
                "type": "object",
                "required": [
                  "ids"
                ],
                "properties": {
                  "ids": {
                    "description": "An array of IDs you want to send a broadcast to. **NOTE**: If your workspace identifies people by `email`, don't use this option. Identify your audience by `emails` instead.\n",
                    "type": "array",
                    "maxItems": 10000,
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "id1",
                      "id4"
                    ]
                  }
                }
              },
              {
                "$ref": "#/components/schemas/commonTriggerProps"
              }
            ]
          },
          {
            "title": "User Maps",
            "description": "An array of JSON objects containing `id` or `email` keys and a `data` key. Each object represents a person you want to send the broadcast to and data you want to personalize their message with using liquid.",
            "allOf": [
              {
                "type": "object",
                "required": [
                  "per_user_data"
                ],
                "properties": {
                  "per_user_data": {
                    "description": "An array of people you want to send a broadcast to and custom data for each person. Each object in the array represents a person, with additional data you want to use to personalize their message. **When you trigger a broadcast, the people in your request must already exist in your workspace.** Requests to trigger a broadcast cannot create new people.\n",
                    "type": "array",
                    "maxItems": 10000,
                    "items": {
                      "oneOf": [
                        {
                          "title": "ids",
                          "type": "object",
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The ID of the recipient.",
                              "example": 1
                            },
                            "data": {
                              "type": "object",
                              "description": "Merge data associated with the recipient.",
                              "additionalProperties": {
                                "x-additionalPropertiesName": "Liquid merge data",
                                "description": "Insert key-values that you want to reference in your message here."
                              },
                              "example": {
                                "firstName": "Hugh",
                                "lastName": "Mann",
                                "purchase": "shoes"
                              }
                            }
                          }
                        },
                        {
                          "title": "emails",
                          "type": "object",
                          "required": [
                            "email"
                          ],
                          "properties": {
                            "email": {
                              "type": "string",
                              "description": "The email address of the recipient. This address must be unique in your workspace. If more than one person has the same `email` attribute, your request will produce an error.",
                              "example": "recipient1@example.com"
                            },
                            "data": {
                              "description": "Merge data associated with the recipient.",
                              "type": "object",
                              "additionalProperties": {
                                "x-additionalPropertiesName": "Liquid merge data",
                                "description": "Insert key-values that you want to reference in your message here."
                              },
                              "example": {
                                "firstName": "Hugh",
                                "lastName": "Mann",
                                "purchase": "shoes"
                              }
                            }
                          }
                        }
                      ]
                    },
                    "example": [
                      {
                        "id": "wiley_coyote",
                        "data": {
                          "voucher_code": "FESwYm"
                        }
                      },
                      {
                        "email": "road@runner.net",
                        "data": {
                          "voucher_code": "cYm6XJ"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "$ref": "#/components/schemas/commonTriggerProps"
              }
            ]
          },
          {
            "title": "Data file URL",
            "description": "The URL of a data file containing per-user data, each line containing a json map with either `id` and `data` or `email` and `data` keys. **When you trigger a broadcast, the people represented by `id` and `email` must already exist in your workspace.** Requests to trigger a broadcast cannot create new people.\n",
            "allOf": [
              {
                "type": "object",
                "required": [
                  "data_file_url"
                ],
                "properties": {
                  "data_file_url": {
                    "description": "The URL of a data file containing per-user data. Each line is a single object representing a person: either a json map of `id` and `data` or `email` and `data` keys. For example, `{\"email\":\"road@runner.net\",\"data\":{\"voucher_code\": \"coyote\"}}`.\n\nThe IDs or emails in your data file must already exist in your workspace. Your broadcast cannot add new people to your workspace and won't send messages for IDs or email addresses that don't match a person in your workspace.\n",
                    "type": "string",
                    "format": "url",
                    "example": "https://myFile.example.com"
                  }
                }
              },
              {
                "$ref": "#/components/schemas/commonTriggerProps"
              }
            ]
          }
        ]
      },
      "customer_id": {
        "type": "string",
        "description": "The ID of a customer profile, analogous to a \"person\" in the UI. If your workspace supports multiple identifiers (email and ID), this value can be null.",
        "nullable": true,
        "example": "42"
      },
      "object_type_id": {
        "type": "string",
        "description": "The object type an object belongs to—like \"Companies\" or \"Accounts\". Object type IDs are string-formatted integers that begin at `1` and increment for each new type.",
        "nullable": false,
        "example": "1"
      },
      "object_identifiers": {
        "type": "object",
        "properties": {
          "identifiers": {
            "description": "The identifiers for a particular object. You can use either the `object_type_id` and `object_id` (where `object_type_id` represents the type of object and the `object_id` is the individual identifier for the object) or the `cio_object_id`.",
            "oneOf": [
              {
                "title": "Object ID",
                "type": "object",
                "required": [
                  "object_type_id",
                  "object_id"
                ],
                "properties": {
                  "object_type_id": {
                    "$ref": "#/components/schemas/object_type_id"
                  },
                  "object_id": {
                    "type": "string",
                    "description": "The unique identifier for an object. If you use an `object_id` that already exists, we'll update the object accordingly.",
                    "nullable": false,
                    "example": "acme"
                  }
                }
              },
              {
                "title": "CIO Object ID",
                "type": "object",
                "required": [
                  "cio_object_id"
                ],
                "properties": {
                  "cio_object_id": {
                    "type": "string",
                    "description": "A unique value that Customer.io sets for an object when you create it. This ID is immutable.",
                    "example": "obb7fd050101"
                  }
                }
              }
            ]
          }
        }
      },
      "not_nullable_customer_id": {
        "type": "string",
        "description": "The ID of a customer profile, analogous to a \"person\" in the UI.",
        "example": "42"
      },
      "not_nullable_email_address": {
        "type": "string",
        "description": "The email address of the customer.",
        "example": "test@example.com"
      },
      "email_address": {
        "type": "string",
        "description": "The email address of the customer.",
        "nullable": true,
        "example": "test@example.com"
      },
      "device_id": {
        "type": "string",
        "description": "The identifier for a person's device—typically a device token."
      },
      "created": {
        "type": "integer",
        "format": "unix timestamp",
        "description": "The date time when the referenced ID was created.",
        "example": 1552341937,
        "readOnly": true
      },
      "updated": {
        "type": "integer",
        "format": "unix timestamp",
        "description": "The date time when the referenced ID was last updated.",
        "example": 1552341937,
        "readOnly": true
      },
      "segment_id": {
        "type": "integer",
        "description": "The identifier for a segment.",
        "example": 7
      },
      "deduplicate_id": {
        "type": "string",
        "readOnly": true,
        "description": "An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.",
        "example": "15:1492548073"
      },
      "segment_name": {
        "type": "string",
        "description": "The name of the segment.",
        "example": "Manual Segment 1"
      },
      "segment_description": {
        "type": "string",
        "description": "A description for the segment. This can help you understand the purpose of the segment when you encounter it in other requests or in the UI.",
        "example": "My first manual segment"
      },
      "segmentResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/segment_id"
          },
          "deduplicate_id": {
            "$ref": "#/components/schemas/deduplicate_id"
          },
          "name": {
            "$ref": "#/components/schemas/segment_name"
          },
          "description": {
            "$ref": "#/components/schemas/segment_description"
          },
          "state": {
            "type": "string",
            "description": "The state of the segment.\n\n`events` - currently handling event conditions for this segment\n\n`build` - currently handling profile attribute conditions for this segment\n\n`events_queued` - waiting for a process to start handling event conditions for this segment\n\n`build_queued` - waiting for a process to start handling profile attribute conditions for this segment\n\n`finished` - the segment is finished building\n",
            "enum": [
              "events",
              "build",
              "events_queued",
              "build_queued",
              "finished"
            ]
          },
          "progress": {
            "type": "integer",
            "nullable": true,
            "description": "If Customer.io has not finished processing the segment, this indicates the percentage complete. Otherwise, this key is null.",
            "example": null
          },
          "type": {
            "type": "string",
            "description": "The type of segment.",
            "enum": [
              "dynamic",
              "manual"
            ],
            "example": "manual"
          },
          "tags": {
            "type": "array",
            "description": "The tags assigned to the segment, if any. Tags may help you sort through your segments.",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "example": null
          }
        }
      },
      "broadcast_id": {
        "type": "integer",
        "description": "The identifier for a broadcast.",
        "example": 2
      },
      "msg_template_ids": {
        "type": "array",
        "deprecated": true,
        "description": "Indicates the message template(s) used in this broadcast.",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The identifier for the template."
            },
            "type": {
              "type": "string",
              "description": "The type of template.",
              "enum": [
                "email",
                "webhook",
                "push",
                "sms",
                "slack"
              ]
            }
          }
        }
      },
      "broadcastTriggerObject": {
        "type": "object",
        "description": "You can get triggers to know when you triggered a broadcast and whether or not it's been processed.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The identifier for a broadcast trigger."
          },
          "broadcast_id": {
            "$ref": "#/components/schemas/broadcast_id"
          },
          "created_at": {
            "$ref": "#/components/schemas/created"
          },
          "processed_at": {
            "type": "integer",
            "format": "unix timestamp",
            "description": "The date-time when Customer.io processed the trigger."
          }
        }
      },
      "broadcastObject": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/broadcast_id"
          },
          "deduplicate_id": {
            "$ref": "#/components/schemas/deduplicate_id"
          },
          "name": {
            "type": "string",
            "description": "The name of the broadcast.",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "The type of broadcast.",
            "enum": [
              "triggered_broadcast"
            ]
          },
          "created": {
            "$ref": "#/components/schemas/created"
          },
          "updated": {
            "$ref": "#/components/schemas/updated"
          },
          "active": {
            "type": "boolean",
            "description": "If true, the broadcast is active."
          },
          "state": {
            "type": "string",
            "description": "The state of the broadcast.",
            "enum": [
              "running",
              "draft"
            ]
          },
          "actions": {
            "type": "array",
            "description": "A list of actions used by the broadcast.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The identifier for the action."
                },
                "type": {
                  "type": "string",
                  "description": "The type of action.",
                  "enum": [
                    "email",
                    "webhook",
                    "push",
                    "sms",
                    "slack"
                  ]
                }
              }
            }
          },
          "msg_template_ids": {
            "$ref": "#/components/schemas/msg_template_ids"
          },
          "first_started": {
            "type": "integer",
            "format": "unix timestamp",
            "description": "The date and time when you activated the broadcast.",
            "example": 1552341937
          },
          "tags": {
            "type": "array",
            "description": "An array of tags you set on this broadcast.",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "id": 2,
          "deduplicate_id": "2:1520467200",
          "created": 1520467200,
          "type": "triggered_broadcast",
          "updated": 1520467200,
          "name": "basic",
          "active": true,
          "state": "running",
          "actions": [
            {
              "id": 3,
              "type": "email"
            },
            {
              "id": 4
            },
            {
              "type": "webhook"
            }
          ],
          "tags": "nil",
          "first_started": 1520467200,
          "created_by": "ExamplePerson"
        }
      },
      "sendpush": {
        "description": "The payload of a transactional push message.",
        "allOf": [
          {
            "type": "object",
            "required": [
              "transactional_message_id"
            ],
            "properties": {
              "transactional_message_id": {
                "description": "The transactional message template that you want to use for your message. You can call the template by its numerical ID or by the *Trigger Name* that you assigned the template (case insensitive).",
                "oneOf": [
                  {
                    "title": "ID (integer)",
                    "type": "integer",
                    "description": "The ID of the transactional message you want to send.",
                    "example": 44
                  },
                  {
                    "title": "Trigger Name (string)",
                    "type": "string",
                    "description": "The name of trigger for the transactional message you want to send; you set the trigger name in the *Configure Settings* step when setting up your message. This is case insensitive.",
                    "example": "pwdreset"
                  }
                ]
              }
            }
          },
          {
            "$ref": "#/components/schemas/transactionalSharedPushObject"
          },
          {
            "$ref": "#/components/schemas/transactionalSharedObject"
          }
        ],
        "example": {
          "transactional_message_id": 44,
          "title": "Did you really login from a new location?",
          "identifiers": {
            "id": 12345
          },
          "message_data": {
            "password_reset_token": "abcde-12345-fghij-d888",
            "account_id": "123dj"
          }
        }
      },
      "sendemail": {
        "description": "The payload of a transactional message.",
        "oneOf": [
          {
            "title": "With template",
            "description": "Send a transactional message using a template that you set up in Customer.io.",
            "allOf": [
              {
                "type": "object",
                "required": [
                  "transactional_message_id"
                ],
                "properties": {
                  "transactional_message_id": {
                    "description": "The transactional message template that you want to use for your message. You can call the template by its numerical ID or by the *Trigger Name* that you assigned the template (case insensitive).",
                    "oneOf": [
                      {
                        "title": "ID (integer)",
                        "type": "integer",
                        "description": "The ID of the transactional message you want to send.",
                        "example": 44
                      },
                      {
                        "title": "Trigger Name (string)",
                        "type": "string",
                        "description": "The name of trigger for the transactional message you want to send; you set the trigger name in the *Configure Settings* step when setting up your message. This is case insensitive.",
                        "example": "pwdreset"
                      }
                    ]
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The HTML body of your message. This overrides the body of the transactional template (referenced by `transactional_message_id`). If you send an AMP-enabled email (with `body_amp`), and the recipient's email client doesn't support AMP, this is the fallback email."
                  },
                  "body_amp": {
                    "$ref": "#/components/schemas/body_amp"
                  },
                  "body_plain": {
                    "type": "string",
                    "description": "The plaintext body of your message. This overrides the body of your transactional template (referenced by `transactional_message_id`)."
                  },
                  "subject": {
                    "type": "string",
                    "description": "The subject line for your message. This overrides the subject of the transactional template (referenced by `transactional_message_id`)."
                  },
                  "from": {
                    "type": "string",
                    "description": "The address that your email is from. This address must be verified by Customer.io. This overrides the from address set within the transactional template (referenced by `transactional_message_id`). You can include a display/friendly name in your from address, but we recommend that you use quotation marks around the friendly name to avoid potential issues with special characters, e.g. `\\\"Person\\\" <person@example.com>`.",
                    "example": "support@example.com"
                  },
                  "language": {
                    "type": "string",
                    "description": "Overrides language preferences for the person you want to send your transactional message to. Use one of our [supported two- or four-letter language codes](/localization-getting-started/#supported-languages)."
                  }
                }
              },
              {
                "$ref": "#/components/schemas/transactionalSharedObject"
              },
              {
                "$ref": "#/components/schemas/transactionalSharedEmailObject"
              }
            ],
            "example": {
              "transactional_message_id": 44,
              "to": "cool.person@example.com",
              "from": "override-templated-address@example.com",
              "subject": "Order receipt",
              "identifiers": {
                "email": "cool.person@example.com"
              },
              "message_data": {
                "password_reset_token": "abcde-12345-fghij-d888",
                "account_id": "123dj"
              },
              "attachments": {
                "file1.csv": "base64encodedcontent",
                "file2.pdf": "base64encodedcontent"
              },
              "headers": {
                "X-Mailgun-Tag": "my-cool-tag"
              },
              "bcc": "bcc@example.com",
              "disable_message_retention": false,
              "send_to_unsubscribed": true,
              "tracked": true,
              "queue_draft": false,
              "disable_css_preprocessing": true
            }
          },
          {
            "title": "Without template",
            "description": "Create your own message from scratch.",
            "allOf": [
              {
                "type": "object",
                "required": [
                  "body",
                  "subject",
                  "from"
                ],
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The body of your message.",
                    "example": "Your temporary password is {{message_data.password_reset_token}}"
                  },
                  "subject": {
                    "type": "string",
                    "description": "The subject line for your message.",
                    "example": "Reset your password!"
                  },
                  "from": {
                    "type": "string",
                    "description": "The address that your email is from. This address must be verified by Customer.io. You can include a display/friendly name in your from address in the format `Person <person@example.com>`.",
                    "example": "support@example.com"
                  }
                }
              },
              {
                "$ref": "#/components/schemas/transactionalSharedObject"
              },
              {
                "$ref": "#/components/schemas/transactionalSharedEmailObject"
              }
            ],
            "example": {
              "from": "Support <support@example.com>",
              "subject": "Your password reset request!",
              "body": "Your temporary password is {{message_data.password_reset_token}}",
              "to": "cool.person@example.com",
              "identifiers": {
                "id": 12345
              },
              "message_data": {
                "password_reset_token": "abcde-12345-fghij-d888",
                "account_id": "123dj"
              },
              "headers": {
                "X-Mailgun-Tag": "my-cool-tag"
              },
              "bcc": "bcc@example.com",
              "disable_message_retention": false,
              "send_to_unsubscribed": true,
              "tracked": true,
              "queue_draft": false,
              "disable_css_preprocessing": true
            }
          }
        ]
      },
      "sendsms": {
        "description": "The payload of a transactional SMS.",
        "allOf": [
          {
            "type": "object",
            "required": [
              "transactional_message_id"
            ],
            "properties": {
              "transactional_message_id": {
                "description": "The transactional message template that you want to use for your message. You can call the template by its numerical ID or by the *Trigger Name* that you assigned the template (case insensitive).",
                "oneOf": [
                  {
                    "title": "ID (integer)",
                    "type": "integer",
                    "description": "The ID of the transactional message you want to send.",
                    "example": 44
                  },
                  {
                    "title": "Trigger Name (string)",
                    "type": "string",
                    "description": "The name of trigger for the transactional message you want to send; you set the trigger name in the *Configure Settings* step when setting up your message. This is case insensitive.",
                    "example": "verification_code"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "to"
            ],
            "properties": {
              "to": {
                "type": "string",
                "description": "The phone number you want to send your SMS to. Phone numbers must be in E.164 format (e.g., +15551234567), but you can also use liquid syntax if you store users phone numbers as attributes; you don't have to pass an E.164 formatted phone number in the call.",
                "example": "{{customer.phone}}"
              },
              "from": {
                "type": "string",
                "description": "The phone number or sender ID that your SMS is from. This must be a verified phone number in your Twilio account. This overrides the from address set within the transactional template (referenced by `transactional_message_id`). Phone numbers must be in E.164 format (e.g., +15551234567).",
                "example": "+15551234567"
              },
              "language": {
                "type": "string",
                "description": "Overrides language preferences for the person you want to send your transactional message to. Use one of our [supported two- or four-letter language codes](/localization-getting-started/#supported-languages)."
              }
            }
          },
          {
            "$ref": "#/components/schemas/transactionalSharedObject"
          }
        ],
        "example": {
          "transactional_message_id": "confirmation code",
          "to": "+15559876543",
          "from": "+15551234567",
          "body": "Your verification code is {{trigger.confirmation_code}}",
          "identifiers": {
            "id": "123456"
          },
          "message_data": {
            "confirmation_code": "123456",
            "account_name": "Jane Doe"
          }
        }
      },
      "transactionalObject": {
        "description": "Contains information about a transactional message.",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The identifier Customer.io assigned to the transactional message",
            "example": 2
          },
          "name": {
            "type": "string",
            "description": "The name you set for the transactional message.",
            "example": "password reset"
          },
          "description": {
            "type": "string",
            "description": "A description of the transactional message.",
            "example": "sends a temporary password and lets the customer reset their password."
          },
          "send_to_unsubscribed": {
            "type": "boolean",
            "description": "If true, people with an `unsubscribed` attribute set to `true` can trigger the message."
          },
          "link_tracking": {
            "type": "boolean",
            "description": "If true, link tracking is enabled for this message."
          },
          "open_tracking": {
            "type": "boolean",
            "description": "If true, open-tracking is enabled for this message."
          },
          "hide_message_body": {
            "type": "boolean",
            "description": "If true, message contents are not retained in delivery history—you cannot recall the exact contents of the message."
          },
          "queue_drafts": {
            "type": "boolean",
            "description": "If true, messages do not send automatically, and queue as drafts instead. You must send drafts through the *Deliveries & Drafts* page in the user interface."
          },
          "created_at": {
            "$ref": "#/components/schemas/created"
          },
          "updated_at": {
            "$ref": "#/components/schemas/updated"
          }
        }
      },
      "contentObject": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/variant_id"
          },
          "newsletter_id": {
            "$ref": "#/components/schemas/newsletter_id",
            "readOnly": true
          },
          "deduplicate_id": {
            "$ref": "#/components/schemas/deduplicate_id"
          },
          "name": {
            "type": "string",
            "description": "The name of the variant, if it exists.",
            "readOnly": true,
            "example": "newsletter variant A"
          },
          "layout": {
            "type": "string",
            "description": "The layout used for the variant, if it exists.",
            "example": "<html><body>{{ content }}</body></html>",
            "readOnly": true
          },
          "body": {
            "type": "string",
            "description": "The body of the variant. You cannot modify the body if you created it with our drag-and-drop editor.",
            "example": "<strong>Hello from the API</strong>"
          },
          "body_amp": {
            "$ref": "#/components/schemas/body_amp"
          },
          "language": {
            "$ref": "#/components/schemas/language"
          },
          "type": {
            "$ref": "#/components/schemas/messageType"
          },
          "from": {
            "$ref": "#/components/schemas/from"
          },
          "from_id": {
            "$ref": "#/components/schemas/from_id"
          },
          "reply_to": {
            "$ref": "#/components/schemas/reply_to"
          },
          "reply_to_id": {
            "$ref": "#/components/schemas/reply_to_id"
          },
          "preprocessor": {
            "$ref": "#/components/schemas/preprocessor"
          },
          "recipient": {
            "$ref": "#/components/schemas/recipient"
          },
          "subject": {
            "$ref": "#/components/schemas/subject"
          },
          "bcc": {
            "$ref": "#/components/schemas/bcc"
          },
          "fake_bcc": {
            "$ref": "#/components/schemas/fake_bcc"
          },
          "preheader_text": {
            "$ref": "#/components/schemas/preheader_text"
          },
          "headers": {
            "$ref": "#/components/schemas/headers"
          }
        }
      },
      "action_id": {
        "description": "The identifier for an action.",
        "type": "integer",
        "readOnly": true,
        "example": 96,
        "nullable": true
      },
      "campaign_id": {
        "description": "The identifier for a campaign.",
        "type": "integer",
        "example": 5
      },
      "message_id": {
        "description": "The identifier for a delivery—the instance of a message intended for an individual recipient.",
        "type": "string",
        "readOnly": true,
        "example": "dgOq6QWq6QUBAAF4_CGoeVX7mFkDbRFu7ek="
      },
      "message_template_id": {
        "description": "The identifier of the message template used to create a message.",
        "type": "integer",
        "readOnly": true,
        "deprecated": true
      },
      "recipient": {
        "description": "The recipient address for an action.",
        "type": "string",
        "example": "{{customer.email}}"
      },
      "recipient_not_templated": {
        "description": "The recipient address for an action.",
        "type": "string",
        "example": "test@example.com"
      },
      "subject": {
        "type": "string",
        "description": "The subject line for an `email` action.",
        "example": "Did you get that thing I sent you?"
      },
      "newsletter_id": {
        "description": "The identifier for a newsletter.",
        "type": "integer",
        "example": 10
      },
      "content_id": {
        "description": "The identifier for a message in a newsletter. Newsletters can have multiple content IDs (for multi-language messages or A/B tests).",
        "type": "integer",
        "readOnly": true,
        "example": 1
      },
      "messageType": {
        "description": "The type of message/action.",
        "type": "string",
        "enum": [
          "email",
          "webhook",
          "twilio",
          "slack",
          "push"
        ],
        "readOnly": true,
        "example": "email"
      },
      "from": {
        "type": "string",
        "description": "The address that the message is from, relevant if the action `type` is `email`.",
        "readOnly": true,
        "example": "sentFrom@example.com"
      },
      "from_id": {
        "type": "integer",
        "description": "The identifier of the `from` address, commonly known as the \"sender\". You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.",
        "example": 1
      },
      "reply_to": {
        "type": "string",
        "description": "The address that receives replies for the message, if applicable.",
        "readOnly": true,
        "example": "replyto@example.com"
      },
      "reply_to_settable": {
        "type": "string",
        "description": "The address that receives replies for the message, if applicable.",
        "example": "replyto@example.com"
      },
      "from_address": {
        "type": "string",
        "format": "email",
        "description": "The address you want to trigger messages from, overriding the `from` field in emails triggered by the event."
      },
      "reply_to_id": {
        "type": "integer",
        "description": "The identifier for the `reply_to` address, if applicable. You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.",
        "nullable": true,
        "example": 38
      },
      "preprocessor": {
        "type": "string",
        "description": "By default, we process CSS before emails leave Customer.io using Premailer. If your message included CSS and pre-processing is not disabled, this key indicates the pre-processor.",
        "enum": [
          "premailer"
        ],
        "readOnly": true
      },
      "bcc": {
        "readOnly": true,
        "description": "The blind-copy address(es) for this action.",
        "type": "string"
      },
      "fake_bcc": {
        "readOnly": true,
        "type": "boolean",
        "description": "If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es).\n"
      },
      "preheader_text": {
        "type": "string",
        "description": "Also known as \"preview text\", this specifies the small block of text shown in an end-user's email inbox, next to, or underneath, the subject line."
      },
      "body_amp": {
        "type": "string",
        "description": "If your message is an email, this is the AMP-enabled body of your message. If your recipient's email client doesn't support AMP, the `body` represents your fallback message."
      },
      "language": {
        "type": "string",
        "description": "The language variant for your message. If you don't use our [localization feature](/localization), or this is the default message, this value is an empty string.",
        "example": "fr",
        "readOnly": true
      },
      "messageObject": {
        "type": "object",
        "description": "Describes an individual message delivery. The object contains keys for all possible parents of the message (`newsletter_id`, `broadcast_id`, etc) but only the parents of the delivery are populated. Other parent IDs are null.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/message_id"
          },
          "deduplicate_id": {
            "$ref": "#/components/schemas/deduplicate_id"
          },
          "message_template_id": {
            "$ref": "#/components/schemas/message_template_id"
          },
          "customer_id": {
            "$ref": "#/components/schemas/customer_id"
          },
          "customer_identifiers": {
            "$ref": "#/components/schemas/customer_identifiers"
          },
          "recipient": {
            "$ref": "#/components/schemas/recipient"
          },
          "subject": {
            "$ref": "#/components/schemas/subject"
          },
          "metrics": {
            "$ref": "#/components/schemas/messageMetrics"
          },
          "created": {
            "$ref": "#/components/schemas/created"
          },
          "failure_message": {
            "type": "string",
            "description": "Explains why a message failed, if applicable.",
            "nullable": true
          },
          "campaign_id": {
            "$ref": "#/components/schemas/campaign_id",
            "nullable": true
          },
          "action_id": {
            "$ref": "#/components/schemas/action_id"
          },
          "parent_action_id": {
            "$ref": "#/components/schemas/parent_action_id"
          },
          "newsletter_id": {
            "$ref": "#/components/schemas/newsletter_id",
            "nullable": true
          },
          "content_id": {
            "$ref": "#/components/schemas/content_id"
          },
          "broadcast_id": {
            "$ref": "#/components/schemas/broadcast_id",
            "nullable": true
          },
          "trigger_event_id": {
            "$ref": "#/components/schemas/trigger_event_id"
          },
          "type": {
            "$ref": "#/components/schemas/messageType"
          },
          "forgotten": {
            "type": "boolean",
            "description": "If true message contents are not retained by Customer.io."
          }
        },
        "example": {
          "id": "ag1q6QWq6QUBAAF4_CGoeVX7mFkDbRFu7ek=",
          "deduplicate_id": "ag1q6QWq6QUBAAF4_CGoeVX7mFkDbRFu7ek=:1619137768",
          "msg_template_id": 43,
          "action_id": 215,
          "parent_action_id": null,
          "customer_id": null,
          "recipient": "person@example.com",
          "subject": "Did you get that thing I sent you?",
          "metrics": {
            "delivered": 1619137768,
            "sent": 1619137768
          },
          "created": 1619137767,
          "failure_message": null,
          "newsletter_id": null,
          "content_id": null,
          "campaign_id": 23,
          "broadcast_id": null,
          "trigger_event_id": null,
          "type": "email",
          "forgotten": false
        }
      },
      "broadcastActionObject": {
        "oneOf": [
          {
            "title": "Email / message",
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/action_id"
              },
              "broadcast_id": {
                "$ref": "#/components/schemas/broadcast_id",
                "readOnly": true
              },
              "deduplicate_id": {
                "$ref": "#/components/schemas/deduplicate_id"
              },
              "name": {
                "type": "string",
                "description": "The name of the action, if it exists.",
                "readOnly": true,
                "example": "Opening Message"
              },
              "layout": {
                "type": "string",
                "description": "The layout used for the action, if it exists.",
                "readOnly": true
              },
              "created": {
                "$ref": "#/components/schemas/created"
              },
              "updated": {
                "$ref": "#/components/schemas/updated"
              },
              "body": {
                "type": "string",
                "description": "The body of the action. You cannot modify the body if you created it with our drag-and-drop editor."
              },
              "type": {
                "type": "string",
                "description": "The type of action.",
                "enum": [
                  "email",
                  "in_app",
                  "push",
                  "twilio",
                  "slack"
                ],
                "readOnly": true
              },
              "sending_state": {
                "$ref": "#/components/schemas/sending_state"
              },
              "language": {
                "$ref": "#/components/schemas/language"
              },
              "from": {
                "$ref": "#/components/schemas/from"
              },
              "from_id": {
                "$ref": "#/components/schemas/from_id"
              },
              "reply_to": {
                "$ref": "#/components/schemas/reply_to"
              },
              "reply_to_id": {
                "$ref": "#/components/schemas/reply_to_id"
              },
              "preprocessor": {
                "$ref": "#/components/schemas/preprocessor"
              },
              "recipient": {
                "$ref": "#/components/schemas/recipient"
              },
              "subject": {
                "$ref": "#/components/schemas/subject"
              },
              "bcc": {
                "$ref": "#/components/schemas/bcc"
              },
              "fake_bcc": {
                "$ref": "#/components/schemas/fake_bcc"
              },
              "preheader_text": {
                "$ref": "#/components/schemas/preheader_text"
              },
              "headers": {
                "$ref": "#/components/schemas/headers"
              },
              "body_amp": {
                "$ref": "#/components/schemas/body_amp"
              }
            }
          },
          {
            "title": "SMS / MMS",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/action_id"
                  },
                  "broadcast_id": {
                    "$ref": "#/components/schemas/broadcast_id"
                  }
                }
              },
              {
                "$ref": "#/components/schemas/smsActionObject"
              }
            ]
          },
          {
            "title": "Webhook",
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/action_id"
              },
              "broadcast_id": {
                "$ref": "#/components/schemas/broadcast_id"
              },
              "deduplicate_id": {
                "$ref": "#/components/schemas/deduplicate_id"
              },
              "name": {
                "type": "string",
                "description": "The name of the action, if it exists.",
                "readOnly": true,
                "example": "Opening Message"
              },
              "layout": {
                "type": "string",
                "description": "The layout used for the action, if it exists.",
                "readOnly": true
              },
              "created": {
                "$ref": "#/components/schemas/created"
              },
              "updated": {
                "$ref": "#/components/schemas/updated"
              },
              "body": {
                "type": "string",
                "description": "The body of the action. You cannot modify the body if you created it with our drag-and-drop editor."
              },
              "type": {
                "type": "string",
                "description": "The type of action.",
                "enum": [
                  "webhook"
                ],
                "readOnly": true
              },
              "url": {
                "type": "string",
                "description": "The URL to send a webhook to, applies to `webhook` type actions.",
                "example": "https://my.example.com/webhook"
              },
              "headers": {
                "$ref": "#/components/schemas/headers"
              },
              "method": {
                "description": "The HTTP method for your webhook.",
                "type": "string",
                "enum": [
                  "get",
                  "post",
                  "put",
                  "delete",
                  "patch"
                ],
                "example": "post"
              },
              "sending_state": {
                "$ref": "#/components/schemas/sending_state"
              }
            }
          }
        ]
      },
      "transactionalActionObject": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/action_id"
          },
          "name": {
            "type": "string",
            "description": "The name of the transactional message.",
            "readOnly": true,
            "example": "Receipt"
          },
          "created": {
            "$ref": "#/components/schemas/created"
          },
          "updated": {
            "$ref": "#/components/schemas/updated"
          },
          "body": {
            "type": "string",
            "description": "The body of the transactional message. You cannot modify the body if you created it with our drag-and-drop editor."
          },
          "language": {
            "$ref": "#/components/schemas/language"
          },
          "type": {
            "type": "string",
            "description": "The type of message.",
            "enum": [
              "email",
              "push"
            ],
            "readOnly": true
          },
          "from": {
            "$ref": "#/components/schemas/from"
          },
          "from_id": {
            "$ref": "#/components/schemas/from_id"
          },
          "reply_to": {
            "$ref": "#/components/schemas/reply_to"
          },
          "reply_to_id": {
            "$ref": "#/components/schemas/reply_to_id"
          },
          "preprocessor": {
            "$ref": "#/components/schemas/preprocessor"
          },
          "recipient": {
            "$ref": "#/components/schemas/recipient",
            "readOnly": true
          },
          "subject": {
            "$ref": "#/components/schemas/subject"
          },
          "bcc": {
            "$ref": "#/components/schemas/bcc"
          },
          "fake_bcc": {
            "$ref": "#/components/schemas/fake_bcc"
          },
          "preheader_text": {
            "$ref": "#/components/schemas/preheader_text"
          },
          "headers": {
            "$ref": "#/components/schemas/headers"
          },
          "body_amp": {
            "$ref": "#/components/schemas/body_amp"
          }
        }
      },
      "parent_action_id": {
        "type": "integer",
        "description": "The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).",
        "example": 1,
        "readOnly": true
      },
      "smsActionObject": {
        "type": "object",
        "properties": {
          "deduplicate_id": {
            "$ref": "#/components/schemas/deduplicate_id"
          },
          "name": {
            "type": "string",
            "description": "The name of the action.",
            "readOnly": true,
            "example": "Opening Message"
          },
          "layout": {
            "type": "string",
            "description": "The layout used for the action, if it exists.",
            "readOnly": true
          },
          "created": {
            "$ref": "#/components/schemas/created"
          },
          "updated": {
            "$ref": "#/components/schemas/updated"
          },
          "body": {
            "type": "string",
            "description": "The body of your SMS."
          },
          "language": {
            "$ref": "#/components/schemas/language"
          },
          "type": {
            "type": "string",
            "description": "For SMS/MMS messages, the `type` is always `twilio`.",
            "enum": [
              "twilio"
            ],
            "readOnly": true
          },
          "image_url": {
            "type": "string",
            "description": "The URL of the image in your SMS (MMS) message."
          },
          "sending_state": {
            "$ref": "#/components/schemas/sending_state"
          },
          "recipient": {
            "type": "string",
            "description": "The recipient value. In general, your recipient is an attribute that you reference using liquid, like `{{customer.phone}}`, instead of a hard-coded value. If you set this field to a liquid statement like `{{customer.phone}}`, the field returns blank in `GET` requests because we populate the recipient from your liquid statement at send time.",
            "example": ""
          }
        }
      },
      "actionObject": {
        "oneOf": [
          {
            "title": "Email / message",
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/action_id"
              },
              "campaign_id": {
                "$ref": "#/components/schemas/campaign_id",
                "readOnly": true
              },
              "parent_action_id": {
                "$ref": "#/components/schemas/parent_action_id"
              },
              "deduplicate_id": {
                "$ref": "#/components/schemas/deduplicate_id"
              },
              "name": {
                "type": "string",
                "description": "The name of the action, if it exists.",
                "readOnly": true,
                "example": "Opening Message"
              },
              "layout": {
                "type": "string",
                "description": "The layout used for the action, if it exists.",
                "readOnly": true
              },
              "created": {
                "$ref": "#/components/schemas/created"
              },
              "updated": {
                "$ref": "#/components/schemas/updated"
              },
              "body": {
                "type": "string",
                "description": "The body of the action. For emails, this is the HTML-body of a message. You cannot modify the body if you created it with our drag-and-drop editor."
              },
              "body_amp": {
                "type": "string",
                "description": "If your message is an email, this is the AMP-enabled body of your message. If your recipient's email client doesn't support AMP, the `body` represents your fallback message."
              },
              "language": {
                "$ref": "#/components/schemas/language"
              },
              "type": {
                "type": "string",
                "description": "The type of action.",
                "enum": [
                  "email",
                  "in_app",
                  "push",
                  "twilio",
                  "slack"
                ],
                "readOnly": true
              },
              "sending_state": {
                "$ref": "#/components/schemas/sending_state"
              },
              "from": {
                "$ref": "#/components/schemas/from"
              },
              "from_id": {
                "$ref": "#/components/schemas/from_id"
              },
              "reply_to": {
                "$ref": "#/components/schemas/reply_to"
              },
              "reply_to_id": {
                "$ref": "#/components/schemas/reply_to_id"
              },
              "preprocessor": {
                "$ref": "#/components/schemas/preprocessor"
              },
              "recipient": {
                "$ref": "#/components/schemas/recipient"
              },
              "subject": {
                "$ref": "#/components/schemas/subject"
              },
              "bcc": {
                "$ref": "#/components/schemas/bcc"
              },
              "fake_bcc": {
                "$ref": "#/components/schemas/fake_bcc"
              },
              "preheader_text": {
                "$ref": "#/components/schemas/preheader_text"
              },
              "headers": {
                "$ref": "#/components/schemas/headers"
              }
            }
          },
          {
            "title": "SMS/MMS",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/action_id"
                  },
                  "campaign_id": {
                    "$ref": "#/components/schemas/campaign_id",
                    "readOnly": true
                  },
                  "parent_action_id": {
                    "$ref": "#/components/schemas/parent_action_id"
                  }
                }
              },
              {
                "$ref": "#/components/schemas/smsActionObject"
              }
            ]
          },
          {
            "title": "Webhook",
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/action_id"
              },
              "campaign_id": {
                "$ref": "#/components/schemas/campaign_id"
              },
              "parent_action_id": {
                "$ref": "#/components/schemas/parent_action_id"
              },
              "deduplicate_id": {
                "$ref": "#/components/schemas/deduplicate_id"
              },
              "name": {
                "type": "string",
                "description": "The name of the action, if it exists.",
                "readOnly": true,
                "example": "Set attribute"
              },
              "layout": {
                "type": "string",
                "description": "The layout used for the action, if it exists.",
                "readOnly": true
              },
              "created": {
                "$ref": "#/components/schemas/created"
              },
              "updated": {
                "$ref": "#/components/schemas/updated"
              },
              "body": {
                "type": "string",
                "description": "The payload for your webhook.",
                "example": "{\"attribute\":\"cool-webhook\"}"
              },
              "type": {
                "type": "string",
                "description": "The type of action.",
                "enum": [
                  "webhook"
                ],
                "readOnly": true
              },
              "url": {
                "type": "string",
                "description": "The URL to send a webhook to, applies to `webhook` type actions.",
                "example": "https://my.example.com/webhook"
              },
              "headers": {
                "$ref": "#/components/schemas/headers"
              },
              "method": {
                "description": "The HTTP method for your webhook.",
                "type": "string",
                "enum": [
                  "get",
                  "post",
                  "put",
                  "delete",
                  "patch"
                ],
                "example": "post"
              },
              "sending_state": {
                "$ref": "#/components/schemas/sending_state"
              }
            }
          }
        ]
      },
      "sending_state": {
        "type": "string",
        "enum": [
          "automatic",
          "draft",
          "off"
        ],
        "description": "Determines the sending behavior for the action. `automatic` sends the action automatically when triggered; `draft` queues drafts when the action is triggered; or `off` to disable the action."
      },
      "periodWebhookMetricsDeprecated": {
        "type": "object",
        "description": "Returns metrics in accordance with the `period` you requested. Each property in this object is an array and each entry in the array represents a metric period, i.e. if your `period` is days `[0, 1]` would represent 0 metrics for the first day, 1 for the second, etc.",
        "properties": {
          "2xx": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "2xx responses by period, representative of webhook performance."
          },
          "3xx": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "3xx responses by period, representative of webhook performance."
          },
          "4xx": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "4xx responses by period, representative of webhook performance."
          },
          "5xx": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "5xx responses by period, representative of webhook performance."
          }
        }
      },
      "periodWebhookMetrics": {
        "type": "object",
        "description": "Returns metrics in accordance with the resolution you requested. Each property in this object is an array and each entry in the array represents a metric period, i.e. if your `res` is days `[0, 1]` would represent 0 metrics for the first day, 1 for the second, etc.",
        "properties": {
          "2xx": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "2xx responses by period, representative of webhook performance."
          },
          "3xx": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "3xx responses by period, representative of webhook performance."
          },
          "4xx": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "4xx responses by period, representative of webhook performance."
          },
          "5xx": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "5xx responses by period, representative of webhook performance."
          }
        }
      },
      "periodMessageMetricsDeprecated": {
        "description": "Returns metrics in accordance with the `period` you requested. Each property in this object is an array and each entry in the array represents a metric period, i.e. if your `period` is days `[0, 1]` would represent 0 metrics for the first day, 1 for the second, etc.",
        "type": "object",
        "properties": {
          "attempted": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `attempted` messages."
          },
          "bounced": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `bounced` messages."
          },
          "clicked": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `clicked` messages."
          },
          "converted": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `converted` messages."
          },
          "created": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `created` messages."
          },
          "deferred": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `deferred` messages."
          },
          "delivered": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `delivered` messages."
          },
          "drafted": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `drafted` messages."
          },
          "failed": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `failed` messages."
          },
          "opened": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `opened` messages."
          },
          "sent": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of sent messages."
          },
          "spammed": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of spam complaints."
          },
          "suppressed": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `suppressed` messages."
          },
          "undeliverable": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `undeliverable` messages."
          },
          "topic_unsubscribed": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of topic unsubscribes in a given period."
          },
          "unsubscribed": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of unsubscribes attributed to the campaign or message."
          }
        }
      },
      "periodMessageMetrics": {
        "description": "Returns metrics in accordance with the resolution you requested. Each property in this object is an array and each entry in the array represents a metric period, i.e. if your `res` is days `[0, 1]` would represent 0 metrics for the first day, 1 for the second, etc.",
        "type": "object",
        "properties": {
          "attempted": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `attempted` messages."
          },
          "bounced": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `bounced` messages."
          },
          "clicked": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `clicked` messages."
          },
          "human_clicked": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `clicked` emails excluding machine clicks. This metric is reliable starting April 20, 2025. [Learn more](/journeys/analytics/#delivery-metrics)."
          },
          "prefetch_clicked": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `clicked` emails attributed to machines. This metric is reliable starting April 20, 2025."
          },
          "converted": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `converted` messages."
          },
          "created": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `created` messages."
          },
          "deferred": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `deferred` messages."
          },
          "delivered": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `delivered` messages."
          },
          "drafted": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `drafted` messages."
          },
          "failed": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `failed` messages."
          },
          "opened": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `opened` messages."
          },
          "human_opened": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `opened` emails excluding machine opens. This metric is reliable starting March 20, 2025. [Learn more](/journeys/analytics/#delivery-metrics)."
          },
          "prefetch_opened": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `opened` emails attributed to machines. This metric is reliable starting March 20, 2025."
          },
          "sent": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of sent messages."
          },
          "spammed": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of spam complaints."
          },
          "suppressed": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `suppressed` messages."
          },
          "undeliverable": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of `undeliverable` messages."
          },
          "topic_unsubscribed": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of topic unsubscribes in a given period."
          },
          "unsubscribed": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The number of unsubscribes attributed to the campaign or message."
          }
        }
      },
      "webhookMetrics": {
        "type": "object",
        "properties": {
          "2xx": {
            "type": "integer",
            "description": "The number of 2xx responses."
          },
          "3xx": {
            "type": "integer",
            "description": "The number of 3xx responses."
          },
          "4xx": {
            "type": "integer",
            "description": "The number of 4xx responses."
          },
          "5xx": {
            "type": "integer",
            "description": "The number of 5xx responses."
          }
        }
      },
      "messageMetrics": {
        "type": "object",
        "description": "Metrics for an individual instance of a message; each item in the object represents the timestamp when a message achieved a particular metric. This object only contains metrics that have been recorded.",
        "properties": {
          "bounced": {
            "type": "integer",
            "description": "The timestamp when the message `bounced`."
          },
          "clicked": {
            "type": "integer",
            "description": "The timestamp when the message was `clicked`."
          },
          "human_clicked": {
            "type": "integer",
            "description": "The number of `clicked` messages excluding machine clicks. This metric is reliable starting April 20, 2025. [Learn more](/journeys/analytics/#delivery-metrics)."
          },
          "prefetch_clicked": {
            "type": "integer",
            "description": "The number of `clicked` messages attributed to machines. This metric is reliable starting April 20, 2025."
          },
          "converted": {
            "type": "integer",
            "description": "The timestamp when the message was `converted`."
          },
          "created": {
            "type": "integer",
            "description": "The timestamp when the message was `created`."
          },
          "delivered": {
            "type": "integer",
            "description": "The timestamp when the message was `delivered`."
          },
          "drafted": {
            "type": "integer",
            "description": "The timestamp when the message was `drafted`."
          },
          "dropped": {
            "type": "integer",
            "description": "The timestamp when the message was `dropped`."
          },
          "failed": {
            "type": "integer",
            "description": "The timestamp when the message `failed`."
          },
          "opened": {
            "type": "integer",
            "description": "The timestamp when the message was `opened`."
          },
          "human_opened": {
            "type": "integer",
            "description": "The number of `opened` messages excluding machine opens. This metric is reliable starting March 20, 2025. [Learn more](/journeys/analytics/#delivery-metrics)."
          },
          "prefetch_opened": {
            "type": "integer",
            "description": "The number of `opened` messages attributed to machines. This metric is reliable starting March 20, 2025."
          },
          "sent": {
            "type": "integer",
            "description": "The timestamp when the message was `sent`."
          },
          "spammed": {
            "type": "integer",
            "description": "The timestamp when the message was marked as spam."
          },
          "undeliverable": {
            "type": "integer",
            "description": "The timestamp when the message became `undeliverable`."
          },
          "unsubscribed": {
            "type": "integer",
            "description": "The timestamp when a person unsubscribed based on this message."
          }
        }
      },
      "messageTotalMetrics": {
        "type": "object",
        "description": "Total metrics over the lifespan of the requested item.",
        "properties": {
          "bounced": {
            "type": "integer",
            "description": "The number of `bounced` messages."
          },
          "clicked": {
            "type": "integer",
            "description": "The number of `clicked` messages."
          },
          "converted": {
            "type": "integer",
            "description": "The number of `converted` messages."
          },
          "created": {
            "type": "integer",
            "description": "The number of `created` messages."
          },
          "delivered": {
            "type": "integer",
            "description": "The number of `delivered` messages."
          },
          "drafted": {
            "type": "integer",
            "description": "The number of `drafted` messages."
          },
          "dropped": {
            "type": "integer",
            "description": "The number of `dropped` messages."
          },
          "failed": {
            "type": "integer",
            "description": "The number of `failed` messages."
          },
          "opened": {
            "type": "integer",
            "description": "The number of `opened` messages"
          },
          "sent": {
            "type": "integer",
            "description": "The number of `sent` messages"
          },
          "spammed": {
            "type": "integer",
            "description": "The number of messages marked as spam."
          },
          "undeliverable": {
            "type": "integer",
            "description": "The number of `undeliverable` messages."
          },
          "unsubscribed": {
            "type": "integer",
            "description": "The number of unsubscribes attributed to messages."
          }
        }
      },
      "linkMetrics": {
        "type": "object",
        "properties": {
          "link": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "The ID of the link.",
                "example": 1234
              },
              "href": {
                "type": "string",
                "description": "The link destination—a URL, mailto, etc.",
                "example": "https://docs.customer.io"
              }
            }
          },
          "metric": {
            "type": "object",
            "description": "Contains metrics for the link.",
            "properties": {
              "series": {
                "type": "object",
                "properties": {
                  "clicked": {
                    "type": "array",
                    "description": "An array of results from oldest to newest, where each result indicates a period.",
                    "items": {
                      "type": "integer"
                    },
                    "example": [
                      1,
                      3,
                      5,
                      7
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "campaignObject": {
        "type": "object",
        "oneOf": [
          {
            "title": "Segment",
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/campaign_id"
              },
              "deduplicate_id": {
                "$ref": "#/components/schemas/deduplicate_id"
              },
              "name": {
                "$ref": "#/components/schemas/campaign_name"
              },
              "type": {
                "type": "string",
                "deprecated": true,
                "description": "The type of campaign trigger. **Sunsetting on March 30, 2025**",
                "enum": [
                  "segment"
                ]
              },
              "created": {
                "$ref": "#/components/schemas/created"
              },
              "updated": {
                "$ref": "#/components/schemas/updated"
              },
              "active": {
                "$ref": "#/components/schemas/active"
              },
              "state": {
                "$ref": "#/components/schemas/state"
              },
              "actions": {
                "$ref": "#/components/schemas/campaign_actions"
              },
              "first_started": {
                "$ref": "#/components/schemas/first_started"
              },
              "tags": {
                "$ref": "#/components/schemas/tags"
              },
              "trigger_segment_ids": {
                "description": "A list of segments used in the campaign trigger, returned if the campaign trigger included one or more segment conditions.",
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "example": [
                  90
                ]
              },
              "filter_segment_ids": {
                "$ref": "#/components/schemas/filter_segment_ids"
              },
              "msg_templates": {
                "type": "array",
                "deprecated": true,
                "description": "Indicates the message templates used in this campaign.",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The message type the template represents.",
                      "enum": [
                        "email",
                        "sms",
                        "push",
                        "slack"
                      ]
                    },
                    "id": {
                      "type": "integer",
                      "description": "The identifier for the template."
                    }
                  }
                }
              }
            }
          },
          {
            "title": "Event",
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/campaign_id"
              },
              "deduplicate_id": {
                "$ref": "#/components/schemas/deduplicate_id"
              },
              "name": {
                "$ref": "#/components/schemas/campaign_name"
              },
              "type": {
                "type": "string",
                "deprecated": true,
                "description": "The type of campaign trigger. **Sunsetting on March 30, 2025**",
                "enum": [
                  "event"
                ]
              },
              "created": {
                "$ref": "#/components/schemas/created"
              },
              "updated": {
                "$ref": "#/components/schemas/updated"
              },
              "active": {
                "$ref": "#/components/schemas/active"
              },
              "state": {
                "$ref": "#/components/schemas/state"
              },
              "actions": {
                "$ref": "#/components/schemas/campaign_actions"
              },
              "first_started": {
                "$ref": "#/components/schemas/first_started"
              },
              "tags": {
                "$ref": "#/components/schemas/tags"
              },
              "filter_segment_ids": {
                "$ref": "#/components/schemas/filter_segment_ids"
              },
              "event_name": {
                "description": "The name of the event. How you reference the event in campaigns or segments.",
                "type": "string"
              }
            }
          },
          {
            "title": "Form",
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/campaign_id"
              },
              "deduplicate_id": {
                "$ref": "#/components/schemas/deduplicate_id"
              },
              "name": {
                "$ref": "#/components/schemas/campaign_name"
              },
              "type": {
                "type": "string",
                "deprecated": true,
                "description": "The type of campaign trigger. **Sunsetting on March 30, 2025**",
                "enum": [
                  "form"
                ]
              },
              "created": {
                "$ref": "#/components/schemas/created"
              },
              "updated": {
                "$ref": "#/components/schemas/updated"
              },
              "active": {
                "$ref": "#/components/schemas/active"
              },
              "state": {
                "$ref": "#/components/schemas/state"
              },
              "actions": {
                "$ref": "#/components/schemas/campaign_actions"
              },
              "first_started": {
                "$ref": "#/components/schemas/first_started"
              },
              "tags": {
                "$ref": "#/components/schemas/tags"
              },
              "filter_segment_ids": {
                "$ref": "#/components/schemas/filter_segment_ids"
              }
            }
          },
          {
            "title": "Date",
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/campaign_id"
              },
              "deduplicate_id": {
                "$ref": "#/components/schemas/deduplicate_id"
              },
              "name": {
                "$ref": "#/components/schemas/campaign_name"
              },
              "type": {
                "type": "string",
                "deprecated": true,
                "description": "The type of campaign trigger. **Sunsetting on March 30, 2025**",
                "enum": [
                  "date"
                ]
              },
              "created": {
                "$ref": "#/components/schemas/created"
              },
              "updated": {
                "$ref": "#/components/schemas/updated"
              },
              "active": {
                "$ref": "#/components/schemas/active"
              },
              "state": {
                "$ref": "#/components/schemas/state"
              },
              "actions": {
                "$ref": "#/components/schemas/campaign_actions"
              },
              "first_started": {
                "$ref": "#/components/schemas/first_started"
              },
              "tags": {
                "$ref": "#/components/schemas/tags"
              },
              "filter_segment_ids": {
                "$ref": "#/components/schemas/filter_segment_ids"
              },
              "frequency": {
                "description": "How often a person will receive this campaign based on the date specified in the campaign trigger.",
                "type": "string",
                "enum": [
                  "once",
                  "monthly",
                  "yearly"
                ]
              },
              "date_attribute": {
                "description": "The attribute on people's profiles you use to configure the date of the campaign trigger.",
                "type": "string"
              },
              "timezone": {
                "description": "The timezone you set to configure the date of the campaign trigger.",
                "type": "string",
                "example": "America/Chicago"
              },
              "use_customer_timezone": {
                "description": "If you chose \"the user's timezone\" while configuring the date of the campaign trigger, this is `true`. Otherwise, you set a specific timezone so it's `false`.",
                "type": "boolean"
              },
              "start_hour": {
                "description": "The hour you set the campaign to trigger. Follows the 24-hour clock.",
                "type": "integer"
              },
              "start_minutes": {
                "description": "The minutes you set the campaign to trigger. Follows the 24-hour clock.",
                "type": "integer"
              }
            }
          },
          {
            "title": "Relationship",
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/campaign_id"
              },
              "deduplicate_id": {
                "$ref": "#/components/schemas/deduplicate_id"
              },
              "name": {
                "$ref": "#/components/schemas/campaign_name"
              },
              "type": {
                "type": "string",
                "deprecated": true,
                "description": "The type of campaign trigger. **Sunsetting on March 30, 2025**",
                "enum": [
                  "relationship"
                ]
              },
              "created": {
                "$ref": "#/components/schemas/created"
              },
              "updated": {
                "$ref": "#/components/schemas/updated"
              },
              "active": {
                "$ref": "#/components/schemas/active"
              },
              "state": {
                "$ref": "#/components/schemas/state"
              },
              "actions": {
                "$ref": "#/components/schemas/campaign_actions"
              },
              "first_started": {
                "$ref": "#/components/schemas/first_started"
              },
              "tags": {
                "$ref": "#/components/schemas/tags"
              },
              "filter_segment_ids": {
                "$ref": "#/components/schemas/filter_segment_ids"
              },
              "object_type_id": {
                "$ref": "#/components/schemas/object_type_id_trigger"
              },
              "filter_object_attributes": {
                "$ref": "#/components/schemas/filter_object_attributes"
              },
              "filter_relationship_attributes": {
                "$ref": "#/components/schemas/filter_relationship_attributes"
              },
              "audience": {
                "description": "Defines the people who will start a journey in your campaign.",
                "type": "object",
                "properties": {
                  "type": {
                    "description": "The type of audience selected. \"Person added to object\" is `0`. \"Every person in the object\" is `1`. \"Certain people in the object\" is also `1`. \"Certain people\" will always have one or more audience filters (see below). \"Every person\" will never have an audience filter.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                  },
                  "person_filters": {
                    "description": "Returns the profile attributes you filtered the audience by, if any. Only applies to `type 1`, \"Certain people in the object\".",
                    "type": "object",
                    "example": "{\"and\":[{\"attribute\":{\"field\":\"title\",\"operator\":\"eq\",\"value\":\"asdca\"}}]}"
                  },
                  "relationship_filters": {
                    "description": "Returns the relationship attributes you filtered the audience by, if any. Only applies to `type 1`, \"Certain people in the object\".",
                    "type": "object",
                    "example": "{\"and\":[{\"relationship_attribute\":{\"type_id\":1,\"field\":\"trig\",\"operator\":\"eq\",\"value\":\"asd\"}}]}"
                  }
                }
              },
              "relationship_attribute_triggers": {
                "description": "A list of relationship attributes used to trigger the campaign.",
                "type": "object",
                "example": "{\"and\":[{\"relationship_attribute\":{\"type_id\":1,\"field\":\"trig\",\"operator\":\"eq\",\"value\":\"true\"}}]}"
              }
            }
          },
          {
            "title": "Object",
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/campaign_id"
              },
              "deduplicate_id": {
                "$ref": "#/components/schemas/deduplicate_id"
              },
              "name": {
                "$ref": "#/components/schemas/campaign_name"
              },
              "type": {
                "type": "string",
                "deprecated": true,
                "description": "The type of campaign trigger. **Sunsetting on March 30, 2025**",
                "enum": [
                  "object"
                ]
              },
              "created": {
                "$ref": "#/components/schemas/created"
              },
              "updated": {
                "$ref": "#/components/schemas/updated"
              },
              "active": {
                "$ref": "#/components/schemas/active"
              },
              "state": {
                "$ref": "#/components/schemas/state"
              },
              "actions": {
                "$ref": "#/components/schemas/campaign_actions"
              },
              "first_started": {
                "$ref": "#/components/schemas/first_started"
              },
              "tags": {
                "$ref": "#/components/schemas/tags"
              },
              "filter_segment_ids": {
                "$ref": "#/components/schemas/filter_segment_ids"
              },
              "object_type_id": {
                "$ref": "#/components/schemas/object_type_id_trigger"
              },
              "filter_object_attributes": {
                "$ref": "#/components/schemas/filter_object_attributes"
              },
              "filter_relationship_attributes": {
                "$ref": "#/components/schemas/filter_relationship_attributes"
              },
              "audience": {
                "description": "Defines the people who will start a journey in your campaign.",
                "type": "object",
                "properties": {
                  "type": {
                    "description": "The type of audience selected. \"Every person in the object\" is `1`. \"Certain people in the object\" is also `1`. \"Certain people\" will always have one or more audience filters (see below). \"Every person\" will never have an audience filter.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                  },
                  "person_filters": {
                    "description": "Returns the profile attributes you filtered the audience by, if any. Only applies to `type 1`, \"Certain people in the object\".",
                    "type": "object",
                    "example": "{\"and\":[{\"attribute\":{\"field\":\"title\",\"operator\":\"eq\",\"value\":\"asdca\"}}]}"
                  },
                  "relationship_filters": {
                    "description": "Returns the relationship attributes you filtered the audience by, if any. Only applies to `type 1`, \"Certain people in the object\".",
                    "type": "object",
                    "example": "{\"and\":[{\"relationship_attribute\":{\"type_id\":1,\"field\":\"trig\",\"operator\":\"eq\",\"value\":\"asd\"}}]}"
                  }
                }
              },
              "object_attribute_triggers": {
                "description": "A list of object attributes used to trigger the campaign.",
                "type": "object",
                "example": "{\"and\":[{\"object_attribute\":{\"type_id\":1,\"field\":\"name\",\"operator\":\"eq\",\"value\":\"sfa\"}},{\"object_attribute\":{\"type_id\":1,\"field\":\"renewal_date\",\"operator\":\"eq\",\"value\":\"sdfs\"}}]}"
              }
            }
          },
          {
            "title": "Webhook",
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/campaign_id"
              },
              "deduplicate_id": {
                "$ref": "#/components/schemas/deduplicate_id"
              },
              "name": {
                "$ref": "#/components/schemas/campaign_name"
              },
              "type": {
                "type": "string",
                "deprecated": true,
                "description": "The type of campaign trigger. **Sunsetting on March 30, 2025**",
                "enum": [
                  "webhook"
                ]
              },
              "created": {
                "$ref": "#/components/schemas/created"
              },
              "updated": {
                "$ref": "#/components/schemas/updated"
              },
              "active": {
                "$ref": "#/components/schemas/active"
              },
              "state": {
                "$ref": "#/components/schemas/state"
              },
              "actions": {
                "$ref": "#/components/schemas/campaign_actions"
              },
              "first_started": {
                "$ref": "#/components/schemas/first_started"
              },
              "tags": {
                "$ref": "#/components/schemas/tags"
              },
              "webhook_id": {
                "description": "The ID of the webhook trigger generated by Customer.io.",
                "type": "integer"
              }
            }
          }
        ]
      },
      "esp_suppression": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "The reason the addresses are suppressed.",
            "enum": [
              "bounces",
              "spam"
            ],
            "example": "bounces"
          },
          "suppressions": {
            "type": "array",
            "description": "The addresses suppressed in this category.",
            "items": {
              "type": "object",
              "properties": {
                "created": {
                  "type": "integer",
                  "format": "Unix timestamp",
                  "description": "The timestamp (in seconds), when the ESP suppressed the address.",
                  "example": 1650895738
                },
                "email": {
                  "type": "string",
                  "description": "The email address that the ESP suppressed.",
                  "example": "bounced.person@example.com"
                },
                "reason": {
                  "type": "string",
                  "description": "The reason for the suppression, as [recorded by Mailgun](https://documentation.mailgun.com/en/latest/api-suppressions.html).",
                  "example": "Uploaded manually via api.customer.io"
                },
                "status": {
                  "type": "string",
                  "description": "The status code for the suppression, as [recorded by mailgun](https://documentation.mailgun.com/en/latest/api-suppressions.html). This is normally `550`.",
                  "example": "550"
                }
              }
            }
          }
        }
      },
      "pushTitle": {
        "type": "string",
        "description": "The title of your push notification."
      },
      "pushBody": {
        "type": "string",
        "description": "The body of your push notification."
      },
      "pushLink": {
        "type": "string",
        "description": "A deep link (to a page in your app), or a link to a web page."
      },
      "pushImage": {
        "type": "string",
        "description": "The URL of an HTTPS image that you want to use for your message."
      },
      "customAndroidProps": {
        "type": "object",
        "description": "Properties supported specifically by Android on FCM.",
        "properties": {
          "icon": {
            "type": "string",
            "description": "Sets the notification icon to `myicon` for drawable resource `myicon`. If you don't send this key, FCM displays the launcher icon from your app manifest."
          },
          "sound": {
            "type": "string",
            "description": "The sound that plays when the device receives the notification. Supports `\"default\"` or the filename of a sound resource bundled in your app. Sound files must reside in `/res/raw/`."
          },
          "tag": {
            "type": "string",
            "description": "Identifier to replace existing notifications in the notification drawer. If empty, each request creates a new notification.\n\nIf you specify a tag, and a notification with the same tag is already being shown, the new notification replaces the existing one in the notification drawer. \n"
          },
          "color": {
            "type": "string",
            "description": "The notification's icon color in `#rrggbb` format."
          },
          "click_action": {
            "type": "string",
            "description": "The action that occurs when a user taps on the notification. Launches an activity with a matching intent filter when a person taps the notification."
          },
          "body_loc_key": {
            "type": "string",
            "description": "The key to the body string in the app's string resources that you want to use to localize the body text to the user's current localization. See [String Resources](https://developer.android.com/guide/topics/resources/string-resource/) for more information."
          },
          "body_loc_arg": {
            "type": "string",
            "description": "Variable string values used in place of the format specifiers in `body_loc_key` to localize the body text to the user's current localization. See Formatting and Styling for more information."
          },
          "title_loc_key": {
            "type": "string",
            "description": "The key to the title string in the app's string resources that you want to use to localize the title text to the user's current localization. See [String Resources](https://developer.android.com/guide/topics/resources/string-resource/) for more information."
          },
          "title_loc_arg": {
            "type": "string",
            "description": "Variable string values used in place of the format specifiers in `title_loc_key` to localize the title text to the user's current localization. See Formatting and Styling for more information."
          }
        }
      },
      "allAndroidProps": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "title": {
                "$ref": "#/components/schemas/pushTitle"
              },
              "body": {
                "$ref": "#/components/schemas/pushBody"
              }
            }
          },
          {
            "$ref": "#/components/schemas/customAndroidProps"
          }
        ]
      },
      "fcmBasicPush": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "object",
            "description": "The parent object for all custom push payloads.",
            "required": [
              "notification"
            ],
            "properties": {
              "notification": {
                "type": "object",
                "required": [
                  "body"
                ],
                "description": "Contains properties interpreted by the SDK except for the `link`.",
                "properties": {
                  "title": {
                    "$ref": "#/components/schemas/pushTitle"
                  },
                  "body": {
                    "$ref": "#/components/schemas/pushBody"
                  },
                  "image": {
                    "$ref": "#/components/schemas/pushImage"
                  }
                }
              },
              "data": {
                "type": "object",
                "description": "Contains the `link` property (interpreted by the SDK) and additional properties that you want to pass to your app.",
                "properties": {
                  "link": {
                    "$ref": "#/components/schemas/pushLink"
                  }
                }
              }
            }
          }
        }
      },
      "fcmAndroidWithSdk": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "description": "The parent object for all push payloads.",
            "oneOf": [
              {
                "title": "Data object only",
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "type": "object",
                    "description": "Contains all properties interpreted by the SDK.",
                    "properties": {
                      "title": {
                        "$ref": "#/components/schemas/pushTitle"
                      },
                      "body": {
                        "$ref": "#/components/schemas/pushBody"
                      },
                      "image": {
                        "$ref": "#/components/schemas/pushImage"
                      },
                      "link": {
                        "$ref": "#/components/schemas/pushLink"
                      }
                    }
                  },
                  "android": {
                    "type": "object",
                    "description": "Contains properties that are **not** interpreted by the SDK but are defined by FCM. You need to write your own code to handle these Android push features.",
                    "properties": {
                      "notification": {
                        "$ref": "#/components/schemas/customAndroidProps"
                      }
                    }
                  }
                }
              },
              {
                "title": "Notification and data object",
                "type": "object",
                "required": [
                  "notification"
                ],
                "properties": {
                  "notification": {
                    "type": "object",
                    "description": "Contains properties interpreted by the SDK except for the `link`.",
                    "properties": {
                      "title": {
                        "$ref": "#/components/schemas/pushTitle"
                      },
                      "body": {
                        "$ref": "#/components/schemas/pushBody"
                      },
                      "image": {
                        "$ref": "#/components/schemas/pushImage"
                      }
                    }
                  },
                  "data": {
                    "type": "object",
                    "description": "Contains the `link` property (interpreted by the SDK) and additional properties that you want to pass to your app.",
                    "properties": {
                      "link": {
                        "$ref": "#/components/schemas/pushLink"
                      }
                    }
                  },
                  "android": {
                    "type": "object",
                    "description": "Contains properties that are **not** interpreted by the SDK but are defined by FCM. You need to write your own code to handle these Android push features.",
                    "properties": {
                      "notification": {
                        "$ref": "#/components/schemas/customAndroidProps"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "fcmAndroidWithoutSdk": {
        "type": "object",
        "description": "A custom push payload for Android devices.",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "object",
            "description": "The parent object for Android custom push payloads.",
            "properties": {
              "notification": {
                "type": "object",
                "description": "Contains the push body and title.",
                "properties": {
                  "title": {
                    "$ref": "#/components/schemas/pushTitle"
                  },
                  "body": {
                    "$ref": "#/components/schemas/pushBody"
                  }
                }
              },
              "data": {
                "type": "object",
                "description": "Contains key-value pairs that your app interprets.",
                "additionalProperties": {
                  "x-additionalPropertiesName": "Attachment Names",
                  "x-doNotRender": true,
                  "type": "string"
                }
              },
              "android": {
                "type": "object",
                "description": "Contains custom push options for your notification.",
                "properties": {
                  "notification": {
                    "$ref": "#/components/schemas/customAndroidProps"
                  }
                }
              }
            }
          }
        }
      },
      "fcmAndroid": {
        "oneOf": [
          {
            "title": "SDK Integration",
            "type": "object",
            "required": [
              "message"
            ],
            "properties": {
              "message": {
                "$ref": "#/components/schemas/fcmAndroidWithSdk"
              }
            }
          },
          {
            "title": "Custom Integration",
            "type": "object",
            "required": [
              "message"
            ],
            "properties": {
              "message": {
                "$ref": "#/components/schemas/fcmAndroidWithoutSdk"
              }
            }
          }
        ]
      },
      "iosSharedOptions": {
        "type": "object",
        "description": "A push payload intended for an iOS device.",
        "properties": {
          "alert": {
            "oneOf": [
              {
                "title": "Simple alert",
                "type": "string",
                "description": "A simple alert message."
              },
              {
                "title": "Complex alert",
                "type": "object",
                "properties": {
                  "body": {
                    "$ref": "#/components/schemas/pushBody"
                  },
                  "title": {
                    "$ref": "#/components/schemas/pushTitle"
                  },
                  "subtitle": {
                    "description": "Additional information that explains the purpose of the notification.",
                    "type": "string"
                  },
                  "launch-image": {
                    "description": "The name of the launch image file you want to display. When a user launches your app, they'll see this image or storyboard file rather than your app’s normal launch image.",
                    "type": "string"
                  },
                  "title-loc-key": {
                    "description": "The key for a localized title string in your app’s Localizable.strings files.",
                    "type": "string"
                  },
                  "title-loc-args": {
                    "type": "array",
                    "description": "An array of replacement value strings for variables in your title string. Each %@ character in the title-loc-key is replaced by a value from this array, in the order they appear in the title string.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "subtitle-loc-key": {
                    "description": "The key for a localized subtitle string in your app’s Localizable.strings file.",
                    "type": "string"
                  },
                  "subtitle-loc-args": {
                    "type": "array",
                    "description": "An array of replacement value strings for variables in your subtitle string. Each %@ character in the subtitle-loc-key is replaced by a value from this array, in the order they appear in the subtitle string.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "loc-key": {
                    "description": "The key for a localized message string in your app’s Localizable.strings file.",
                    "type": "string"
                  },
                  "loc-args": {
                    "type": "array",
                    "description": "An array of replacement value strings for variables in your message text. Each %@ character in the loc-key is replaced by a value from this array, in the order they appear in the message body.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "badge": {
            "type": "integer",
            "description": "The number you want to display on your app's icon. Set to 0 to remove the current badge, if any."
          },
          "sound": {
            "oneOf": [
              {
                "title": "Regular alert",
                "type": "string",
                "description": "The name of a sound file in your app’s main bundle or in the Library/Sounds folder of your app’s container directory. Use “default” to play the system sound. For critical alerts, you'll pass an object instead."
              },
              {
                "title": "Critical alert",
                "type": "object",
                "properties": {
                  "critical": {
                    "type": "integer",
                    "description": "1 indicates critical. 0 is not critical."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of a sound file in your app’s main bundle or in the Library/Sounds folder of your app’s container directory. Use “default” to play the system sound."
                  },
                  "volume": {
                    "type": "number",
                    "description": "The volume for a critical alert between 0 and 1, where 0 is silent and 1 is full volume."
                  }
                }
              }
            ]
          },
          "thread-id": {
            "type": "string",
            "description": "An identifier to group related notifications."
          },
          "category": {
            "type": "string",
            "description": "The notification’s type. This string must correspond to the identifier of one of the `UNNotificationCategory` objects you register at launch time."
          },
          "content-available": {
            "type": "integer",
            "description": "The background notification flag. Use `1` without an `alert` to perform a silent update. `0` indicates a normal push notification."
          },
          "mutable-content": {
            "type": "integer",
            "description": "If you use the Customer.io SDK, you *must* set this value to `1` to support images and \"delivered\" metrics from your push notifications.\nWhen the value is 1, your notification is passed to your notification service app extension before delivery. Use your extension to modify the notification’s content.\n"
          },
          "target-content-id": {
            "type": "string",
            "description": "The identifier of the window brought forward."
          },
          "interruption-level": {
            "type": "string",
            "description": "Indicates the importance and delivery timing of a notification.",
            "enum": [
              "passive",
              "active",
              "time-sensitive",
              "critical"
            ]
          },
          "relevance-score": {
            "type": "number",
            "description": "A number between 0 and 1. The highest score is considered the \"most relevant\"  and is featured in the notification summary."
          }
        }
      },
      "fcmIosWithSdk": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "object",
            "description": "The base object for all FCM payloads.",
            "required": [
              "apns"
            ],
            "properties": {
              "apns": {
                "type": "object",
                "required": [
                  "payload"
                ],
                "description": "Defines a payload for iOS devices sent through Firebase Cloud Messaging (FCM).",
                "properties": {
                  "headers": {
                    "description": "Headers defined by [Apple's payload reference](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/sending_notification_requests_to_apns) that you want to pass through FCM.",
                    "type": "object"
                  },
                  "payload": {
                    "type": "object",
                    "description": "Contains a push payload.",
                    "properties": {
                      "CIO": {
                        "type": "object",
                        "description": "Contains properties interpreted by the Customer.io iOS SDK.",
                        "required": [
                          "push"
                        ],
                        "properties": {
                          "push": {
                            "type": "object",
                            "description": "A push payload for the iOS SDK.",
                            "properties": {
                              "title": {
                                "$ref": "#/components/schemas/pushTitle"
                              },
                              "body": {
                                "$ref": "#/components/schemas/pushBody"
                              },
                              "link": {
                                "$ref": "#/components/schemas/pushLink"
                              },
                              "image": {
                                "$ref": "#/components/schemas/pushImage"
                              }
                            }
                          }
                        }
                      },
                      "aps": {
                        "$ref": "#/components/schemas/iosSharedOptions"
                      }
                    },
                    "additionalProperties": {
                      "description": "Additional properties that you've set up your app to interpret outside of the Customer.io SDK.",
                      "x-additionalPropertiesName": "Custom key-value pairs"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "fcmIosWithoutSdk": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "object",
            "required": [
              "apns"
            ],
            "description": "The base object for all Firebase payloads.",
            "properties": {
              "apns": {
                "type": "object",
                "description": "Defines a push notification for iOS devices.",
                "required": [
                  "payload"
                ],
                "properties": {
                  "headers": {
                    "description": "Headers defined by [Apple's payload reference](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/sending_notification_requests_to_apns) that you want to pass through FCM.",
                    "type": "object"
                  },
                  "payload": {
                    "type": "object",
                    "properties": {
                      "aps": {
                        "$ref": "#/components/schemas/iosSharedOptions"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "apsBasicPush": {
        "type": "object",
        "required": [
          "aps"
        ],
        "properties": {
          "aps": {
            "type": "object",
            "description": "A push payload intended for an iOS device.",
            "required": [
              "alert"
            ],
            "properties": {
              "alert": {
                "type": "object",
                "description": "An object containing the push title and body",
                "required": [
                  "body"
                ],
                "properties": {
                  "title": {
                    "$ref": "#/components/schemas/pushTitle"
                  },
                  "body": {
                    "$ref": "#/components/schemas/pushBody"
                  }
                }
              }
            }
          },
          "CIO": {
            "type": "object",
            "required": [
              "push"
            ],
            "description": "Contains options supported by the Customer.io SDK.",
            "properties": {
              "push": {
                "type": "object",
                "description": "Describes push notification options supported by the CIO SDK.",
                "properties": {
                  "link": {
                    "$ref": "#/components/schemas/pushLink"
                  },
                  "image": {
                    "$ref": "#/components/schemas/pushImage"
                  }
                }
              }
            }
          }
        }
      },
      "apnsWithoutSdk": {
        "type": "object",
        "properties": {
          "aps": {
            "$ref": "#/components/schemas/iosSharedOptions"
          }
        }
      },
      "iosFcmAndApns": {
        "description": "Your payload changes depending on whether you send to iOS devices through Google's Firebase Cloud Messaging (FCM) or Apple's Push Notification service (APNs).",
        "oneOf": [
          {
            "title": "FCM",
            "$ref": "#/components/schemas/fcmIosWithSdk"
          },
          {
            "title": "APNS",
            "$ref": "#/components/schemas/apnsWithSdk"
          }
        ]
      },
      "apnsWithSdk": {
        "type": "object",
        "properties": {
          "CIO": {
            "type": "object",
            "required": [
              "push"
            ],
            "description": "Contains options supported by the Customer.io SDK.",
            "properties": {
              "push": {
                "type": "object",
                "description": "Describes push notification options supported by the CIO SDK.",
                "properties": {
                  "link": {
                    "$ref": "#/components/schemas/pushLink"
                  },
                  "image": {
                    "$ref": "#/components/schemas/pushImage"
                  }
                }
              }
            }
          },
          "aps": {
            "$ref": "#/components/schemas/iosSharedOptions"
          }
        }
      },
      "widgetColor": {
        "type": "string",
        "description": "The color you want to use for this content. You can only set values here that are defined under [**Content** > **In-App Messages**](https://fly.customer.io/env/last/in-app-messages)."
      },
      "widgetRadius": {
        "type": "integer",
        "description": "Sets the radius of corners for an item in pixels, similar to the `border-radius` CSS property."
      },
      "widgetHeight": {
        "type": "integer",
        "description": "The height of the component in pixels, if you want to constrain it. If you don't set a height or width, we'll scale your content to fit your message or container."
      },
      "widgetWidth": {
        "type": "integer",
        "description": "The width of the component in pixels, if you want to constrain it. If you don't set a height or width, we'll scale your content to fit your message or container."
      },
      "widgetComponents": {
        "description": "An array of child components that you want to make available inside this widget.",
        "type": "array",
        "items": {
          "type": "object"
        }
      },
      "widgetMainAxisAlignment": {
        "type": "string",
        "description": "The mainAxisAlignment property supports the following options.",
        "enum": [
          "start",
          "end",
          "spaceBetween",
          "spaceAround",
          "spaceEvenly"
        ]
      },
      "widgetCrossAxisAlignment": {
        "type": "string",
        "description": "The crossAxisAlignment property supports the following options",
        "enum": [
          "center",
          "start",
          "end",
          "center",
          "stretch",
          "baseline"
        ]
      },
      "textWidget": {
        "description": "Displays text in your message.",
        "type": "object",
        "required": [
          "type",
          "text"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines the widget type.",
            "enum": [
              "textWidget"
            ]
          },
          "text": {
            "type": "string",
            "description": "The text you want to display.",
            "example": "$person.name"
          },
          "style": {
            "type": "string",
            "description": "The style of text you want to display. You can only set values here that are defined under [**Content** > **In-App Messages**](https://fly.customer.io/env/last/in-app-messages)."
          },
          "color": {
            "$ref": "#/components/schemas/widgetColor"
          },
          "textAlign": {
            "type": "string",
            "description": "How you want to align this text.",
            "enum": [
              "center",
              "right",
              "left",
              "start",
              "end",
              "justify"
            ]
          },
          "maxLines": {
            "type": "integer",
            "description": "The maximum lines of text you want to display. Text over this limit is controlled by the `overflow` property. If unset, the message displays an unlimited number of lines."
          },
          "overflow": {
            "type": "string",
            "description": "Determines how to handle text that overflows the `maxLines` limit (if set). By default, we cut off overflowing text with ellipsis (`...`).",
            "enum": [
              "ellipsis",
              "fade",
              "clip"
            ]
          }
        }
      },
      "imageWidget": {
        "description": "Displays an image. You can provide the URL of an image. Or, if you use the template designer, you can upload an image and host it directly.",
        "type": "object",
        "required": [
          "type",
          "image"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines the widget type.",
            "enum": [
              "imageWidget"
            ]
          },
          "image": {
            "description": "The URL of the image that you want ot use in your message.",
            "example": "$person.imageUrl"
          },
          "fit": {
            "type": "string",
            "description": "Determines how the image fits your message. Defaults to `cover`.",
            "enum": [
              "none",
              "fitWidth",
              "cover",
              "contain",
              "scaleDown",
              "fill",
              "fitHeight"
            ]
          },
          "height": {
            "$ref": "#/components/schemas/widgetHeight"
          },
          "width": {
            "$ref": "#/components/schemas/widgetWidth"
          },
          "cornerRadius": {
            "$ref": "#/components/schemas/widgetRadius"
          },
          "fadeInDuration": {
            "type": "integer",
            "description": "The durration for the image to fade in, in milliseconds, similar to the `fadeIn` CSS transition property."
          }
        }
      },
      "iconWidget": {
        "description": "Displays an icon from an icon font that you've loaded into your app or project. You must load your icon font in the assets section of your app configuration.",
        "type": "object",
        "required": [
          "type",
          "color",
          "value"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines the widget type.",
            "enum": [
              "iconWidget"
            ]
          },
          "color": {
            "$ref": "#/components/schemas/widgetColor"
          },
          "font": {
            "description": "The icon font you want to use."
          },
          "size": {
            "description": "The pixel size of the icon.",
            "type": "integer"
          },
          "value": {
            "description": "The value of the icon that you want to use. For example, for font-awesome, you'd use the name of the icon.",
            "type": "string"
          }
        }
      },
      "blockWidget": {
        "type": "object",
        "description": "A widget that provides visual design for one or more child components.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines the widget type.",
            "enum": [
              "blockWidget"
            ]
          },
          "safeInsets": {
            "type": "boolean",
            "description": "Based on the env `safe-area-inset-*` CSS properties. Set to true to ensure that the block can't overflow the defined screen or the defined area of your message. Defaults to `false`.",
            "default": false
          },
          "padding": {
            "type": "array",
            "description": "Defines padding for the block, based on the values set under *Branding* > *Padding*. As with the CSS `padding` property, values in the array represent top, right, bottom, and left padding.",
            "maxItems": 4,
            "items": {
              "type": "string",
              "description": "The padding label you set under *Branding* > *Padding*."
            }
          },
          "backgroundColor": {
            "type": "string",
            "description": "The background color for your block. You must set a value defined under *Branding* > *Colors*."
          },
          "borderColor": {
            "type": "string",
            "description": "The border color for your block, if you set a border width greater than 0. You must set a value defined under *Branding* > *Colors*."
          },
          "borderWidth": {
            "type": "integer",
            "description": "The width of the border for this block in pixels."
          },
          "borderRadius": {
            "$ref": "#/components/schemas/widgetRadius"
          },
          "height": {
            "$ref": "#/components/schemas/widgetHeight"
          },
          "backgroundImage": {
            "type": "string",
            "description": "Set a background image for the block",
            "example": "$user.backgroundImage,"
          },
          "flex": {
            "type": "integer",
            "description": "The single digit syntax for the CSS `flex` property. The value you use here determines the propotional amount of space the block consumes in a parent container."
          },
          "components": {
            "$ref": "#/components/schemas/widgetComponents"
          }
        }
      },
      "conditionalWidget": {
        "description": "Set a true/false condition determining which content to show. Use a variable in your condition to populate the condition when you set up your message in Customer.io.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines the widget type.",
            "enum": [
              "conditionalWidget"
            ]
          },
          "condition": {
            "type": "string",
            "description": "The condition you want to evaluate. You can evaluate a condition using `>`, `<`, `==` & `in` operators. If you don't use an operator, the condition checks if the property is null."
          },
          "true": {
            "type": "object",
            "description": "The component you want to show when your condition is true."
          },
          "false": {
            "type": "object",
            "description": "The component you want to show when your condition is false."
          }
        }
      },
      "actionWidget": {
        "description": "An action is either a link or a way to dismiss your message. The `behaviour` property determines how your app treats the action.",
        "type": "object",
        "required": [
          "type",
          "component",
          "action"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines the widget type.",
            "enum": [
              "actionWidget"
            ]
          },
          "action": {
            "type": "string",
            "description": "The link or place you want to send a person. This is either a deep link in your app, a web address, a `mailto` link, or a way to close the message (`gist://close`)."
          },
          "behaviour": {
            "type": "string",
            "description": "* `push`: pushes a new route into the navigation stack.\n* `system`: offloads the action onto the operating system. Actions like `mailto:support@bourbon.sh` will open the default email client.\n* `back`: pops the navigation stack one step back.\n* `retain`: retain replaces the current view with a new route.\n",
            "enum": [
              "push",
              "system",
              "back",
              "retain"
            ]
          },
          "component": {
            "type": "object",
            "description": "The component a person taps to perform the action defined in this widget."
          }
        }
      },
      "fixedListWidget": {
        "description": "Displays a series of components in a vertical list.",
        "type": "object",
        "properties": {
          "type": {
            "description": "Defines the widget type.",
            "enum": [
              "fixedListWidget"
            ]
          },
          "mainAxisAlignment": {
            "$ref": "#/components/schemas/widgetMainAxisAlignment"
          },
          "crossAxisAlignment": {
            "$ref": "#/components/schemas/widgetCrossAxisAlignment"
          },
          "components": {
            "$ref": "#/components/schemas/widgetComponents"
          }
        }
      },
      "fixedHorizontalListWidget": {
        "description": "Displays a series of components in a horizontal list, like if you want to put an image and text next to each other.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines the widget type.",
            "enum": [
              "fixedHorizontalListWidget"
            ]
          },
          "mainAxisAlignment": {
            "$ref": "#/components/schemas/widgetMainAxisAlignment"
          },
          "crossAxisAlignment": {
            "$ref": "#/components/schemas/widgetCrossAxisAlignment"
          },
          "components": {
            "$ref": "#/components/schemas/widgetComponents"
          }
        }
      },
      "fixedHorizontalScrollWidget": {
        "type": "object",
        "description": "A series of components that you can scroll through, like a carousel.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines the widget type",
            "enum": [
              "fixedHorizontalListScrollWidget"
            ]
          },
          "height": {
            "type": "integer",
            "description": "The height of the widget in pixels."
          },
          "components": {
            "$ref": "#/components/schemas/widgetComponents"
          }
        }
      },
      "fixedGridWidget": {
        "description": "Used to layout an in-app message in a fixed grid.",
        "type": "object",
        "required": [
          "type",
          "components",
          "columns"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines the widget type.",
            "enum": [
              "fixedGridWidget"
            ]
          },
          "itemPadding": {
            "type": "string",
            "description": "The padding between items in your grid."
          },
          "columns": {
            "type": "integer",
            "description": "The number of columns in your grid."
          },
          "childAspectRatio": {
            "type": "number",
            "description": "The aspect ratio for items in the grid. Defaults to 1.0"
          },
          "components": {
            "$ref": "#/components/schemas/widgetComponents"
          }
        }
      },
      "inAppMessageEventDetail": {
        "type": "object",
        "description": "An object containing message specific data depending on the event type.",
        "properties": {
          "messageId": {
            "type": "string",
            "description": "Identifier string of the in-app message."
          },
          "deliveryId": {
            "type": "string",
            "description": "Delivery Id for the corresponding in-app message (not present in test message)."
          }
        }
      },
      "inAppMessageOpenedEvent": {
        "type": "object",
        "description": "Event object passed to the listener function when user is shown an in-app message.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines the event type.",
            "enum": [
              "in-app:message-opened"
            ]
          },
          "detail": {
            "$ref": "#/components/schemas/inAppMessageEventDetail"
          }
        }
      },
      "inAppMessageDismissedEvent": {
        "type": "object",
        "description": "Event object passed to the listener function when user dismisses an in-app message.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines the event type.",
            "enum": [
              "in-app:message-dismissed"
            ]
          },
          "detail": {
            "$ref": "#/components/schemas/inAppMessageEventDetail"
          }
        }
      },
      "inAppMessageActionEvent": {
        "type": "object",
        "description": "Event object passed to the listener function when user performs an action in the in-app message.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines the event type.",
            "enum": [
              "in-app:message-action"
            ]
          },
          "detail": {
            "type": "object",
            "properties": {
              "messageId": {
                "type": "string",
                "description": "Identifier string of the in-app message."
              },
              "deliveryId": {
                "type": "string",
                "description": "Delivery Id for the corresponding in-app message (not present in test message)."
              },
              "actionName": {
                "type": "string",
                "description": "The name of the action specified when building the in-app message."
              },
              "actionValue": {
                "type": "string",
                "description": "The type of action that triggered the event."
              }
            }
          }
        }
      },
      "inAppMessageErrorEvent": {
        "type": "object",
        "description": "Event object passed to the listener function when an error occurs.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines the event type.",
            "enum": [
              "in-app:message-error"
            ]
          },
          "detail": {
            "$ref": "#/components/schemas/inAppMessageEventDetail"
          }
        }
      },
      "errors": {
        "type": "array",
        "description": "An array of errors, where each object represents a different error.",
        "items": {
          "type": "object",
          "properties": {
            "reason": {
              "type": "string",
              "description": "The reason for the error."
            },
            "field": {
              "type": "string",
              "description": "The field containing the error."
            },
            "message": {
              "type": "string",
              "description": "A detailed description of the error in the offending field."
            }
          }
        }
      },
      "object_operations": {
        "title": "Object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/object_identify"
          },
          {
            "$ref": "#/components/schemas/object_identify_anonymous"
          },
          {
            "$ref": "#/components/schemas/object_delete"
          },
          {
            "$ref": "#/components/schemas/object_add_relationships"
          },
          {
            "$ref": "#/components/schemas/object_delete_relationships"
          }
        ],
        "discriminator": {
          "propertyName": "action",
          "mapping": {
            "identify": "#/components/schemas/object_identify",
            "identify_anonymous": "#/components/schemas/object_identify_anonymous",
            "delete": "#/components/schemas/object_delete",
            "add_relationships": "#/components/schemas/object_add_relationships",
            "delete_relationships": "#/components/schemas/object_delete_relationships"
          }
        }
      },
      "person_operations": {
        "title": "Person",
        "oneOf": [
          {
            "$ref": "#/components/schemas/identify_person"
          },
          {
            "$ref": "#/components/schemas/person_delete"
          },
          {
            "$ref": "#/components/schemas/person_event"
          },
          {
            "$ref": "#/components/schemas/person_screen"
          },
          {
            "$ref": "#/components/schemas/person_page"
          },
          {
            "$ref": "#/components/schemas/person_add_relationships"
          },
          {
            "$ref": "#/components/schemas/person_delete_relationships"
          },
          {
            "$ref": "#/components/schemas/person_add_device"
          },
          {
            "$ref": "#/components/schemas/person_delete_device"
          },
          {
            "$ref": "#/components/schemas/person_merge"
          },
          {
            "$ref": "#/components/schemas/person_suppress"
          },
          {
            "$ref": "#/components/schemas/person_unsuppress"
          }
        ],
        "discriminator": {
          "propertyName": "action",
          "mapping": {
            "identify": "#/components/schemas/identify_person",
            "delete": "#/components/schemas/person_delete",
            "event": "#/components/schemas/person_event",
            "screen": "#/components/schemas/person_screen",
            "page": "#/components/schemas/person_page",
            "add_relationships": "#/components/schemas/person_add_relationships",
            "delete_relationships": "#/components/schemas/person_delete_relationships",
            "add_device": "#/components/schemas/person_add_device",
            "delete_device": "#/components/schemas/person_delete_device",
            "merge": "#/components/schemas/person_merge",
            "suppress": "#/components/schemas/person_suppress",
            "unsuppress": "#/components/schemas/person_unsuppress"
          }
        }
      },
      "person_common": {
        "type": "object",
        "required": [
          "type",
          "identifiers"
        ],
        "properties": {
          "type": {
            "description": "The operation modifies a person in Customer.io",
            "type": "string",
            "enum": [
              "person"
            ]
          },
          "identifiers": {
            "description": "The person you want to perform an action for—one of either `id`, `email`, or `cio_id`. You cannot pass multiple identifiers.",
            "oneOf": [
              {
                "title": "id",
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/not_nullable_customer_id"
                  }
                }
              },
              {
                "title": "email",
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/not_nullable_email_address"
                  }
                }
              },
              {
                "title": "cio_id",
                "type": "object",
                "required": [
                  "cio_id"
                ],
                "properties": {
                  "cio_id": {
                    "$ref": "#/components/schemas/cio_id"
                  }
                }
              }
            ]
          }
        }
      },
      "person_attributes": {
        "type": "object",
        "description": "Attributes that you want to add or update for this person.",
        "properties": {
          "cio_subscription_preferences": {
            "$ref": "#/components/schemas/cio_subscription_preferences"
          }
        }
      },
      "object_relationships": {
        "type": "array",
        "description": "Each object in the array represents a relationship you want to add to, or remove from, a person.",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/object_identifiers"
            },
            {
              "type": "object",
              "properties": {
                "relationship_attributes": {
                  "$ref": "#/components/schemas/relationship_attributes"
                }
              }
            }
          ]
        }
      },
      "relationship_attributes": {
        "type": "object",
        "description": "The attributes associated with a relationship. Passing null or an empty string removes the attribute from the relationship.\n",
        "additionalProperties": {
          "x-additionalPropertiesName": "Relationship Attributes"
        },
        "example": {
          "role": "admin"
        }
      },
      "object_attributes": {
        "type": "object",
        "description": "The data that belongs to the object. This is information you might want to associate with people later (through `cio_relationships`). Passing `null` or an empty string removes the attribute from the object. Some attributes have special meaning. Please refer to the list of [reserved attributes](/journeys/objects-create/#reserved-attributes).\n"
      },
      "object_common_identify": {
        "type": "object",
        "required": [
          "type",
          "identifiers"
        ],
        "properties": {
          "identifiers": {
            "description": "The identifiers for a custom object. When identifying a new object, you *must* use both the `object_type_id` and `object_id` (where `object_type_id` is an integer representing the type of object and the `object_id` is the individual identifier for the object).\n\nIf you're updating an existing object, you can use either the `object_type_id` and `object_id` or the `cio_object_id` (where `cio_object_id` is an immutable unique value that Customer.io sets for an object when you create it).\n",
            "oneOf": [
              {
                "title": "Object ID (create and update)",
                "type": "object",
                "required": [
                  "object_type_id",
                  "object_id"
                ],
                "properties": {
                  "object_type_id": {
                    "$ref": "#/components/schemas/object_type_id"
                  },
                  "object_id": {
                    "type": "string",
                    "description": "The unique identifier for an object. If you use an `object_id` that already exists, we'll update the object accordingly.",
                    "nullable": false,
                    "example": "acme"
                  }
                }
              },
              {
                "title": "CIO Object ID (updates only)",
                "type": "object",
                "required": [
                  "cio_object_id"
                ],
                "properties": {
                  "cio_object_id": {
                    "type": "string",
                    "description": "A unique value that Customer.io sets for an object when you create it. This ID is immutable.",
                    "example": "obb7fd050101"
                  }
                }
              }
            ]
          },
          "type": {
            "description": "The operation modifies a single object—non person data.",
            "type": "string",
            "enum": [
              "object"
            ]
          }
        }
      },
      "object_common": {
        "allOf": [
          {
            "$ref": "#/components/schemas/object_identifiers"
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "description": "The operation modifies a single object—non person data.",
                "type": "string",
                "enum": [
                  "object"
                ]
              }
            }
          }
        ]
      },
      "v2_cio_relationships": {
        "type": "array",
        "description": "The people you want to associate with an object. Each object in the array represents a person.",
        "items": {
          "type": "object",
          "properties": {
            "identifiers": {
              "oneOf": [
                {
                  "title": "id",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/not_nullable_customer_id"
                    }
                  }
                },
                {
                  "title": "email",
                  "type": "object",
                  "properties": {
                    "email": {
                      "$ref": "#/components/schemas/not_nullable_email_address"
                    }
                  }
                },
                {
                  "title": "cio_id",
                  "type": "object",
                  "properties": {
                    "cio_id": {
                      "$ref": "#/components/schemas/cio_id"
                    }
                  }
                }
              ]
            },
            "relationship_attributes": {
              "type": "object",
              "description": "The attributes associated with a relationship. Passing null or an empty string removes the attribute from the relationship.\n",
              "additionalProperties": {
                "x-additionalPropertiesName": "Relationship Attributes"
              }
            }
          },
          "example": {
            "identifiers": {
              "id": "42"
            },
            "relationship_attributes": {
              "role": "admin",
              "date_created": 1702480414
            }
          }
        }
      },
      "v1_cio_relationships": {
        "type": "object",
        "description": "Describes relationships to an entity—a non-person object in Customer.io, like a company, educational course, job board, etc.",
        "properties": {
          "action": {
            "type": "string",
            "description": "This determines whether the `relationships` array adds relationships to a person or removes them from a person.",
            "enum": [
              "add_relationships",
              "delete_relationships"
            ]
          },
          "relationships": {
            "$ref": "#/components/schemas/object_relationships"
          }
        }
      },
      "object_identify": {
        "type": "object",
        "title": "identify",
        "description": "The `action` determines the type of operation you want to perform with an object. If `identifiers.object_id` does not exist, we'll create a new object; if it exists, we'll update the object accordingly.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/object_common_identify"
          },
          {
            "type": "object",
            "required": [
              "action"
            ],
            "properties": {
              "action": {
                "type": "string",
                "description": "Indicates that the operation will `identify` the the item of the specified `type`.",
                "enum": [
                  "identify"
                ]
              },
              "attributes": {
                "$ref": "#/components/schemas/object_attributes"
              },
              "cio_relationships": {
                "$ref": "#/components/schemas/v2_cio_relationships"
              }
            }
          }
        ]
      },
      "object_identify_anonymous": {
        "title": "identify_anonymous",
        "description": "The `identify_anonymous` action lets you relate an object to a person who hasn't yet identified themselves by anonymous_id. When you identify the person, their anonymous relationship will carry over to the identified profile.",
        "allOf": [
          {
            "$ref": "#/components/schemas/object_common_identify"
          },
          {
            "type": "object",
            "required": [
              "action"
            ],
            "properties": {
              "action": {
                "type": "string",
                "description": "Indicates that the operation will `identify` the item of the specified `type` and relate it to an `anonymous_id`.",
                "enum": [
                  "identify_anonymous"
                ]
              },
              "attributes": {
                "$ref": "#/components/schemas/object_attributes"
              },
              "cio_relationships": {
                "type": "array",
                "description": "The anonymous people you want to associate with an object. Each object in the array contains an `anonymous_id` representing a person you haven't yet identified by `id` or `email`.",
                "items": {
                  "type": "object",
                  "properties": {
                    "identifiers": {
                      "type": "object",
                      "properties": {
                        "anonymous_id": {
                          "$ref": "#/components/schemas/anonymous_id"
                        }
                      }
                    },
                    "relationship_attributes": {
                      "type": "object",
                      "description": "Coming October 2023 - The attributes associated with a relationship. Passing null or an empty string removes the attribute from the relationship."
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "object_add_relationships": {
        "title": "add_relationships",
        "description": "Add relationships between an object and one or more people.",
        "allOf": [
          {
            "$ref": "#/components/schemas/object_common"
          },
          {
            "type": "object",
            "required": [
              "action",
              "cio_relationships"
            ],
            "properties": {
              "action": {
                "type": "string",
                "description": "This operation associates an object with one or more people.",
                "enum": [
                  "add_relationships"
                ]
              },
              "cio_relationships": {
                "$ref": "#/components/schemas/v2_cio_relationships"
              }
            }
          }
        ]
      },
      "person_add_relationships": {
        "title": "add_relationships",
        "description": "Associate multiple objects with a person.",
        "allOf": [
          {
            "$ref": "#/components/schemas/person_common"
          },
          {
            "type": "object",
            "required": [
              "action",
              "cio_relationships"
            ],
            "properties": {
              "action": {
                "type": "string",
                "description": "This operation associates a person with one or more objects.",
                "enum": [
                  "add_relationships"
                ]
              },
              "cio_relationships": {
                "$ref": "#/components/schemas/object_relationships"
              }
            }
          }
        ]
      },
      "object_delete_relationships": {
        "title": "delete_relationships",
        "description": "Delete relationships between an object and one or more people.",
        "allOf": [
          {
            "$ref": "#/components/schemas/object_common"
          },
          {
            "type": "object",
            "required": [
              "action",
              "cio_relationships"
            ],
            "properties": {
              "action": {
                "type": "string",
                "description": "This operation deletes an object relationship from one or more people.",
                "enum": [
                  "delete_relationships"
                ]
              },
              "cio_relationships": {
                "$ref": "#/components/schemas/v2_cio_relationships"
              }
            }
          }
        ]
      },
      "person_delete_relationships": {
        "title": "delete_relationships",
        "description": "Remove multiple object relationships from a person.",
        "allOf": [
          {
            "$ref": "#/components/schemas/person_common"
          },
          {
            "type": "object",
            "required": [
              "action",
              "cio_relationships"
            ],
            "properties": {
              "action": {
                "type": "string",
                "description": "This operation deletes an object relationship from one or more people.",
                "enum": [
                  "delete_relationships"
                ]
              },
              "cio_relationships": {
                "$ref": "#/components/schemas/object_relationships"
              }
            }
          }
        ]
      },
      "object_delete": {
        "title": "delete",
        "description": "Delete an object. This also removes relationships from people.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/object_common"
          },
          {
            "type": "object",
            "required": [
              "action"
            ],
            "properties": {
              "action": {
                "type": "string",
                "description": "Indicates that the operation will `delete` the the item of the specified `type`.",
                "enum": [
                  "delete"
                ]
              }
            }
          }
        ]
      },
      "identify_person": {
        "title": "identify",
        "description": "Add or update a person.",
        "allOf": [
          {
            "$ref": "#/components/schemas/person_common"
          },
          {
            "type": "object",
            "required": [
              "action"
            ],
            "properties": {
              "action": {
                "type": "string",
                "description": "Indicates that the operation will `identify` the the item of the specified `type`.",
                "enum": [
                  "identify"
                ]
              },
              "attributes": {
                "$ref": "#/components/schemas/person_attributes"
              },
              "cio_relationships": {
                "$ref": "#/components/schemas/object_relationships"
              }
            }
          }
        ]
      },
      "person_delete": {
        "title": "delete",
        "description": "Delete a person from your workspace.",
        "allOf": [
          {
            "$ref": "#/components/schemas/person_common"
          },
          {
            "type": "object",
            "required": [
              "action"
            ],
            "properties": {
              "action": {
                "type": "string",
                "description": "Indicates that the operation will `delete` the the item of the specified `type`.",
                "enum": [
                  "delete"
                ]
              }
            }
          }
        ]
      },
      "person_add_device": {
        "title": "add_device",
        "description": "Assign devices to a person.",
        "allOf": [
          {
            "$ref": "#/components/schemas/person_common"
          },
          {
            "type": "object",
            "required": [
              "action",
              "device"
            ],
            "properties": {
              "action": {
                "type": "string",
                "description": "Add a mobile device to a person's profile.",
                "enum": [
                  "add_device"
                ]
              },
              "device": {
                "description": "The properties representing an individual device. [Our SDK's](/sdk/) gather all the properties defined below automatically, unless you disable the `autoTrackDeviceAttributes` setting. You can reference the properties outside the `attributes` object in segments.",
                "allOf": [
                  {
                    "type": "object",
                    "required": [
                      "token"
                    ],
                    "properties": {
                      "token": {
                        "description": "The device token.",
                        "type": "string"
                      }
                    }
                  },
                  {
                    "$ref": "#/components/schemas/device_object_common"
                  }
                ]
              }
            }
          }
        ]
      },
      "person_delete_device": {
        "title": "delete_device",
        "description": "Delete devices that belong to a person.",
        "allOf": [
          {
            "$ref": "#/components/schemas/person_common"
          },
          {
            "type": "object",
            "required": [
              "action",
              "device"
            ],
            "properties": {
              "action": {
                "type": "string",
                "description": "Delete a device from a person's profile.",
                "enum": [
                  "delete_device"
                ]
              },
              "device": {
                "description": "The device you want to remove.",
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "description": "The token of the device you want to remove.",
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "person_suppress": {
        "title": "suppress",
        "description": "Suppress a person's identifier(s) in Customer.io, so that you can't message a person or add their identifiers back to your workspace. This is separate from suppressions performed by your email provider.",
        "allOf": [
          {
            "$ref": "#/components/schemas/person_common"
          },
          {
            "type": "object",
            "required": [
              "action"
            ],
            "properties": {
              "action": {
                "type": "string",
                "description": "Suppress a person's identifier(s) in Customer.io, so that you can't message a person or add their identifiers back to your workspace. This is separate from suppressions performed by your email provider.",
                "enum": [
                  "suppress"
                ]
              }
            }
          }
        ]
      },
      "person_unsuppress": {
        "title": "unsuppress",
        "description": "Unsuppress a person's identifier(s) in Customer.io, so that you can message a person or add their identifiers back to your workspace. This does not unsuppress addresses that were previously suppressed by your email provider.",
        "allOf": [
          {
            "$ref": "#/components/schemas/person_common"
          },
          {
            "type": "object",
            "required": [
              "action"
            ],
            "properties": {
              "action": {
                "type": "string",
                "description": "Unsuppress a person's identifier(s) in Customer.io, so that you can message a person or add their identifiers back to your workspace. This does not unsuppress addresses that were previously suppressed by your email provider.",
                "enum": [
                  "unsuppress"
                ]
              }
            }
          }
        ]
      },
      "person_merge": {
        "type": "object",
        "description": "Merge two people. You'll merge the `secondary` person into the `primary`. The primary profile remains after the merge and the secondary is deleted. This operation is _not_ reversible. See our page on [merging duplicate people](/merge-people/) for more information.\n",
        "required": [
          "type",
          "primary",
          "secondary",
          "action"
        ],
        "properties": {
          "type": {
            "description": "The operation modifies a person in Customer.io",
            "type": "string",
            "enum": [
              "person"
            ]
          },
          "action": {
            "type": "string",
            "description": "Merge two people. You'll merge the `secondary` person into the `primary`. The primary profile remains after the merge and the secondary is deleted. This operation is _not_ reversible. See our page on [merging duplicate people](/merge-people/) for more information.\n",
            "enum": [
              "merge"
            ]
          },
          "primary": {
            "description": "The person that you want to remain after the merge, identified by one of `id`, `email`, or `cio_id`. This person receives information from the secondary person in the merge. \n        \nIf email is disabled as an identifier in your [workspace settings](https://fly.customer.io/workspaces/last/settings/edit), then you must reference people by `id` or `cio_id`. Under How to Modify, `id` must be set to \"Reference people by cio_id\" for a successful merge. \n",
            "oneOf": [
              {
                "title": "id",
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/not_nullable_customer_id"
                  }
                }
              },
              {
                "title": "email",
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/not_nullable_email_address"
                  }
                }
              },
              {
                "title": "cio_id",
                "type": "object",
                "required": [
                  "cio_id"
                ],
                "properties": {
                  "cio_id": {
                    "$ref": "#/components/schemas/cio_id"
                  }
                }
              }
            ]
          },
          "secondary": {
            "description": "The person that you want to delete after the merge, identified by one of `id`, `email`, or `cio_id`. This person's information is merged into the primary person's profile and then it is deleted.\n      \nIf email is disabled as an identifier in your [workspace settings](https://fly.customer.io/workspaces/last/settings/edit), then you must reference people by `id` or `cio_id`. Under How to Modify, `id` must be set to \"Reference people by cio_id\" for a successful merge.\n",
            "oneOf": [
              {
                "title": "id",
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/not_nullable_customer_id"
                  }
                }
              },
              {
                "title": "email",
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/not_nullable_email_address"
                  }
                }
              },
              {
                "title": "cio_id",
                "type": "object",
                "required": [
                  "cio_id"
                ],
                "properties": {
                  "cio_id": {
                    "$ref": "#/components/schemas/cio_id"
                  }
                }
              }
            ]
          }
        }
      },
      "person_event": {
        "description": "A custom event attributed to a person. You can use events to trigger campaigns, or reference event information using liquid in your messages.",
        "allOf": [
          {
            "$ref": "#/components/schemas/person_common"
          },
          {
            "type": "object",
            "required": [
              "action",
              "name"
            ],
            "properties": {
              "action": {
                "type": "string",
                "description": "A custom event attributed to the specified person.",
                "enum": [
                  "event"
                ]
              },
              "id": {
                "type": "string",
                "format": "ULID",
                "description": "A valid ULID used to deduplicate events. Note - our Python and Ruby libraries do not pass this id."
              },
              "name": {
                "type": "string",
                "description": "The name of the event. This is how you'll find your event in Customer.io or select it when using events as campaign triggers."
              },
              "timestamp": {
                "type": "integer",
                "description": "The Unix timestamp when the event happened."
              },
              "attributes": {
                "type": "object",
                "description": "Additional information that you might want to reference in a message using liquid or use to set attributes on the identified person.\n",
                "additionalProperties": {
                  "x-additionalPropertiesName": "liquid merge data",
                  "description": "Insert key-values that you want to reference in your message here."
                },
                "properties": {
                  "recipient": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address of the person associated with the event, overriding the `to` field in emails triggered by the event."
                  },
                  "from_address": {
                    "type": "string",
                    "format": "email",
                    "description": "The address you want to trigger messages from, overriding the `from` field in emails triggered by the event."
                  },
                  "reply_to": {
                    "type": "string",
                    "format": "email",
                    "description": "The address you want to receive replies to, overriding the `reply to` field for emails triggered by the event."
                  }
                }
              }
            }
          }
        ]
      },
      "person_screen": {
        "description": "A mobile \"screenview\" event attributed to a person. Our `screen` and `page` event types are more specific than our standard `event`, and help you track and target people based on the pages people visit in your mobile app or website.",
        "allOf": [
          {
            "$ref": "#/components/schemas/person_common"
          },
          {
            "type": "object",
            "required": [
              "action",
              "name"
            ],
            "properties": {
              "action": {
                "type": "string",
                "description": "A mobile \"screenview\" event attributed to a person. Our `screen` and `page` event types are more specific than our standard `event`, and help you track and target people based on the pages people visit in your mobile app or website.",
                "enum": [
                  "screen"
                ]
              },
              "id": {
                "type": "string",
                "format": "ULID",
                "description": "A valid ULID used to deduplicate events. Note - our Python and Ruby libraries do not pass this id."
              },
              "name": {
                "type": "string",
                "description": "The name of the screen a person visited. This is how you'll find and select screen view events in Customer.io."
              },
              "timestamp": {
                "type": "integer",
                "description": "The Unix timestamp when the event happened."
              },
              "attributes": {
                "type": "object",
                "description": "Additional information that you might want to reference in a message using liquid or use to set attributes on the identified person.",
                "additionalProperties": {
                  "x-additionalPropertiesName": "liquid merge data",
                  "description": "Insert key-values that you want to reference in your message here."
                }
              }
            }
          }
        ]
      },
      "person_page": {
        "description": "A web \"pageview\" event attributed to a person. Our `screen` and `page` event types are more specific than our standard `event`, and help you track and target people based on the pages people visit in your mobile app or website.",
        "allOf": [
          {
            "$ref": "#/components/schemas/person_common"
          },
          {
            "type": "object",
            "required": [
              "action",
              "name"
            ],
            "properties": {
              "action": {
                "type": "string",
                "description": "A web \"pageview\" event attributed to a person. Our `screen` and `page` event types are more specific than our standard `event`, and help you track and target people based on the pages people visit in your mobile app or website.",
                "enum": [
                  "screen"
                ]
              },
              "id": {
                "type": "string",
                "format": "ULID",
                "description": "A valid ULID used to deduplicate events. Note - our Python and Ruby libraries do not pass this id."
              },
              "name": {
                "type": "string",
                "description": "The name of the page or page path that a person visited. This is how you'll find and select page view events in Customer.io."
              },
              "timestamp": {
                "type": "integer",
                "description": "The Unix timestamp when the event happened."
              },
              "attributes": {
                "type": "object",
                "description": "Additional information that you might want to reference in a message using liquid or use to set attributes on the identified person.",
                "additionalProperties": {
                  "x-additionalPropertiesName": "liquid merge data",
                  "description": "Insert key-values that you want to reference in your message here."
                }
              }
            }
          }
        ]
      },
      "track-metrics": {
        "description": "The base properties shared across multiple metric types.",
        "type": "object",
        "required": [
          "delivery_id"
        ],
        "properties": {
          "delivery_id": {
            "type": "string",
            "description": "The CIO-Delivery-ID from the notification that you want to associate the `event` with.",
            "example": "RPILAgUBcRhIBqSfeiIwdIYJKxTY"
          },
          "timestamp": {
            "type": "integer",
            "format": "unix timestamp",
            "description": "The unix timestamp when the event occurred.",
            "example": 1613063089
          }
        }
      },
      "delivery_operations": {
        "title": "Delivery",
        "description": "The \"delivery\" type lets you attribute metrics to messages that don't self-report back to Customer.io, like push and in-app notifications.",
        "type": "object",
        "required": [
          "type",
          "action",
          "identifiers",
          "name",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The \"delivery\" type lets you attribute metrics to messages that don't self-report back to Customer.io, like push and in-app notifications.",
            "enum": [
              "delivery"
            ]
          },
          "action": {
            "type": "string",
            "description": "An `event` action indicates a delivery event. Use the `name` to determine the specific metric that you want to attribute to this delivery.",
            "enum": [
              "event"
            ]
          },
          "identifiers": {
            "type": "object",
            "description": "Contains identifiers for the delivery itself.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The `delivery_id` for the delivery that you want to attribute metrics to."
              }
            }
          },
          "name": {
            "type": "string",
            "description": "The name of the metric you want to attribute to this \"delivery\".",
            "enum": [
              "opened",
              "converted",
              "delivered"
            ]
          },
          "attributes": {
            "type": "object",
            "required": [
              "device_token"
            ],
            "description": "Contains information about the delivery and the individual who received the message.",
            "properties": {
              "device_token": {
                "type": "string",
                "description": "The device that received the message."
              }
            }
          }
        }
      },
      "cio_subscription_preferences": {
        "description": "Stores your audience's subscription preferences if you enable our [subscription center](/subscription-center/) feature. These items are set automatically when people use the unsubscribe link in your messages, but you can set preferences outside the subscription flow. To update select topic preferences while preserving those set for other topics, use JSON dot notation `\"cio_subscription_preferences.topics.topic_<topic ID>\":<boolean>`.",
        "type": "object",
        "properties": {
          "topics": {
            "type": "object",
            "description": "Contains active topics in your workspace, named `topic_<id>`.",
            "additionalProperties": {
              "x-additionalPropertiesName": "topic_<id>",
              "description": "Each property is a boolean named `topic_<id>`. Topic `id` values begin at `1` and increment for each new topic. You can find your topic ids in [Workspace Settings](https://fly.customer.io/workspaces/last/settings/subscription_center/topics) or by querying our [App API](https://customer.io/api/app/#operation/getTopics). For each boolean, `true` means that a person is subscribed to the topic; false means they are unsubscribed. An empty or missing value reverts to the default preference for the topic (opt-in or opt-out).",
              "type": "boolean"
            }
          }
        },
        "example": {
          "topics": {
            "topic_1": true,
            "topic_2": false,
            "topic_3": true
          }
        }
      },
      "workspace": {
        "description": "Contains workspace properties including the count of messages, people, and objects. Customer.io caches these counts, so your data may be up to two hours old.",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the workspace.",
            "example": "13XXXX"
          },
          "name": {
            "type": "string",
            "description": "The name of the workspace.",
            "example": "Workspace 1"
          },
          "messages_sent": {
            "type": "integer",
            "description": "The count of [messages sent](/journeys/message-statuses/#sent) via any channel (email, SMS, in-app, push, slack) in the current billing period.",
            "example": 100202
          },
          "billable_messages_sent": {
            "type": "integer",
            "description": "The count of [emails sent](/journeys/message-statuses/#sent) that are considered for billing in your current billing period. Ultimately, we only bill for the overages on your plan.",
            "example": 75124
          },
          "people": {
            "type": "integer",
            "description": "The current count of people profiles in the workspace. Updates roughly every hour.",
            "example": 25666
          },
          "object_types": {
            "type": "integer",
            "description": "The current count of object types in the workspace. Updates roughly every hour.",
            "example": 4
          },
          "objects": {
            "type": "integer",
            "description": "The current count of object profiles in the workspace. Updates roughly every hour.",
            "example": 10
          }
        }
      },
      "campaign_actions": {
        "type": "array",
        "description": "An array of actions contained within the campaign.",
        "items": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The action type.",
              "example": "email"
            },
            "id": {
              "type": "integer",
              "description": "The identifier for the action.",
              "example": 259
            }
          }
        }
      },
      "campaign_name": {
        "type": "string",
        "description": "The name of the campaign.",
        "readOnly": true
      },
      "active": {
        "type": "boolean",
        "description": "If true, the campaign is active and can still send messages."
      },
      "state": {
        "type": "string",
        "description": "The status of the campaign.",
        "enum": [
          "running",
          "draft",
          "stopped"
        ]
      },
      "first_started": {
        "type": "integer",
        "format": "unix timestamp",
        "description": "The date and time when you first started the campaign and it first became eligible to be triggered.",
        "example": 1552341937
      },
      "tags": {
        "type": "array",
        "description": "An array of tags you set on this campaign.",
        "items": {
          "type": "string"
        },
        "example": [
          "new",
          "welcome"
        ]
      },
      "filter_segment_ids": {
        "description": "A list of segments used in the campaign filter, returned if the campaign audience was filtered on one or more segments.",
        "type": "array",
        "items": {
          "type": "integer"
        },
        "example": [
          21,
          42
        ]
      },
      "object_type_id_trigger": {
        "description": "The the object type ID of the trigger.",
        "type": "integer"
      },
      "filter_object_attributes": {
        "description": "A list of object attributes used in the campaign filter, returned if the campaign audience was filtered on one or more object attributes.",
        "type": "string",
        "example": "{\"and\":[{\"object_attribute\":{\"type_id\":1,\"field\":\"name\",\"operator\":\"eq\",\"value\":\"sfa\"}},{\"object_attribute\":{\"type_id\":1,\"field\":\"renewal_date\",\"operator\":\"eq\",\"value\":\"sdfs\"}}]}"
      },
      "filter_relationship_attributes": {
        "description": "A list of relationship attributes used in the campaign filter, returned if the campaign audience was filtered on one or more relationship attributes.",
        "type": "string",
        "example": "{\"and\":[{\"relationship_attribute\":{\"type_id\":1,\"field\":\"email\",\"operator\":\"eq\",\"value\":\"dscs@test.com\"}},{\"relationship_attribute\":{\"type_id\":1,\"field\":\"trig\",\"operator\":\"eq\",\"value\":\"false\"}}]}"
      }
    },
    "parameters": {
      "object_type_id": {
        "name": "object_type_id",
        "description": "The object type an object belongs to—like \"Companies\" or \"Accounts\". Object type IDs begin at `1` and increment for each new type.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer",
          "example": 1
        }
      },
      "object_id": {
        "name": "object_id",
        "description": "The `object_id` or `cio_object_id` of an object, depending on the `id_type` specified in query params. `id_type` defaults to `object_id`.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "abc123"
        }
      },
      "suppression_type": {
        "name": "suppression_type",
        "description": "The reason a person's email address was suppressed by the email service provider (ESP).",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "bounces",
            "spam_reports"
          ]
        }
      },
      "transactional_id": {
        "name": "transactional_id",
        "description": "The identifier of your transactional message. You'll find this in the UI or URL of your transactional message. For example, if this is the path of a transactional message URL - `/transactional/3/templates/139` - the `transactional_id` is 3.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "collection_id": {
        "name": "collection_id",
        "description": "The identifier for a collection.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "delivery_id": {
        "name": "delivery_id",
        "description": "The delivery resulting in a request to unsubscribe.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "activityTypes": {
        "name": "type",
        "description": "The type of activity you want to search for. Types with `_o:<object_type_id>` are for objects and types with `_r:<object_type_id>` are for relationships.",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/activityTypes"
        }
      },
      "sender_id": {
        "name": "sender_id",
        "in": "path",
        "required": true,
        "description": "The identifier of a sender.",
        "schema": {
          "type": "integer"
        }
      },
      "sort": {
        "name": "sort",
        "in": "query",
        "description": "Determine how you want to sort results, `asc` for chronological order and `desc` for reverse chronological order.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ]
        }
      },
      "activityName": {
        "name": "name",
        "in": "query",
        "description": "The name of the event or attribute you want to return.",
        "required": false,
        "schema": {
          "type": "string",
          "example": "something_happened"
        }
      },
      "deleted": {
        "name": "deleted",
        "in": "query",
        "description": "If true, return results for deleted people.",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "customer_id_query": {
        "name": "customer_id",
        "required": false,
        "in": "query",
        "description": "The `identifier` of the person you want to look up. By default, this is a person's `id`. You can use the `id_type` parameter to look up a person by `email` or `cio_id`.\n\nIf you use a person's `cio_id`, you must prefix the value value with `cio_` when using it to find or reference a person (i.e. `cio_03000010` for a `cio_id` value of 03000010).\n",
        "schema": {
          "type": "string"
        }
      },
      "object_id_type": {
        "name": "id_type",
        "required": false,
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "object_id",
            "cio_object_id"
          ],
          "default": "object_id"
        }
      },
      "id_type": {
        "name": "id_type",
        "required": false,
        "in": "query",
        "description": "The type of `customer_id` you want to use to reference a person. If you don't provide this parameter, we assume that the `customer_id` in your request is a person's `id`.",
        "schema": {
          "type": "string",
          "enum": [
            "id",
            "email",
            "cio_id"
          ]
        }
      },
      "export_id": {
        "name": "export_id",
        "in": "path",
        "required": true,
        "description": "The export_id you want to access.",
        "schema": {
          "type": "integer"
        }
      },
      "language-1": {
        "name": "language",
        "required": false,
        "in": "query",
        "description": "A [language tag](/journeys/unsubscribe-faqs/#currently-supported-languages) you want the content translated in. If none is provided, the content will be sent in the default language of your subscription center.",
        "schema": {
          "type": "string"
        }
      },
      "language-2": {
        "name": "language",
        "in": "path",
        "required": true,
        "description": "A [language tag](/journeys/unsubscribe-faqs/#currently-supported-languages) of a language variant. If you don't provide a language (an empty string), we'll use your default language. If the language variant does not exist, we'll return an error.",
        "schema": {
          "type": "string"
        }
      },
      "newsletter_id": {
        "name": "newsletter_id",
        "in": "path",
        "required": true,
        "description": "The identifier of a newsletter.",
        "schema": {
          "type": "integer"
        }
      },
      "content_id": {
        "name": "content_id",
        "in": "path",
        "required": true,
        "description": "The identifier of a message in a newsletter. If your newsletter is an A/B test or has multiple languages, you may have multiple `content_id` values for your newsletter. You can [get a newsletter](#operation/getNewsletters) to find your newsletter's content IDs.",
        "schema": {
          "type": "integer"
        }
      },
      "webhook_id": {
        "name": "webhook_id",
        "in": "path",
        "required": true,
        "description": "The identifier of a webhook.",
        "schema": {
          "type": "integer"
        }
      },
      "message_id": {
        "name": "message_id",
        "in": "path",
        "required": true,
        "description": "The identifier of a message.",
        "schema": {
          "type": "string"
        }
      },
      "campaign_id_query": {
        "name": "campaign_id",
        "in": "query",
        "required": false,
        "description": "The campaign you want to filter for.",
        "schema": {
          "type": "integer"
        }
      },
      "newsletter_id_query": {
        "name": "newsletter_id",
        "in": "query",
        "required": false,
        "description": "The newsletter you want to filter for.",
        "schema": {
          "type": "integer"
        }
      },
      "action_id_query": {
        "name": "action_id",
        "in": "query",
        "required": false,
        "description": "The action you want to filter for.",
        "schema": {
          "type": "integer"
        }
      },
      "campaign_id": {
        "name": "campaign_id",
        "in": "path",
        "required": true,
        "description": "The ID of the campaign that you want to trigger or return information about.",
        "schema": {
          "type": "integer",
          "example": 3
        }
      },
      "trigger_id": {
        "name": "trigger_id",
        "in": "path",
        "required": true,
        "description": "The ID of the campaign trigger that you want to return information for.",
        "schema": {
          "type": "integer",
          "example": 3
        }
      },
      "track_customer_id": {
        "name": "identifier",
        "required": true,
        "in": "path",
        "description": "The unique value representing a person. The values you use to identify a person may be an `id`, `email` address, or the `cio_id` (when updating people), depending on your workspace settings. When you reference people by `cio_id`, you must prefix the value with `cio_`.\n",
        "schema": {
          "oneOf": [
            {
              "title": "id",
              "type": "string",
              "example": 12345,
              "description": "The unique identifier for a person that you want to create or modify."
            },
            {
              "title": "email",
              "type": "string",
              "example": "person@example.com",
              "description": "A person's email address. If adding a new person in an email-based workspace, you must use this value."
            },
            {
              "title": "cio_id",
              "type": "string",
              "format": "cio_[a-zA-Z0-9]*",
              "description": "A canonical identifier assigned by Customer.io when you add a person. When referencing a person by this value, you must prefix the value with `cio_`. You can [look up a person using the App API](#tag/Customers) to find their `cio_id`. \n\nYou must use this value to update a person's other identifiers—their `id` or `email`, unless you enable your workspace's [Allow updates to email using ID](/workspaces/#update-email-with-id) setting.\n",
              "example": "cio_03000001"
            }
          ]
        }
      },
      "trackEvent_customer_id": {
        "name": "identifier",
        "required": true,
        "in": "path",
        "description": "The unique value representing a person. You may identify a person by `id`, `email` address, or the `cio_id` (when updating people), depending on your workspace settings.\n",
        "schema": {
          "oneOf": [
            {
              "title": "id",
              "type": "string",
              "example": 12345,
              "description": "The unique identifier you assigned to a person."
            },
            {
              "title": "email",
              "type": "string",
              "example": "person@example.com",
              "description": "A person's email address."
            },
            {
              "title": "cio_id",
              "type": "string",
              "format": "cio_[a-zA-Z0-9]*",
              "description": "A canonical identifier assigned by Customer.io when you add a person. When referencing a person by this value, you must prefix the value with `cio_`. You can [look up a person using the App API](#tag/Customers) to find their `cio_id`, but you must prefix this value with `cio_` when using it to reference a person.\n\nYou can use this value to update a person's other identifiers—their `id` or `email`.\n",
              "example": "cio_03000001"
            }
          ]
        }
      },
      "customer_id": {
        "name": "customer_id",
        "required": true,
        "in": "path",
        "description": "The ID of the customer you want to perform an operation against.",
        "schema": {
          "type": "string",
          "example": 12345
        }
      },
      "device_id": {
        "name": "device_id",
        "in": "path",
        "required": true,
        "description": "The ID of the device you want to perform an operation against.",
        "schema": {
          "type": "string"
        }
      },
      "segment_id": {
        "name": "segment_id",
        "in": "path",
        "required": true,
        "description": "The identifier for a segment. You can find your segment's ID on its page in the dashboard—go to *Segments*, select your segment, and find the ID under *Usage*. Or you can find your segment using the [App API](#tag/Segments).",
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "start": {
        "name": "start",
        "in": "query",
        "required": false,
        "description": "The token for the page of results you want to return. Responses contain a `next` property. Use this property as the `start` value to return the next page of results.",
        "schema": {
          "type": "string"
        }
      },
      "resolution": {
        "name": "res",
        "in": "query",
        "description": "Determines increment for metrics—hourly, daily, weekly, or monthly.",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "hours",
            "hourly",
            "days",
            "daily",
            "weeks",
            "weekly",
            "months",
            "monthly"
          ]
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "required": false,
        "description": "The maximum number of results you want to retrieve per page.",
        "schema": {
          "type": "integer"
        }
      },
      "limit-10-100": {
        "name": "limit",
        "in": "query",
        "required": false,
        "description": "The maximum number of results you want to retrieve per page.",
        "schema": {
          "type": "integer",
          "default": 10,
          "maximum": 100
        }
      },
      "limit-50-1000": {
        "name": "limit",
        "in": "query",
        "required": false,
        "description": "The maximum number of results you want to retrieve per page.",
        "schema": {
          "type": "integer",
          "default": 50,
          "maximum": 1000
        }
      },
      "limit-100-1000": {
        "name": "limit",
        "in": "query",
        "required": false,
        "description": "The maximum number of results you want to retrieve per page.",
        "schema": {
          "type": "integer",
          "default": 100,
          "maximum": 1000
        }
      },
      "offset": {
        "name": "offset",
        "in": "query",
        "required": false,
        "description": "The number of records to skip before retrieving results.",
        "schema": {
          "type": "integer",
          "default": 0
        }
      },
      "action_id": {
        "name": "action_id",
        "in": "path",
        "required": true,
        "description": "The action you want to lookup or act on.",
        "schema": {
          "type": "integer"
        }
      },
      "period": {
        "name": "period",
        "in": "query",
        "required": false,
        "description": "The unit of time for your report.",
        "schema": {
          "type": "string",
          "default": "days",
          "enum": [
            "hours",
            "days",
            "weeks",
            "months"
          ]
        }
      },
      "steps": {
        "name": "steps",
        "in": "query",
        "required": false,
        "description": "The number of periods you want to return. Defaults to the maximum available, or `12` if the period is in `months`. Maximums are 24 hours, 45 days, 12 weeks, or 121 months. Days start at 00:00 EST. Weeks start at 00:00 EST on Sunday. Months start at 00:00 EST on the 1st of the month.",
        "schema": {
          "type": "integer"
        }
      },
      "metricType": {
        "name": "type",
        "in": "query",
        "required": false,
        "description": "The type of item you want to return metrics for. When empty, the response contains metrics for all possible types.",
        "schema": {
          "type": "string",
          "enum": [
            "email",
            "webhook",
            "twilio",
            "slack",
            "push",
            "in_app"
          ]
        }
      },
      "metric": {
        "name": "metric",
        "in": "query",
        "required": false,
        "description": "Determines the metric(s) you want to return.",
        "schema": {
          "type": "string",
          "enum": [
            "attempted",
            "sent",
            "delivered",
            "opened",
            "clicked",
            "converted",
            "bounced",
            "spammed",
            "unsubscribed",
            "dropped",
            "failed",
            "undeliverable"
          ]
        }
      },
      "unique": {
        "name": "unique",
        "in": "query",
        "required": false,
        "description": "If true, the response contains only unique customer results, i.e. a customer who clicks a link twice is only counted once. If false, the response contains the total number of results without regard to uniqueness.",
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "drafts": {
        "name": "drafts",
        "in": "query",
        "required": false,
        "description": "If true, your request returns drafts rather than active/sent messages.",
        "schema": {
          "type": "boolean"
        }
      },
      "get_apitb_broadcast_id": {
        "name": "broadcast_id",
        "in": "path",
        "required": true,
        "description": "The ID of the broadcast that you want to return information about.",
        "schema": {
          "type": "integer"
        }
      },
      "broadcast_id": {
        "name": "broadcast_id",
        "in": "path",
        "required": true,
        "description": "The identifier of a broadcast.",
        "schema": {
          "type": "integer"
        }
      },
      "state": {
        "name": "state",
        "in": "query",
        "required": false,
        "description": "The state of a broadcast.",
        "schema": {
          "type": "string",
          "enum": [
            "failed",
            "sent",
            "drafted",
            "attempted"
          ]
        }
      },
      "start_ts": {
        "name": "start_ts",
        "in": "query",
        "required": false,
        "description": "The beginning timestamp for your query.",
        "schema": {
          "type": "integer",
          "format": "unix timestamp"
        }
      },
      "end_ts": {
        "name": "end_ts",
        "in": "query",
        "required": false,
        "description": "The ending timestamp for your query.",
        "schema": {
          "type": "integer",
          "format": "unix timestamp"
        }
      }
    },
    "responses": {
      "200": {
        "description": "A successful request returns an empty object response."
      },
      "204": {
        "description": "Success. No content."
      },
      "400": {
        "description": "Invalid or malformed request.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "An array of errors.",
                      "items": {
                        "type": "string",
                        "description": "Error descriptions."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized request. Make sure that you provided the right credentials."
      },
      "404": {
        "description": "The campaign and/or action do not exist."
      },
      "429": {
        "description": "Your request is over the 10-per-second limit."
      },
      "400-campaigns": {
        "description": "The `campaignID` or `actionID` is invalid."
      },
      "400-campaigns-lang": {
        "description": "The `campaignID` or `actionID` is invalid. It could also be that the `language` requested does not exist for this action."
      },
      "400-broadcasts": {
        "description": "The `broadcastID`, `actionID` or `triggerID` is invalid."
      },
      "400-broadcasts-lang": {
        "description": "The `broadcastID`, `actionID` or `triggerID` is invalid. Or the `language` does not exist for this action."
      },
      "404-broadcasts": {
        "description": "The broadcast, action, and/or trigger do not exist."
      }
    },
    "securitySchemes": {
      "Bearer-Auth": {
        "type": "http",
        "scheme": "bearer",
        "description": "The App API uses a bearer authentication scheme.\n\nYou can generate a bearer token, known as an **App API Key**, with a defined scope in [your account settings](https://fly.customer.io/settings/api_credentials?keyType=app). [Learn more about bearer authorization in Customer.io](/managing-credentials).\n"
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Webhooks",
      "tags": [
        "Reporting webhooks"
      ]
    },
    {
      "name": "Webhook Event Schemas",
      "tags": [
        "Customer Events",
        "Email Events",
        "SMS Events",
        "Push Notification Events",
        "In-App Message Events",
        "Slack Events",
        "Webhook Events"
      ]
    }
  ]
}